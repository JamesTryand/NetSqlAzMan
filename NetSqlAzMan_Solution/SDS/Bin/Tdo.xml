<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Tdo</name>
    </assembly>
    <members>
        <member name="T:Tdo.Common.TdoTypes.TdoDouble">
            <summary>
            TdoDouble class. Allows to keep SqlDouble actualValue type
            </summary>
        </member>
        <member name="T:Tdo.Common.TdoTypes.TdoTypeBase`1">
            <summary>
            Base class for all Tdo Types 
            </summary>
        </member>
        <member name="T:Tdo.Common.TdoTypes.ITdoType`1">
            <summary>
            Interface for all Tdo Types 
            </summary>
        </member>
        <member name="T:Tdo.Common.TdoTypes.ITdoColumn">
            <summary>
            Interface for all Tdo Types 
            </summary>
        </member>
        <member name="M:Tdo.Common.TdoTypes.ITdoColumn.BeginEdit">
            <summary>
            Saves the state of the fields and allows to modify the values. Call BeginEdit() before modifying the values of the fields
            </summary>
        </member>
        <member name="M:Tdo.Common.TdoTypes.ITdoColumn.EndEdit">
            <summary>
            Ends modifying the values and keeps a copy of the values in case of a CancelEdit(). Call EndEdit() before invoking Inert,Update,Delete methods.
            </summary>
        </member>
        <member name="M:Tdo.Common.TdoTypes.ITdoColumn.CancelEdit">
            <summary>
            Ends  modifying the values and restores the original ones.Call CancelEdit() to restore all the original values before having invoked the BeginEdit() method.
            </summary>
        </member>
        <member name="P:Tdo.Common.TdoTypes.ITdoColumn.AllowDBNull">
            <summary>
            Boolean that indicates wether the field can be NULL
            </summary>
        </member>
        <member name="P:Tdo.Common.TdoTypes.ITdoColumn.AutoIncrement">
            <summary>
            Boolean that indicates if the field is IDENTITY
            </summary>
        </member>
        <member name="P:Tdo.Common.TdoTypes.ITdoColumn.AutoIncrementSeed">
            <summary>
            Long that indicates the start actualValue of the IDENTITY field 
            </summary>
        </member>
        <member name="P:Tdo.Common.TdoTypes.ITdoColumn.AutoIncrementStep">
            <summary>
            Long that indicates the actualValue increase of the IDENTITY field
            </summary>
        </member>
        <member name="P:Tdo.Common.TdoTypes.ITdoColumn.Caption">
            <summary>
            String that contains the name of the field except for ALIAS
            </summary>
        </member>
        <member name="P:Tdo.Common.TdoTypes.ITdoColumn.ColumnName">
            <summary>
            String that contains the name of the field 
            </summary>
        </member>
        <member name="P:Tdo.Common.TdoTypes.ITdoColumn.ColumnNameForParameter">
            <summary>
            String that contains the name of the field parameter
            </summary>
        </member>
        <member name="P:Tdo.Common.TdoTypes.ITdoColumn.ColumnNameForDataTable">
            <summary>
            Gets the column name for DataTable objects.
            </summary>
            <value>The column name for DataTable.</value>
        </member>
        <member name="P:Tdo.Common.TdoTypes.ITdoColumn.MaxLength">
            <summary>
            Integer that indicates the length of the field. -1 indicates variable length or not determined
            </summary>
        </member>
        <member name="P:Tdo.Common.TdoTypes.ITdoColumn.ReadOnly">
             <summary>
            Boolean that indicates if the field is only  reading
             </summary>
        </member>
        <member name="P:Tdo.Common.TdoTypes.ITdoColumn.SqlDbType">
            <summary>
            System.Data.SqlDbType of ITdoColumn
            </summary>
        </member>
        <member name="P:Tdo.Common.TdoTypes.ITdoColumn.TdoEntity">
            <summary>
            String that contains the name of the Table to which the field belongs to
            </summary>
        </member>
        <member name="P:Tdo.Common.TdoTypes.ITdoColumn.Unique">
            <summary>
            Boolean that indicates if a unique constraint exists on that field
            </summary>
        </member>
        <member name="P:Tdo.Common.TdoTypes.ITdoColumn.ObjectValue">
            <summary>
            Return Value property of Object type
            </summary>
        </member>
        <member name="P:Tdo.Common.TdoTypes.ITdoColumn.Modified">
            <summary>
            Return True if Value has been changed 
            </summary>
        </member>
        <member name="P:Tdo.Common.TdoTypes.ITdoColumn.IsConstant">
            <summary>
            True if column is a constant expression, false otherwise.
            </summary>
        </member>
        <member name="T:Tdo.Common.TdoTypes.ITdoClonableValue`1">
            <summary>
            Interface for all Tdo Clonable Types.
            </summary>
            <typeparam name="T">Generics Type</typeparam>
        </member>
        <member name="M:Tdo.Common.TdoTypes.ITdoClonableValue`1.ClonedValue">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Tdo.Common.TdoTypes.ITdoType`1.Value">
            <summary>
            Sql Column Value
            </summary>
        </member>
        <member name="F:Tdo.Common.TdoTypes.TdoTypeBase`1.beginEditInvoked">
            <summary>
            Flag
            </summary>
        </member>
        <member name="F:Tdo.Common.TdoTypes.TdoTypeBase`1.actualValue">
            <summary>
            Field actualValue
            </summary>
        </member>
        <member name="F:Tdo.Common.TdoTypes.TdoTypeBase`1.oldValue">
            <summary>
            Old Value for restoring operations
            </summary>
        </member>
        <member name="F:Tdo.Common.TdoTypes.TdoTypeBase`1.pTdoEntity">
            <summary>
            Reference to TDOTable class to which the field belongs to
            </summary>
        </member>
        <member name="F:Tdo.Common.TdoTypes.TdoTypeBase`1.pModified">
            <summary>
            Boolean that indicates if the field has been pModified by the last operation on DB
            </summary>
        </member>
        <member name="F:Tdo.Common.TdoTypes.TdoTypeBase`1.pAllowDBNull">
            <summary>
            Boolean that indicates wether the field can be NULL
            </summary>
        </member>
        <member name="F:Tdo.Common.TdoTypes.TdoTypeBase`1.pAutoIncrement">
            <summary>
            Boolean that indicates if the field is IDENTITY
            </summary>
        </member>
        <member name="F:Tdo.Common.TdoTypes.TdoTypeBase`1.pAutoIncrementSeed">
            <summary>
            Long that indicates the start actualValue of the IDENTITY field 
            </summary>
        </member>
        <member name="F:Tdo.Common.TdoTypes.TdoTypeBase`1.pAutoIncrementStep">
            <summary>
            Long that indicates the actualValue increase of the IDENTITY field
            </summary>
        </member>
        <member name="F:Tdo.Common.TdoTypes.TdoTypeBase`1.pCaption">
            <summary>
            String that contains the name of the field except for ALIAS
            </summary>
        </member>
        <member name="F:Tdo.Common.TdoTypes.TdoTypeBase`1.pColumnName">
            <summary>
            String that contains the name of the field
            </summary>
        </member>
        <member name="F:Tdo.Common.TdoTypes.TdoTypeBase`1.pColumnNameForParameter">
            <summary>
            This contains the name of the field without "strange" characters
            </summary>
        </member>
        <member name="F:Tdo.Common.TdoTypes.TdoTypeBase`1.pMaxLength">
            <summary>
            Integer that indicates the length of the field. -1 indicates variable length or not determined
            </summary>
        </member>
        <member name="F:Tdo.Common.TdoTypes.TdoTypeBase`1.pReadOnly">
             <summary>
            Boolean that indicates if the field is only  reading
             </summary>
        </member>
        <member name="F:Tdo.Common.TdoTypes.TdoTypeBase`1.pUnique">
            <summary>
            Boolean that indicates if a unique constraint exists
            </summary>
        </member>
        <member name="F:Tdo.Common.TdoTypes.TdoTypeBase`1.pIsConstant">
            <summary>
            True if column is a constant expression, false otherwise.
            </summary>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoTypeBase`1.#ctor">
            <summary>
            Default constructor 
            </summary>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoTypeBase`1.#ctor(System.Boolean,System.Boolean,System.Int64,System.Int64,System.String,System.String,System.Int32,System.Boolean,System.Boolean,Tdo.Common.Entities.ITdoEntity)">
            <summary>
            Constructor of TDOTypeBase class
            </summary>
            <param name="allowDBNull">Boolean that indicates wether the field can be NULL</param>
            <param name="autoIncrement">Boolean that indicates if the field is IDENTITY (auto-increase)</param>
            <param name="autoIncrementSeed">Long that indicates how much is increasing the IDENTITY field</param>
            <param name="autoIncrementStep">Long that indicates the start actualValue of the IDENTITY field </param>
            <param name="caption">String that indicates the heading/columnAlias of the field</param>
            <param name="columnName">String that indicates the name of the column (field)</param>
            <param name="maxLength">Integer that indicates the maximum length of the field (-1,field without limit)</param>
            <param name="readOnly">Boolean that indicates if the field is only reading</param>
            <param name="unique">Boolean that indicates if a unique constraint exists on that field</param>
            <param name="tdoEntity">TdoEntity referenced to the class that contains the field</param>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoTypeBase`1.TransformToVariable(System.String)">
            <summary>
            Returns the name of the field in a format useful like a parameter
            </summary>
            <param name="name">Name of the field</param>
            <returns>Parameter name without "" or strange characters</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoTypeBase`1.Alias(System.String)">
            <summary>
            Define an columnAlias, setting pCaption property
            </summary>
            <param name="columnAlias">Column columnAlias (columnname as [columnAlias])</param>
            <returns></returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoTypeBase`1.BeginEdit">
            <summary>
            Saves the state of the fields and allows to modify the values. Call BeginEdit() before modifying the values of the fields
            </summary>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoTypeBase`1.EndEdit">
            <summary>
            Ends modifying the values and keeps a copy of the values in case of a CancelEdit(). Call EndEdit() before invoking Inert,Update,Delete methods.
            </summary>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoTypeBase`1.CancelEdit">
            <summary>
            Ends  modifying the values and restores the original ones.Call CancelEdit() to restore all the original values before having invoked the BeginEdit() method.
            </summary>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoTypeBase`1.NameIfModified(System.String)">
            <summary>
            Returns the name of the field with a suffix if this has been changed
            Otherwise it returns ""
            </summary>
            <param name="suffix">Suffix to set after the name of the field</param>
            <returns>Returns an expression like TDOSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoTypeBase`1.NameIfModified(System.String,System.String)">
            <summary>
            Returns the name of the field with a suffix if this has been changed
            Otherwise it returns ""
            </summary>
            <param name="prefix">Prefix to set before the name of the field</param>
            <param name="suffix">Suffix to set after the name of the field</param>
            <returns>Returns an expression like TDOSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoTypeBase`1.Equals(System.Object)">
            <summary>
            Comparison operator Equal
            </summary>
            <param name="obj">Object to compare</param>
            <returns>Returns an expression like TDOSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoTypeBase`1.GetHashCode">
            <summary>
            Returns Hash code
            </summary>
            <returns>Returns an expression like TDOSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoTypeBase`1.ToString">
            <summary>
            Returns the qualified name of the object
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoTypeBase`1.Clone">
            <summary>
            Create a copy of the current TdoColumn
            </summary>
            <returns>TdoEntityType</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoTypeBase`1.ClonedValue(System.Boolean)">
            <summary>
            Create a copy of toClone Value property
            </summary>
            <param name="actualValue">True to clone actualValue property, False to clone oldValue property</param>
            <returns>TdoEntityType</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoTypeBase`1.ClonedValue">
            <summary>
            Create a copy of Value property
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoTypeBase`1.ColumnOrValue(Tdo.Common.TdoTypes.ITdoColumn)">
            <summary>
            Return column.ObjectValue.ToString() if IsConstant==true, column.TdoEntity.EntityName.columnName otherwise.
            </summary>
            <returns>Column or Value string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoTypeBase`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Tdo.Common.TdoTypes.TdoTypeBase`1.AllowDBNull">
            <summary>
            Boolean that indicates wether the field can be NULL
            </summary>
        </member>
        <member name="P:Tdo.Common.TdoTypes.TdoTypeBase`1.AutoIncrement">
            <summary>
            Boolean that indicates if the field is IDENTITY
            </summary>
        </member>
        <member name="P:Tdo.Common.TdoTypes.TdoTypeBase`1.AutoIncrementSeed">
            <summary>
            Long that indicates the start actualValue of the IDENTITY field 
            </summary>
        </member>
        <member name="P:Tdo.Common.TdoTypes.TdoTypeBase`1.AutoIncrementStep">
            <summary>
            Long that indicates the actualValue increase of the IDENTITY field
            </summary>
        </member>
        <member name="P:Tdo.Common.TdoTypes.TdoTypeBase`1.Caption">
            <summary>
            String that contains the name of the field except for ALIAS
            </summary>
        </member>
        <member name="P:Tdo.Common.TdoTypes.TdoTypeBase`1.ColumnName">
            <summary>
            String that contains the name of the field
            </summary>
        </member>
        <member name="P:Tdo.Common.TdoTypes.TdoTypeBase`1.Tdo#Common#TdoTypes#ITdoColumn#ColumnNameForParameter">
            <summary>
            String that contains the name of the field parameter
            </summary>
        </member>
        <member name="P:Tdo.Common.TdoTypes.TdoTypeBase`1.ColumnNameForDataTable">
            <summary>
            Gets the column name for DataTable objects.
            </summary>
            <value>The column name for DataTable.</value>
        </member>
        <member name="P:Tdo.Common.TdoTypes.TdoTypeBase`1.MaxLength">
            <summary>
            Integer that indicates the length of the field. -1 indicates variable length or not determined
            </summary>
        </member>
        <member name="P:Tdo.Common.TdoTypes.TdoTypeBase`1.SqlDbType">
            <summary>
            System.Data.SqlDbType of ITdoColumn
            </summary>
        </member>
        <member name="P:Tdo.Common.TdoTypes.TdoTypeBase`1.Unique">
            <summary>
            Boolean that indicates if a unique constraint exists
            </summary>
        </member>
        <member name="P:Tdo.Common.TdoTypes.TdoTypeBase`1.TdoEntity">
            <summary>
            Returns or sets the Table to which the TDO field belongs to and shares resources
            </summary>
        </member>
        <member name="P:Tdo.Common.TdoTypes.TdoTypeBase`1.Value">
            <summary>
            Return or Set Field Value
            </summary>
        </member>
        <member name="P:Tdo.Common.TdoTypes.TdoTypeBase`1.ObjectValue">
            <summary>
            Get or Set Value property of Object type
            </summary>
        </member>
        <member name="P:Tdo.Common.TdoTypes.TdoTypeBase`1.Modified">
            <summary>
            Return True if Value has been pModified otherwise false
            </summary>
        </member>
        <member name="P:Tdo.Common.TdoTypes.TdoTypeBase`1.IsConstant">
            <summary>
            Gets or sets if column is a constant expression.
            </summary>
            <remarks>
            True for Value, false for Column.
            </remarks>
        </member>
        <member name="P:Tdo.Common.TdoTypes.TdoTypeBase`1.ReadOnly">
             <summary>
            Boolean that indicates if the field is only  reading
             </summary>
        </member>
        <member name="P:Tdo.Common.TdoTypes.TdoTypeBase`1.IsNull">
            <summary>
            Indicates whether value is Null.
            </summary>
        </member>
        <member name="E:Tdo.Common.TdoTypes.TdoTypeBase`1.Disposed">
            <summary>
            Disposed event.
            </summary>
        </member>
        <member name="P:Tdo.Common.TdoTypes.TdoTypeBase`1.Site">
            <summary>
            Gets or sets the <see cref="T:System.ComponentModel.ISite"></see> associated with the <see cref="T:System.ComponentModel.IComponent"></see>.
            </summary>
            <value></value>
            <returns>The <see cref="T:System.ComponentModel.ISite"></see> object associated with the component; or null, if the component does not have a site.</returns>
        </member>
        <member name="T:Tdo.Common.TdoTypes.ITdoApproximatelNumericColumn">
            <summary>
            Interface for all Real Numeric Tdo Types 
            </summary>
        </member>
        <member name="T:Tdo.Common.TdoTypes.ITdoNumericColumn">
            <summary>
            Interface for all Numeric Tdo Types 
            </summary>
        </member>
        <member name="T:Tdo.Common.TdoTypes.ITdoNoBlobColumn">
            <summary>
            Interface for all No-Blob Tdo Types 
            </summary>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoDouble.#ctor">
            <summary>
            Default constructor for TdoDouble Class
            </summary>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoDouble.#ctor(System.Data.SqlTypes.SqlDouble,System.String)">
            <summary>
            Constructor for TdoDouble Class.
            </summary>
            <param name="value">Column constant value</param>
            <param name="columnAlias">Alias column.</param>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoDouble.#ctor(System.Boolean,System.Boolean,System.Int64,System.Int64,System.String,System.String,System.Int32,System.Boolean,System.Boolean,Tdo.Common.Entities.ITdoEntity)">
            <summary>
            Constructor for TdoDouble class
            </summary>
            <param name="allowDBNull">Boolean that indicates wether the field can be NULL</param>
            <param name="autoIncrement">Boolean that indicates if the field is IDENTITY (auto-increase)</param>
            <param name="autoIncrementSeed">Long that indicates how much is increasing the IDENTITY field</param>
            <param name="autoIncrementStep">Long that indicates the start actualValue of the IDENTITY field </param>
            <param name="caption">String that indicates the heading/columnAlias of the field</param>
            <param name="columnName">String that indicates the name of the column (field)</param>
            <param name="maxLength">Integer that indicates the maximum length of the field (-1,field without limit)</param>
            <param name="readOnly">Boolean that indicates if the field is only reading</param>
            <param name="unique">Boolean that indicates if a unique constraint exists on that field</param>
            <param name="tdoEntity">TdoEntity referenced to the class that contains the field</param>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoDouble.Equals(System.Object)">
            <summary>
            Comparison operator Equals
            </summary>
            <param name="obj">Object to compare</param>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoDouble.GetHashCode">
            <summary>
            Returns Hash code
            </summary>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoDouble.ClonedValue(System.Data.SqlTypes.SqlDouble)">
            <summary>
            Return a copy of SqlDouble structure
            </summary>
            <param name="toClone">SqlDouble to copy</param>
            <returns>SqlDouble structure copied</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoDouble.Clone">
            <summary>
            Creates a copy of this TdoDouble object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoDouble.ToString">
            <summary>
            Returns the string representation of the content of the field
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoDouble.op_Equality(Tdo.Common.TdoTypes.TdoDouble,System.Double)">
            <summary>
            Comparison operator Equals
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoDouble.op_Equality(Tdo.Common.TdoTypes.TdoDouble,Tdo.Common.TdoTypes.ITdoColumn)">
            <summary>
            Comparison operator Equals
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoDouble.op_Equality(Tdo.Common.TdoTypes.TdoDouble,System.DBNull)">
            <summary>
            Comparison operator is (null)
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoDouble.op_Equality(Tdo.Common.TdoTypes.TdoDouble,Tdo.Common.TdoSqlExpressionDom.TdoWhereRange)">
            <summary>
            Comparison operator BetWeen
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="range">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoDouble.op_Equality(Tdo.Common.TdoTypes.TdoDouble,Tdo.Common.TdoSqlExpressionDom.TdoWheresetOfValues)">
            <summary>
            Comparison operator IN
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="setOfValues">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoDouble.op_Equality(Tdo.Common.TdoTypes.TdoDouble,System.Object[])">
            <summary>
            Comparison operator IN
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="setOfValues">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoDouble.op_GreaterThan(Tdo.Common.TdoTypes.TdoDouble,System.Double)">
            <summary>
            Comparison operator Greater
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoDouble.op_GreaterThan(Tdo.Common.TdoTypes.TdoDouble,Tdo.Common.TdoTypes.ITdoColumn)">
            <summary>
            Comparison operator Greater
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoDouble.op_GreaterThanOrEqual(Tdo.Common.TdoTypes.TdoDouble,System.Double)">
            <summary>
            Comparison operator Greater or Equal
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoDouble.op_GreaterThanOrEqual(Tdo.Common.TdoTypes.TdoDouble,Tdo.Common.TdoTypes.ITdoColumn)">
            <summary>
            Comparison operator Greater or Equal
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoDouble.op_LessThan(Tdo.Common.TdoTypes.TdoDouble,System.Double)">
            <summary>
            Comparison operator Lower
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoDouble.op_LessThan(Tdo.Common.TdoTypes.TdoDouble,Tdo.Common.TdoTypes.ITdoColumn)">
            <summary>
            Comparison operator Lower
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoDouble.op_LessThanOrEqual(Tdo.Common.TdoTypes.TdoDouble,System.Double)">
            <summary>
            Comparison operator Lower or Equal
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoDouble.op_LessThanOrEqual(Tdo.Common.TdoTypes.TdoDouble,Tdo.Common.TdoTypes.ITdoColumn)">
            <summary>
            Comparison operator Lower or Equal
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoDouble.op_Inequality(Tdo.Common.TdoTypes.TdoDouble,Tdo.Common.TdoSqlExpressionDom.TdoWheresetOfValues)">
            <summary>
            Comparison operator NOT IN
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="setOfValues">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoDouble.op_Inequality(Tdo.Common.TdoTypes.TdoDouble,Tdo.Common.TdoTypes.ITdoColumn)">
            <summary>
            Comparison operator NotEqual
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoDouble.op_Inequality(Tdo.Common.TdoTypes.TdoDouble,System.Object[])">
            <summary>
            Comparison operator NOT IN
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="setOfValues">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoDouble.op_Inequality(Tdo.Common.TdoTypes.TdoDouble,Tdo.Common.TdoSqlExpressionDom.TdoWhereRange)">
            <summary>
            Comparison operator Not BetWeen
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="range">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoDouble.op_Inequality(Tdo.Common.TdoTypes.TdoDouble,System.Double)">
            <summary>
            Comparison operator NotEqual 
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoDouble.op_Inequality(Tdo.Common.TdoTypes.TdoDouble,System.DBNull)">
            <summary>
            Comparison operator is not (null)
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="P:Tdo.Common.TdoTypes.TdoDouble.ObjectValue">
            <summary>
            Get or Set Value property of Object type
            </summary>
        </member>
        <member name="P:Tdo.Common.TdoTypes.TdoDouble.SqlDbType">
            <summary>
            System.Data.SqlDbType of ITdoColumn
            </summary>
        </member>
        <member name="T:Tdo.Common.TdoSqlExpressionDom.OrderByOperator">
            <summary>
            Order By Operator enum
            </summary>
        </member>
        <member name="F:Tdo.Common.TdoSqlExpressionDom.OrderByOperator.Asc">
            <summary>
            ASC Operator for Order by clause 
            </summary>
        </member>
        <member name="F:Tdo.Common.TdoSqlExpressionDom.OrderByOperator.Desc">
            <summary>
            DESC Operator for Order by clause 
            </summary>
        </member>
        <member name="T:Tdo.Common.TdoSqlExpressionDom.SqlOperator">
            <summary>
            SqlOperator enumeration.
            </summary>
        </member>
        <member name="F:Tdo.Common.TdoSqlExpressionDom.SqlOperator.And">
            <summary>
            Boolean And operator
            </summary>
        </member>
        <member name="F:Tdo.Common.TdoSqlExpressionDom.SqlOperator.Or">
            <summary>
            Boolean Or operator
            </summary>
        </member>
        <member name="F:Tdo.Common.TdoSqlExpressionDom.SqlOperator.Not">
            <summary>
            Boolean Not
            </summary>
        </member>
        <member name="F:Tdo.Common.TdoSqlExpressionDom.SqlOperator.NotAnd">
            <summary>
            Boolean Not And operator
            </summary>
        </member>
        <member name="F:Tdo.Common.TdoSqlExpressionDom.SqlOperator.NotOr">
            <summary>
            Boolean Not Or operator
            </summary>
        </member>
        <member name="F:Tdo.Common.TdoSqlExpressionDom.SqlOperator.ExclusiveOr">
            <summary>
            Boolean Exclusive Or operator
            </summary>
        </member>
        <member name="F:Tdo.Common.TdoSqlExpressionDom.SqlOperator.Lower">
            <summary>
            Boolean Lower than operator
            </summary>
        </member>
        <member name="F:Tdo.Common.TdoSqlExpressionDom.SqlOperator.LowerOrEqual">
            <summary>
            Boolean Lower or equal than operator
            </summary>
        </member>
        <member name="F:Tdo.Common.TdoSqlExpressionDom.SqlOperator.Greater">
            <summary>
            Greater than operator
            </summary>
        </member>
        <member name="F:Tdo.Common.TdoSqlExpressionDom.SqlOperator.GreaterOrEqual">
            <summary>
            Greater or equal than operator
            </summary>
        </member>
        <member name="F:Tdo.Common.TdoSqlExpressionDom.SqlOperator.Equal">
            <summary>
            Equality operator.
            </summary>
        </member>
        <member name="F:Tdo.Common.TdoSqlExpressionDom.SqlOperator.NotEqual">
            <summary>
            Unequality operator.
            </summary>
        </member>
        <member name="F:Tdo.Common.TdoSqlExpressionDom.SqlOperator.In">
            <summary>
            Sql In operator.
            </summary>
        </member>
        <member name="F:Tdo.Common.TdoSqlExpressionDom.SqlOperator.NotIn">
            <summary>
            Sql Not In operator.
            </summary>
        </member>
        <member name="F:Tdo.Common.TdoSqlExpressionDom.SqlOperator.Between">
            <summary>
            Sql Between operator.
            </summary>
        </member>
        <member name="F:Tdo.Common.TdoSqlExpressionDom.SqlOperator.NotBetween">
            <summary>
            Sql Not Between operator.
            </summary>
        </member>
        <member name="F:Tdo.Common.TdoSqlExpressionDom.SqlOperator.Like">
            <summary>
            Sql Like operator.
            </summary>
        </member>
        <member name="F:Tdo.Common.TdoSqlExpressionDom.SqlOperator.NotLike">
            <summary>
            Sql Not Like or unlike operator.
            </summary>
        </member>
        <member name="F:Tdo.Common.TdoSqlExpressionDom.SqlOperator.Is">
            <summary>
            Is operator
            </summary>
        </member>
        <member name="F:Tdo.Common.TdoSqlExpressionDom.SqlOperator.IsNot">
            <summary>
            Is Not operator
            </summary>
        </member>
        <member name="T:Tdo.Common.TdoSqlExpressionDom.SqlOperatorHelper">
            <summary>
            SqlOperator enumeration class wrapper.
            </summary>
        </member>
        <member name="M:Tdo.Common.TdoSqlExpressionDom.SqlOperatorHelper.GetHashCode">
            <summary>
            Returns Hash actualValue
            </summary>
            <returns> </returns>
        </member>
        <member name="M:Tdo.Common.TdoSqlExpressionDom.SqlOperatorHelper.#ctor">
            <summary>
            default constructor.
            </summary>
        </member>
        <member name="M:Tdo.Common.TdoSqlExpressionDom.SqlOperatorHelper.#ctor(Tdo.Common.TdoSqlExpressionDom.SqlOperator)">
            <summary>
            initialize with compare logical operator
            </summary>
            <param name="op"></param>
        </member>
        <member name="M:Tdo.Common.TdoSqlExpressionDom.SqlOperatorHelper.#ctor(Tdo.Common.TdoSqlExpressionDom.JoinOperator)">
            <summary>
            initialize with join logical operator
            </summary>
            <param name="op"></param>
        </member>
        <member name="M:Tdo.Common.TdoSqlExpressionDom.SqlOperatorHelper.op_Implicit(Tdo.Common.TdoSqlExpressionDom.SqlOperator)~Tdo.Common.TdoSqlExpressionDom.SqlOperatorHelper">
            <summary>
            implicit SqlOperatorHelper type constructor from SqlOperator enumeration.
            </summary>
            <param name="op">SqlOperator enumeration actualValue type.</param>
            <returns>returns new SqlOperatorHelper class wrapper.</returns>
        </member>
        <member name="M:Tdo.Common.TdoSqlExpressionDom.SqlOperatorHelper.#ctor(Tdo.Common.TdoSqlExpressionDom.SqlOperatorHelper)">
            <summary>
            copy constructor for SqlOperatorHelper class.
            </summary>
            <param name="op">SqlOperatorHelper class to copy from.</param>
        </member>
        <member name="M:Tdo.Common.TdoSqlExpressionDom.SqlOperatorHelper.op_Implicit(Tdo.Common.TdoSqlExpressionDom.SqlOperatorHelper)~System.String">
            <summary>
            converts implicitly from a compareOperator type to a string
            </summary>
            <param name="op">the operator enum type to convert in clear string</param>
            <returns>Returns an expression as TdoSqlExpression useful to convert the Where Clause in string type</returns>
        </member>
        <member name="T:Tdo.Common.TdoSqlExpressionDom.TdoSqlExpression">
            <summary>
            It's the Class to construct the TdoEntityType-SQL expressions 
            </summary>
        </member>
        <member name="F:Tdo.Common.TdoSqlExpressionDom.TdoSqlExpression.Empty">
            <summary>
            Represents the sole instance an empty TdoSqlExpression
            </summary>
        </member>
        <member name="F:Tdo.Common.TdoSqlExpressionDom.TdoSqlExpression.left">
            <summary>
            left operand
            </summary>
        </member>
        <member name="F:Tdo.Common.TdoSqlExpressionDom.TdoSqlExpression.Operator">
            <summary>
            Operator
            </summary>
        </member>
        <member name="F:Tdo.Common.TdoSqlExpressionDom.TdoSqlExpression.right">
            <summary>
            Right operand
            </summary>
        </member>
        <member name="F:Tdo.Common.TdoSqlExpressionDom.TdoSqlExpression.whereparametercollection">
            <summary>
            Contains the parameters list to construct the Where clause
            </summary>
        </member>
        <member name="M:Tdo.Common.TdoSqlExpressionDom.TdoSqlExpression.#ctor">
            <summary>
            Default Constructor.Initializes the TdoSqlExpression to Empty expression.
            </summary>
        </member>
        <member name="M:Tdo.Common.TdoSqlExpressionDom.TdoSqlExpression.#ctor(Tdo.Common.TdoSqlExpressionDom.TdoSqlExpression,Tdo.Common.TdoSqlExpressionDom.SqlOperator,Tdo.Common.TdoSqlExpressionDom.TdoSqlExpression)">
            <summary>
            Constructor of TdoSqlExpression class.
            </summary>
            <param name="left">TdoSqlExpression on the left of the operator </param>
            <param name="Op">Operator</param>
            <param name="right">TdoSqlExpression on the right of the operator</param>
        </member>
        <member name="M:Tdo.Common.TdoSqlExpressionDom.TdoSqlExpression.#ctor(System.String,Tdo.Common.TdoSqlExpressionDom.SqlOperator,System.Object,Tdo.Common.TdoSqlExpressionDom.TdoParameterCollection)">
            <summary>
            Constructor of TdoSqlExpression class.
            </summary>
            <param name="left">string on the left of the operator</param>
            <param name="Op">Operator</param>
            <param name="right">string on the right of the operator</param>
            <param name="tdoParameterCollection">Parameters collection to construct parametric queries</param>
        </member>
        <member name="M:Tdo.Common.TdoSqlExpressionDom.TdoSqlExpression.#ctor(Tdo.Common.TdoTypes.ITdoColumn,Tdo.Common.TdoSqlExpressionDom.SqlOperator,System.Object)">
            <summary>
            Constructor of TdoSqlExpression class.
            </summary>
            <param name="left">TdoString on the left of the operator</param>
            <param name="Op">Operator</param>
            <param name="right">string on the right of the operator</param>
        </member>
        <member name="M:Tdo.Common.TdoSqlExpressionDom.TdoSqlExpression.op_BitwiseOr(Tdo.Common.TdoSqlExpressionDom.TdoSqlExpression,Tdo.Common.TdoSqlExpressionDom.TdoSqlExpression)">
            <summary>
            Operator OR
            </summary>
            <param name="left">TdoSqlExpression on the left of the operator</param>
            <param name="right">TdoSqlExpression on the right of the operator</param>
            <returns>Returns an expression as TdoSqlExpression useful to convert the Where Clause in string type</returns>
        </member>
        <member name="M:Tdo.Common.TdoSqlExpressionDom.TdoSqlExpression.op_BitwiseAnd(Tdo.Common.TdoSqlExpressionDom.TdoSqlExpression,Tdo.Common.TdoSqlExpressionDom.TdoSqlExpression)">
            <summary>
            Operator OR
            </summary>
            <param name="left">TdoSqlExpression on the lef of the operator</param>
            <param name="right">TdoSqlExpression on the right of the operator</param>
            <returns>Returns an expression as TdoSqlExpression useful to convert the Where Clause in string type</returns>
        </member>
        <member name="M:Tdo.Common.TdoSqlExpressionDom.TdoSqlExpression.op_LogicalNot(Tdo.Common.TdoSqlExpressionDom.TdoSqlExpression)">
            <summary>
            Operator NOT
            </summary>
            <param name="expr">TdoSqlExpression to which apply the operator </param>
            <returns>TdoSqlExpression denied NOT (expr)</returns>
        </member>
        <member name="M:Tdo.Common.TdoSqlExpressionDom.TdoSqlExpression.op_Implicit(Tdo.Common.TdoSqlExpressionDom.TdoSqlExpression)~System.String">
            <summary>
            Converts TdoSqlExpression expression into a TdoEntityType-Sql string expression.
            </summary>
            <param name="expr">TdoSqlExpression to convert</param>
            <returns>TdoEntityType-Sql string expression</returns>
        </member>
        <member name="M:Tdo.Common.TdoSqlExpressionDom.TdoSqlExpression.ToStringExpression">
            <summary>
            Converts TdoSqlExpression expression into a TdoEntityType-Sql string expression.
            </summary>
            <returns>Returns a string that contains the TdoEntityType-SQL expression</returns>
        </member>
        <member name="M:Tdo.Common.TdoSqlExpressionDom.TdoSqlExpression.ToString">
            <summary>
            Convert expressions in TdoEntityType-SQL
            </summary>
            <returns>Returns a string that contains the TdoEntityType-SQL expression</returns>
        </member>
        <member name="M:Tdo.Common.TdoSqlExpressionDom.TdoSqlExpression.Dispose">
            <summary>
            Release TdoSqlExpression Resources
            </summary>
        </member>
        <member name="P:Tdo.Common.TdoSqlExpressionDom.TdoSqlExpression.WhereParameterCollection">
            <summary>
            Contains the parameters list to construct the Where clause 
            </summary>
        </member>
        <member name="T:Tdo.Common.Programmability.TdoStoredProcedureBase">
            <summary>
            Base class for all Stored Procedures
            </summary>
        </member>
        <member name="T:Tdo.Common.Programmability.ITdoStoredProcedure">
            <summary>
            Common Interface for all Stored Procedures
            </summary>
        </member>
        <member name="P:Tdo.Common.Programmability.ITdoStoredProcedure.TdoHelper">
            <summary>
            Get TdoHelper reference to share common resources
            </summary>
        </member>
        <member name="P:Tdo.Common.Programmability.ITdoStoredProcedure.SchemaName">
            <summary>
            Get Stored Procedure Schema Name
            </summary>
        </member>
        <member name="P:Tdo.Common.Programmability.ITdoStoredProcedure.Name">
            <summary>
            Get Stored Procedure Name
            </summary>
        </member>
        <member name="P:Tdo.Common.Programmability.ITdoStoredProcedure.FullName">
            <summary>
            Get Full physical Name ([schema].[name])
            </summary>
        </member>
        <member name="E:Tdo.Common.Programmability.ITdoStoredProcedure.StatementCompleted">
            <summary>
            Occurs after a command is executed against the data source. 
            </summary>
        </member>
        <member name="F:Tdo.Common.Programmability.TdoStoredProcedureBase.procedurename">
            <summary>
            Stored Procedure Name
            </summary>
        </member>
        <member name="F:Tdo.Common.Programmability.TdoStoredProcedureBase.pSchemaName">
            <summary>
            Stored Procedure Schema Name
            </summary>
        </member>
        <member name="F:Tdo.Common.Programmability.TdoStoredProcedureBase.pTdoHelper">
            <summary>
            TdoHelper reference to share common resources
            </summary>
        </member>
        <member name="F:Tdo.Common.Programmability.TdoStoredProcedureBase.pParameters">
            <summary>
            Stored Procedure SqlParamaters Array
            </summary>
        </member>
        <member name="M:Tdo.Common.Programmability.TdoStoredProcedureBase.#ctor">
            <summary>
            TdoStoredProcedureBase default constructor.
            </summary>
        </member>
        <member name="M:Tdo.Common.Programmability.TdoStoredProcedureBase.AssignParameterValues(System.Data.SqlTypes.INullable[])">
            <summary>
            Assign SqlParameter values.
            </summary>
            <param name="parameters">Array of INullable parameters like (SqlString, SqlInt32, ...)</param>
        </member>
        <member name="M:Tdo.Common.Programmability.TdoStoredProcedureBase.FillDataTable">
            <summary>
            Execute Stored Procedure and returns a DataTable
            </summary>
            <returns>A System.Data.DataSet to fill with Stored Procedure result set.</returns>
        </member>
        <member name="M:Tdo.Common.Programmability.TdoStoredProcedureBase.FillDataSet">
            <summary>
            Execute Stored Procedure and returns a DataSet
            </summary>
            <returns>A System.Data.DataSet to fill with Stored Procedure result set.</returns>
        </member>
        <member name="M:Tdo.Common.Programmability.TdoStoredProcedureBase.ExecuteNonQuery">
            <summary>
            Executes Stored Procedure against the connection and returns the number of rows affected.
            </summary>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:Tdo.Common.Programmability.TdoStoredProcedureBase.ExecuteReader(System.Data.CommandBehavior,System.Data.SqlClient.SqlParameterCollection@)">
            <summary>
            Execute Stored Procedure and builds a System.Data.SqlClient.SqlDataReader.
            </summary>
            <param name="commandBehavior">One of the System.Data.CommandBehavior values.</param>
            <param name="sqlOutputParameterCollection">SqlParameterCollection with output parameters.</param>
            <returns>A System.Data.SqlClient.SqlDataReader object.</returns>
        </member>
        <member name="M:Tdo.Common.Programmability.TdoStoredProcedureBase.ExecuteReader(System.Data.CommandBehavior)">
            <summary>
            Execute Stored Procedure and builds a System.Data.SqlClient.SqlDataReader.
            </summary>
            <param name="commandBehavior">One of the System.Data.CommandBehavior values.</param>
            <returns>A System.Data.SqlClient.SqlDataReader object.</returns>
        </member>
        <member name="M:Tdo.Common.Programmability.TdoStoredProcedureBase.ExecuteReader">
            <summary>
            Execute Stored Procedure and builds a System.Data.SqlClient.SqlDataReader.
            </summary>
            <returns>A System.Data.SqlClient.SqlDataReader object.</returns>
        </member>
        <member name="M:Tdo.Common.Programmability.TdoStoredProcedureBase.ExecuteScalar">
            <summary>
            Executes Stored Procedure, and returns the first column of the first row in the result set returned by Stored Procedure. Extra columns or rows are ignored.
            </summary>
            <returns>The first column of the first row in the result set, or a null reference if the result set is empty.</returns>
        </member>
        <member name="M:Tdo.Common.Programmability.TdoStoredProcedureBase.ExecuteXmlReader(System.Data.SqlClient.SqlParameterCollection@)">
            <summary>
            Execute Stored Procedure and builds a System.Xml.XmlReader.
            </summary>
            <param name="sqlOutputParameterCollection">SqlParameterCollection with output parameters.</param>
            <returns>A System.Xml.XmlReader object.</returns>
        </member>
        <member name="M:Tdo.Common.Programmability.TdoStoredProcedureBase.ExecuteXmlReader">
            <summary>
            Execute Stored Procedure and builds a System.Xml.XmlReader.
            </summary>
            <returns>A System.Xml.XmlReader object.</returns>
        </member>
        <member name="M:Tdo.Common.Programmability.TdoStoredProcedureBase.ClearParameterValues">
            <summary>
            Clear all SqlParameter Value.
            </summary>
        </member>
        <member name="M:Tdo.Common.Programmability.TdoStoredProcedureBase.AssignOutputParameterValues(System.Data.SqlClient.SqlCommand)">
            <summary>
            Re-assigns output parameter values after Stored Procedure execution.
            </summary>
            <param name="sqlCommand">SqlCommand with SqlParamater Collection.</param>
        </member>
        <member name="M:Tdo.Common.Programmability.TdoStoredProcedureBase.AssignOutputParameterValues(System.Data.SqlClient.SqlParameterCollection)">
            <summary>
            Re-assigns output parameter values after Stored Procedure execution.
            </summary>
            <param name="sqlParameterCollection">SqlParameterCollection with values.</param>
        </member>
        <member name="M:Tdo.Common.Programmability.TdoStoredProcedureBase.EndAsyncStoredProcedure(System.IAsyncResult)">
            <summary>
            Finishes asynchronous execution of a stored procedure and return specific result.
            </summary>
            <param name="asyncResult">The System.IAsyncResult returned by the call to Begin_pStored_procedure_name.</param>
            <returns>object (System.Data.SqlDataReader/System.Int32/System.Xml.XmlReader)that can be used to retrieve the requested results.</returns>
        </member>
        <member name="M:Tdo.Common.Programmability.TdoStoredProcedureBase.ExecuteAsyncStoredProcedure(System.AsyncCallback,System.Object,System.Data.CommandBehavior,System.Data.SqlClient.SqlParameterCollection@)">
            <summary>
            Initiates the asynchronous execution of stored procedure described, and retrieves one or more result sets from the server.
            </summary>
            <param name="callBack">An System.AsyncCallback delegate that will be invoked when the command's execution has completed. Pass null (Nothing in Visual Basic) to indicate that no callBack is needed.</param>
            <param name="stateObject">A user-defined state object that will be passed to the callBack procedure. Retrieve this object from within the callBack procedure using the System.IAsyncResult.AsyncState property.</param>
            <param name="commandBehavior">One of the System.Data.CommandBehavior values.</param>
            <param name="sqlOutputParameterCollection">SqlParameterCollection with output parameters.</param>
            <returns>An System.IAsyncResult that can be used to poll and/or wait for results; this value is also needed when invoking EndExecuteXXXX() methods.</returns>
        </member>
        <member name="M:Tdo.Common.Programmability.TdoStoredProcedureBase.BeginExecuteReader(System.AsyncCallback,System.Object,System.Data.CommandBehavior,System.Data.SqlClient.SqlParameterCollection@)">
            <summary>
            Initiates the asynchronous execution of stored procedure described, and retrieves one or more result sets from the server.
            </summary>
            <param name="callBack">An System.AsyncCallback delegate that will be invoked when the command's execution has completed. Pass null (Nothing in Visual Basic) to indicate that no callBack is needed.</param>
            <param name="stateObject">A user-defined state object that will be passed to the callBack procedure. Retrieve this object from within the callBack procedure using the System.IAsyncResult.AsyncState property.</param>
            <param name="commandBehavior">One of the System.Data.CommandBehavior values.</param>
            <param name="sqlOutputParameterCollection">SqlParameterCollection with output parameters.</param>
            <returns>An System.IAsyncResult that can be used to poll and/or wait for results; this value is also needed when invoking EndExecuteXXXX() methods.</returns>
        </member>
        <member name="M:Tdo.Common.Programmability.TdoStoredProcedureBase.BeginExecuteReader(System.AsyncCallback,System.Object,System.Data.SqlClient.SqlParameterCollection@)">
            <summary>
            Initiates the asynchronous execution of stored procedure described, and retrieves one or more result sets from the server.
            </summary>
            <param name="callBack">An System.AsyncCallback delegate that will be invoked when the command's execution has completed. Pass null (Nothing in Visual Basic) to indicate that no callBack is needed.</param>
            <param name="stateObject">A user-defined state object that will be passed to the callBack procedure. Retrieve this object from within the callBack procedure using the System.IAsyncResult.AsyncState property.</param>
            <param name="sqlOutputParameterCollection">SqlParameterCollection with output parameters.</param>
            <returns>An System.IAsyncResult that can be used to poll and/or wait for results; this value is also needed when invoking EndExecuteXXXX() methods.</returns>
        </member>
        <member name="M:Tdo.Common.Programmability.TdoStoredProcedureBase.BeginExecuteReader(System.AsyncCallback,System.Object,System.Data.CommandBehavior)">
            <summary>
            Initiates the asynchronous execution of stored procedure described, and retrieves one or more result sets from the server.
            </summary>
            <param name="callBack">An System.AsyncCallback delegate that will be invoked when the command's execution has completed. Pass null (Nothing in Visual Basic) to indicate that no callBack is needed.</param>
            <param name="stateObject">A user-defined state object that will be passed to the callBack procedure. Retrieve this object from within the callBack procedure using the System.IAsyncResult.AsyncState property.</param>
            <param name="commandBehavior">One of the System.Data.CommandBehavior values.</param>
            <returns>An System.IAsyncResult that can be used to poll and/or wait for results; this value is also needed when invoking EndExecuteXXXX() methods.</returns>
        </member>
        <member name="M:Tdo.Common.Programmability.TdoStoredProcedureBase.BeginExecuteReader(System.AsyncCallback,System.Object)">
            <summary>
            Initiates the asynchronous execution of stored procedure described, and retrieves one or more result sets from the server.
            </summary>
            <param name="callBack">An System.AsyncCallback delegate that will be invoked when the command's execution has completed. Pass null (Nothing in Visual Basic) to indicate that no callBack is needed.</param>
            <param name="stateObject">A user-defined state object that will be passed to the callBack procedure. Retrieve this object from within the callBack procedure using the System.IAsyncResult.AsyncState property.</param>
            <returns>An System.IAsyncResult that can be used to poll and/or wait for results; this value is also needed when invoking EndExecuteXXXX() methods.</returns>
        </member>
        <member name="M:Tdo.Common.Programmability.TdoStoredProcedureBase.BeginExecuteReader(System.Data.CommandBehavior,System.Data.SqlClient.SqlParameterCollection@)">
            <summary>
            Initiates the asynchronous execution of stored procedure described, and retrieves one or more result sets from the server.
            </summary>
            <param name="commandBehavior">One of the System.Data.CommandBehavior values.</param>
            <param name="sqlOutputParameterCollection">SqlParameterCollection with output parameters.</param>
            <returns>An System.IAsyncResult that can be used to poll and/or wait for results; this value is also needed when invoking EndExecuteXXXX() methods.</returns>
        </member>
        <member name="M:Tdo.Common.Programmability.TdoStoredProcedureBase.BeginExecuteReader(System.Data.CommandBehavior)">
            <summary>
            Initiates the asynchronous execution of stored procedure described, and retrieves one or more result sets from the server.
            </summary>
            <param name="commandBehavior">One of the System.Data.CommandBehavior values.</param>
            <returns>An System.IAsyncResult that can be used to poll and/or wait for results; this value is also needed when invoking EndExecuteXXXX() methods.</returns>
        </member>
        <member name="M:Tdo.Common.Programmability.TdoStoredProcedureBase.BeginExecuteReader(System.Data.SqlClient.SqlParameterCollection@)">
            <summary>
            Initiates the asynchronous execution of stored procedure described, and retrieves one or more result sets from the server.
            </summary>
            <param name="sqlOutputParameterCollection">SqlParameterCollection with output parameters.</param>
            <returns>An System.IAsyncResult that can be used to poll and/or wait for results; this value is also needed when invoking EndExecuteXXXX() methods.</returns>
        </member>
        <member name="M:Tdo.Common.Programmability.TdoStoredProcedureBase.BeginExecuteReader">
            <summary>
            Initiates the asynchronous execution of stored procedure described, and retrieves one or more result sets from the server.
            </summary>
            <returns>An System.IAsyncResult that can be used to poll and/or wait for results; this value is also needed when invoking EndExecuteXXXX() methods.</returns>
        </member>
        <member name="M:Tdo.Common.Programmability.TdoStoredProcedureBase.EndExecuteReader(System.IAsyncResult)">
            <summary>
            Finishes asynchronous execution of Stored Procedure, returning the requested System.Data.SqlClient.SqlDataReader.
            </summary>
            <param name="asyncResult">The System.IAsyncResult returned by the call to BeginExecuteReader.</param>
            <returns>A System.Data.SqlClient.SqlDataReader object that can be used to retrieve the requested rows.</returns>
        </member>
        <member name="M:Tdo.Common.Programmability.TdoStoredProcedureBase.EndExecuteXmlReader(System.IAsyncResult)">
            <summary>
            Finishes asynchronous execution of Stored Procedure, returning the requested System.Xml.XmlReader.
            </summary>
            <param name="asyncResult">The System.IAsyncResult returned by the call to BeginExecuteXmlReader.</param>
            <returns>A System.Xml.XmlReader object that can be used to retrieve the requested rows.</returns>
        </member>
        <member name="M:Tdo.Common.Programmability.TdoStoredProcedureBase.EndExecuteNonQuery(System.IAsyncResult)">
            <summary>
            Finishes asynchronous execution of Stored Procedure.
            </summary>
            <param name="asyncResult">The System.IAsyncResult returned by the call to BeginExecuteNonQuery.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:Tdo.Common.Programmability.TdoStoredProcedureBase.BeginExecuteXmlReader(System.AsyncCallback,System.Object,System.Data.SqlClient.SqlParameterCollection@)">
            <summary>
            Initiates the asynchronous execution of stored procedure described, and retrieves one or more result sets from the server.
            </summary>
            <param name="callBack">An System.AsyncCallback delegate that will be invoked when the command's execution has completed. Pass null (Nothing in Visual Basic) to indicate that no callBack is needed.</param>
            <param name="stateObject">A user-defined state object that will be passed to the callBack procedure. Retrieve this object from within the callBack procedure using the System.IAsyncResult.AsyncState property.</param>
            <param name="sqlOutputParameterCollection">SqlParameterCollection with output parameters.</param>
            <returns>An System.IAsyncResult that can be used to poll and/or wait for results; this value is also needed when invoking EndExecuteXXXX() methods.</returns>
        </member>
        <member name="M:Tdo.Common.Programmability.TdoStoredProcedureBase.BeginExecuteNonQuery(System.AsyncCallback,System.Object)">
            <summary>
            Initiates the asynchronous execution of stored procedure described, and retrieves one or more result sets from the server.
            </summary>
            <param name="callBack">An System.AsyncCallback delegate that will be invoked when the command's execution has completed. Pass null (Nothing in Visual Basic) to indicate that no callBack is needed.</param>
            <param name="stateObject">A user-defined state object that will be passed to the callBack procedure. Retrieve this object from within the callBack procedure using the System.IAsyncResult.AsyncState property.</param>
            <returns>An System.IAsyncResult that can be used to poll and/or wait for results; this value is also needed when invoking EndExecuteXXXX() methods.</returns>
        </member>
        <member name="M:Tdo.Common.Programmability.TdoStoredProcedureBase.BeginExecuteNonQuery">
            <summary>
            Initiates the asynchronous execution of stored procedure described, and retrieves one or more result sets from the server.
            </summary>
            <returns>An System.IAsyncResult that can be used to poll and/or wait for results; this value is also needed when invoking EndExecuteXXXX() methods.</returns>
        </member>
        <member name="M:Tdo.Common.Programmability.TdoStoredProcedureBase.BeginExecuteXmlReader(System.AsyncCallback,System.Object)">
            <summary>
            Initiates the asynchronous execution of stored procedure described, and retrieves one or more result sets from the server.
            </summary>
            <param name="callBack">An System.AsyncCallback delegate that will be invoked when the command's execution has completed. Pass null (Nothing in Visual Basic) to indicate that no callBack is needed.</param>
            <param name="stateObject">A user-defined state object that will be passed to the callBack procedure. Retrieve this object from within the callBack procedure using the System.IAsyncResult.AsyncState property.</param>
            <returns>An System.IAsyncResult that can be used to poll and/or wait for results; this value is also needed when invoking EndExecuteXXXX() methods.</returns>
        </member>
        <member name="M:Tdo.Common.Programmability.TdoStoredProcedureBase.BeginExecuteXmlReader">
            <summary>
            Initiates the asynchronous execution of stored procedure described, and retrieves one or more result sets from the server.
            </summary>
            <returns>An System.IAsyncResult that can be used to poll and/or wait for results; this value is also needed when invoking EndExecuteXXXX() methods.</returns>
        </member>
        <member name="M:Tdo.Common.Programmability.TdoStoredProcedureBase.BeginExecuteXmlReader(System.Data.SqlClient.SqlParameterCollection@)">
            <summary>
            Initiates the asynchronous execution of stored procedure described, and retrieves one or more result sets from the server.
            </summary>
            <param name="sqlOutputParameterCollection">SqlParameterCollection with output parameters.</param>
            <returns>An System.IAsyncResult that can be used to poll and/or wait for results; this value is also needed when invoking EndExecuteXXXX() methods.</returns>
        </member>
        <member name="P:Tdo.Common.Programmability.TdoStoredProcedureBase.TdoHelper">
            <summary>
            Get TdoHelper reference to share common resources
            </summary>
        </member>
        <member name="P:Tdo.Common.Programmability.TdoStoredProcedureBase.SchemaName">
            <summary>
            Stored Procedure Schema Name
            </summary>
        </member>
        <member name="P:Tdo.Common.Programmability.TdoStoredProcedureBase.Name">
            <summary>
            Stored Procedure Name
            </summary>
        </member>
        <member name="P:Tdo.Common.Programmability.TdoStoredProcedureBase.FullName">
            <summary>
            Get Full Name ([schema].[name])
            </summary>
        </member>
        <member name="E:Tdo.Common.Programmability.TdoStoredProcedureBase.StatementCompleted">
            <summary>
            Occurs after a command is executed against the data source. 
            </summary>
        </member>
        <member name="T:Tdo.Common.Entities.ITdoEntity">
            <summary>
            ITdoEntity Interface for all Table and View class type
            </summary>
        </member>
        <member name="P:Tdo.Common.Entities.ITdoEntity.CommandTimeOut">
            <summary>
            Get or Set SqlCommand time out (default is 60 seconds)
            </summary>
        </member>
        <member name="P:Tdo.Common.Entities.ITdoEntity.LastAffectedRecords">
            <summary>
            Always Keeps the last number of records involved in insert,update,delete and stored procedures operations.
            </summary>
        </member>
        <member name="P:Tdo.Common.Entities.ITdoEntity.SchemaName">
            <summary>
            Get or Set physical Schema Name
            </summary>
        </member>
        <member name="P:Tdo.Common.Entities.ITdoEntity.EntityName">
            <summary>
            Get or Set physical Entity name
            </summary>
        </member>
        <member name="P:Tdo.Common.Entities.ITdoEntity.FullEntityName">
            <summary>
            Get Full physical Entity name ([schema].[name])
            </summary>
        </member>
        <member name="P:Tdo.Common.Entities.ITdoEntity.TdoColumns">
            <summary>
            Get Columns Table Collection
            </summary>
        </member>
        <member name="P:Tdo.Common.Entities.ITdoEntity.TdoHelper">
            <summary>
            Get or Set TdoHelper reference to share common resources
            </summary>
        </member>
        <member name="E:Tdo.Common.Entities.ITdoEntity.FillError">
            <summary>
            Occurs during Fill operations with errors.
            </summary>
        </member>
        <member name="E:Tdo.Common.Entities.ITdoEntity.RowUpdated">
            <summary>
            Occurs during Update after a command is executed against the data source. The attempt to update is made, so the event fires. 
            </summary>
        </member>
        <member name="E:Tdo.Common.Entities.ITdoEntity.RowUpdating">
            <summary>
            Occurs during Update after a command is executed against the data source. The attempt to update is made, so the event fires. 
            </summary>
        </member>
        <member name="E:Tdo.Common.Entities.ITdoEntity.StatementCompleted">
            <summary>
            Occurs after a command is executed against the data source. 
            </summary>
        </member>
        <member name="T:Tdo.Common.Entities.Views.ITdoView">
            <summary>
            Interface for all Views
            </summary>
        </member>
        <member name="T:Tdo.Common.Entities.Tables.TdoTableBase">
            <summary>
            TdoTableBase class. It's the default class of all Tables
            </summary>
        </member>
        <member name="T:Tdo.Common.Entities.TdoEntityBase">
            <summary>
            Base class for all Tables and Views
            </summary>
        </member>
        <member name="F:Tdo.Common.Entities.TdoEntityBase.pCommandTimeOut">
            <summary>
            Get or Set SqlCommand time out (default is 60 seconds)
            </summary>
        </member>
        <member name="F:Tdo.Common.Entities.TdoEntityBase.pTdoHelper">
            <summary>
            Reference to TdoHelper.
            </summary>
        </member>
        <member name="F:Tdo.Common.Entities.TdoEntityBase.pTdoColumns">
            <summary>
            Returns Collection of Table Columns
            </summary>
        </member>
        <member name="F:Tdo.Common.Entities.TdoEntityBase.pSchemaName">
            <summary>
            Physical Entity Schema Name
            </summary>
        </member>
        <member name="F:Tdo.Common.Entities.TdoEntityBase.pEntityName">
            <summary>
            Physical Entity Name
            </summary>
        </member>
        <member name="F:Tdo.Common.Entities.TdoEntityBase.pSqlConnection">
            <summary>
            Reference to the SQL Connection of TDOHelper class
            </summary>
        </member>
        <member name="F:Tdo.Common.Entities.TdoEntityBase.pLastaffectedrecords">
            <summary>
            Always Keeps the last number of records involved in insert,update,delete and stored procedures operations.
            </summary>
        </member>
        <member name="F:Tdo.Common.Entities.TdoEntityBase.pTdoParameterCollection">
            <summary>
            Parameters collection  for parametric queries
            </summary>
        </member>
        <member name="M:Tdo.Common.Entities.TdoEntityBase.#ctor">
            <summary>
             TdoEntityBase Constructor
            </summary>
        </member>
        <member name="M:Tdo.Common.Entities.TdoEntityBase.SelectDataTable(System.String,System.Data.SqlClient.SqlDataAdapter@,System.Data.SqlClient.SqlTransaction,System.Boolean,Tdo.Common.TdoTypes.ITdoColumn[])">
            <summary>
            Creates a DataTable instance with the table records  searched before. 
            </summary>
            <param name="clauses">Tdo.Common.TdoSqlExpressionDom.Clause.[Where|OrderBy|GroupBy](TdoSqlExpression clause). Use overloaded language operators to generate TdoSqlExpression clause.</param>
            <param name="dataAdapter">DataAdapter to modify DataTable object</param> 
            <param name="transaction"> Current Transaction </param> 
            <param name="generateCommands">Boolean that indicates if is to generate Commands for Insert, Update e Delete of DataAdapter</param>
            <param name="fields">fields list (ITdoType or string) to select</param> 
            <returns>DataTable with the table records </returns>
        </member>
        <member name="M:Tdo.Common.Entities.TdoEntityBase.FillDataRow(System.Data.DataTable)">
            <summary>
            Create a DataRow with class properties actualValue, for only fields in destinationTable
            </summary>
            <param name="destinationTable">It is the entity from which derive row schema</param>
            <returns>Return a DataRow instance with class properties actualValue.</returns>
        </member>
        <member name="M:Tdo.Common.Entities.TdoEntityBase.Exists(System.String)">
            <summary>
            Verify if exists at least one record in Entity [Employees] 
            </summary>
            <param name="clauses">Tdo.Common.TdoSqlExpressionDom.Clause.[Where|OrderBy|GroupBy](TdoSqlExpression clause). Use overloaded language operators to generate TdoSqlExpression clause.</param>
            <returns>true if exists, else false.</returns>
        </member>
        <member name="M:Tdo.Common.Entities.TdoEntityBase.SelectDataReader(System.String,Tdo.Common.TdoTypes.ITdoColumn[])">
            <summary>
            Select one or more record(s) from Entity  using search criteria.
            </summary>
            <param name="clauses">Tdo.Common.TdoSqlExpressionDom.Clause.[Where|OrderBy|GroupBy](TdoSqlExpression clause). Use overloaded language operators to generate TdoSqlExpression clause.</param>
            <param name="fields">fields to select. Leave empty for 'Select *'</param>
            <returns>SqlDataReader for reading results.</returns>
        </member>
        <member name="M:Tdo.Common.Entities.TdoEntityBase.SelectDataReader(System.String,System.Data.CommandBehavior,Tdo.Common.TdoTypes.ITdoColumn[])">
            <summary>
            Select one or more record(s) from Entity  using search criteria.
            </summary>
            <param name="clauses">Tdo.Common.TdoSqlExpressionDom.Clause.[Where|OrderBy|GroupBy](TdoSqlExpression clause). Use overloaded language operators to generate TdoSqlExpression clause.</param>
            <param name="fields">fields to select. Leave empty for 'Select *'</param>
            <param name="commandBehavior">SqlDateReader CommandBehavior</param>
            <returns>SqlDataReader for reading results.</returns>
        </member>
        <member name="M:Tdo.Common.Entities.TdoEntityBase.BeginSelectDataReader(System.AsyncCallback,System.Object,System.Data.CommandBehavior,System.String,System.String)">
            <summary>
            Initiates the asynchronous execution of the Select statement using search criteria, and retrieves one or more result sets from the server.
            </summary>
            <param name="callBack">An System.AsyncCallback delegate that will be invoked when the command's execution has completed. Pass null (Nothing in Visual Basic) to indicate that no callBack is needed.</param>
            <param name="stateObject">A user-defined state object that will be passed to the callBack procedure. Retrieve this object from within the callBack procedure using the System.IAsyncResult.AsyncState property.</param>
            <param name="commandBehavior">One of the System.Data.CommandBehavior values, indicating options for statement execution and data retrieval.</param>
            <param name="clauses">Tdo.Common.TdoSqlExpressionDom.Clause.[Where|OrderBy|GroupBy](TdoSqlExpression clause). Use overloaded language operators to generate TdoSqlExpression clause.</param>
            <param name="fields">fields to select. Leave empty for 'Select *'</param>
            <returns>An System.IAsyncResult that can be used to poll and/or wait for results; this value is also needed when invoking EndSelectDataReader(), which returns a System.Data.SqlClient.SqlDataReader instance which can be used to retrieve the returned rows.</returns>
        </member>
        <member name="M:Tdo.Common.Entities.TdoEntityBase.BeginSelectDataReader(System.AsyncCallback,System.Object,System.Data.CommandBehavior,Tdo.Common.TdoTypes.ITdoColumn[])">
            <summary>
            Initiates the asynchronous execution of the Select statement using search criteria, and retrieves one or more result sets from the server.
            </summary>
            <param name="callBack">An System.AsyncCallback delegate that will be invoked when the command's execution has completed. Pass null (Nothing in Visual Basic) to indicate that no callBack is needed.</param>
            <param name="stateObject">A user-defined state object that will be passed to the callBack procedure. Retrieve this object from within the callBack procedure using the System.IAsyncResult.AsyncState property.</param>
            <param name="commandBehavior">SqlDateReader CommandBehavior</param>
            <param name="fields">fields to select. Leave empty for 'Select *'</param>
            <returns>An System.IAsyncResult that can be used to poll and/or wait for results; this value is also needed when invoking EndSelectDataReader(), which returns a System.Data.SqlClient.SqlDataReader instance which can be used to retrieve the returned rows.</returns>
        </member>
        <member name="M:Tdo.Common.Entities.TdoEntityBase.BeginSelectDataReader(System.Data.CommandBehavior,Tdo.Common.TdoTypes.ITdoColumn[])">
            <summary>
            Initiates the asynchronous execution of the Select statement using search criteria, and retrieves one or more result sets from the server.
            </summary>
            <param name="commandBehavior">SqlDateReader CommandBehavior</param>
            <param name="fields">fields to select. Leave empty for 'Select *'</param>
            <returns>An System.IAsyncResult that can be used to poll and/or wait for results; this value is also needed when invoking EndSelectDataReader(), which returns a System.Data.SqlClient.SqlDataReader instance which can be used to retrieve the returned rows.</returns>
        </member>
        <member name="M:Tdo.Common.Entities.TdoEntityBase.BeginSelectDataReader(Tdo.Common.TdoTypes.ITdoColumn[])">
            <summary>
            Initiates the asynchronous execution of the Select statement using search criteria, and retrieves one or more result sets from the server.
            </summary>
            <param name="fields">fields to select. Leave empty for 'Select *'</param>
            <returns>An System.IAsyncResult that can be used to poll and/or wait for results; this value is also needed when invoking EndSelectDataReader(), which returns a System.Data.SqlClient.SqlDataReader instance which can be used to retrieve the returned rows.</returns>
        </member>
        <member name="M:Tdo.Common.Entities.TdoEntityBase.BeginSelectDataReader(System.AsyncCallback,System.Object,Tdo.Common.TdoTypes.ITdoColumn[])">
            <summary>
            Initiates the asynchronous execution of the Select statement using search criteria, and retrieves one or more result sets from the server.
            </summary>
            <param name="callBack">An System.AsyncCallback delegate that will be invoked when the command's execution has completed. Pass null (Nothing in Visual Basic) to indicate that no callBack is needed.</param>
            <param name="stateObject">A user-defined state object that will be passed to the callBack procedure. Retrieve this object from within the callBack procedure using the System.IAsyncResult.AsyncState property.</param>
            <param name="fields">fields to select. Leave empty for 'Select *'</param>
            <returns>An System.IAsyncResult that can be used to poll and/or wait for results; this value is also needed when invoking EndSelectDataReader(), which returns a System.Data.SqlClient.SqlDataReader instance which can be used to retrieve the returned rows.</returns>
        </member>
        <member name="M:Tdo.Common.Entities.TdoEntityBase.BeginSelectDataReader(System.Data.CommandBehavior,System.String,Tdo.Common.TdoTypes.ITdoColumn[])">
            <summary>
            Initiates the asynchronous execution of the Select statement using search criteria, and retrieves one or more result sets from the server.
            </summary>
            <param name="commandBehavior">SqlDateReader CommandBehavior</param>
            <param name="clauses">Tdo.Common.TdoSqlExpressionDom.Clause.[Where|OrderBy|GroupBy](TdoSqlExpression clause). Use overloaded language operators to generate TdoSqlExpression clause.</param>
            <param name="fields">fields to select. Leave empty for 'Select *'</param>
            <returns>An System.IAsyncResult that can be used to poll and/or wait for results; this value is also needed when invoking EndSelectDataReader(), which returns a System.Data.SqlClient.SqlDataReader instance which can be used to retrieve the returned rows.</returns>
        </member>
        <member name="M:Tdo.Common.Entities.TdoEntityBase.BeginSelectDataReader(System.AsyncCallback,System.Object,System.Data.CommandBehavior,System.String,Tdo.Common.TdoTypes.ITdoColumn[])">
            <summary>
            Initiates the asynchronous execution of the Select statement using search criteria, and retrieves one or more result sets from the server.
            </summary>
            <param name="callBack">An System.AsyncCallback delegate that will be invoked when the command's execution has completed. Pass null (Nothing in Visual Basic) to indicate that no callBack is needed.</param>
            <param name="stateObject">A user-defined state object that will be passed to the callBack procedure. Retrieve this object from within the callBack procedure using the System.IAsyncResult.AsyncState property.</param>
            <param name="commandBehavior">SqlDateReader CommandBehavior</param>
            <param name="clauses">Tdo.Common.TdoSqlExpressionDom.Clause.[Where|OrderBy|GroupBy](TdoSqlExpression clause). Use overloaded language operators to generate TdoSqlExpression clause.</param>
            <param name="fields">fields to select. Leave empty for 'Select *'</param>
            <returns>An System.IAsyncResult that can be used to poll and/or wait for results; this value is also needed when invoking EndSelectDataReader(), which returns a System.Data.SqlClient.SqlDataReader instance which can be used to retrieve the returned rows.</returns>
        </member>
        <member name="M:Tdo.Common.Entities.TdoEntityBase.BeginSelectDataReader(System.String,Tdo.Common.TdoTypes.ITdoColumn[])">
            <summary>
            Initiates the asynchronous execution of the Select statement using search criteria, and retrieves one or more result sets from the server.
            </summary>
            <param name="clauses">Tdo.Common.TdoSqlExpressionDom.Clause.[Where|OrderBy|GroupBy](TdoSqlExpression clause). Use overloaded language operators to generate TdoSqlExpression clause.</param>
            <param name="fields">fields to select. Leave empty for 'Select *'</param>
            <returns>An System.IAsyncResult that can be used to poll and/or wait for results; this value is also needed when invoking EndSelectDataReader(), which returns a System.Data.SqlClient.SqlDataReader instance which can be used to retrieve the returned rows.</returns>
        </member>
        <member name="M:Tdo.Common.Entities.TdoEntityBase.BeginSelectDataReader(System.AsyncCallback,System.Object,System.String,Tdo.Common.TdoTypes.ITdoColumn[])">
            <summary>
            Initiates the asynchronous execution of the Select statement using search criteria, and retrieves one or more result sets from the server.
            </summary>
            <param name="callBack">An System.AsyncCallback delegate that will be invoked when the command's execution has completed. Pass null (Nothing in Visual Basic) to indicate that no callBack is needed.</param>
            <param name="stateObject">A user-defined state object that will be passed to the callBack procedure. Retrieve this object from within the callBack procedure using the System.IAsyncResult.AsyncState property.</param>
            <param name="clauses">Tdo.Common.TdoSqlExpressionDom.Clause.[Where|OrderBy|GroupBy](TdoSqlExpression clause). Use overloaded language operators to generate TdoSqlExpression clause.</param>
            <param name="fields">fields to select. Leave empty for 'Select *'</param>
            <returns>An System.IAsyncResult that can be used to poll and/or wait for results; this value is also needed when invoking EndSelectDataReader(), which returns a System.Data.SqlClient.SqlDataReader instance which can be used to retrieve the returned rows.</returns>
        </member>
        <member name="M:Tdo.Common.Entities.TdoEntityBase.EndSelectDataReader(System.IAsyncResult)">
            <summary>
            Finishes asynchronous execution of a Select statement, returning the requested System.Data.SqlClient.SqlDataReader.
            </summary>
            <param name="asyncResult">The System.IAsyncResult returned by the call to BeginSelectDataReader.</param>
            <returns>A System.Data.SqlClient.SqlDataReader object that can be used to retrieve the requested rows.</returns>
        </member>
        <member name="M:Tdo.Common.Entities.TdoEntityBase.EndSelectXmlReader(System.IAsyncResult)">
            <summary>
            Finishes asynchronous execution of a Select FOR XML statement, returning the requested System.Xml.XmlReader
            </summary>
            <param name="asyncResult">The System.IAsyncResult returned by the call to BeginSelectXmlReader.</param>
            <returns>A System.Xml.XmlReader object that can be used to retrieve the requested rows.</returns>
        </member>
        <member name="M:Tdo.Common.Entities.TdoEntityBase.SelectScalar(Tdo.Common.TdoTypes.ITdoColumn[])">
            <summary>
            Executes the query, and returns the first column of the first row in the resultset returned by the query. Extra columns or rows are ignored.
            </summary>
            <param name="fields">fields to select. Leave empty for 'Select *'</param>
            <returns>The first column of the first row in the resultset.</returns>
        </member>
        <member name="M:Tdo.Common.Entities.TdoEntityBase.SelectScalar(System.String,Tdo.Common.TdoTypes.ITdoColumn[])">
            <summary>
            Executes the query, and returns the first column of the first row in the resultset returned by the query. Extra columns or rows are ignored.
            </summary>
            <param name="clauses">Tdo.Common.TdoSqlExpressionDom.Clause.[Where|OrderBy|GroupBy](TdoSqlExpression clause). Use overloaded language operators to generate TdoSqlExpression clause.</param>
            <param name="fields">fields to select. Leave empty for 'Select *'</param>
            <returns>The first column of the first row in the resultset.</returns>
        </member>
        <member name="M:Tdo.Common.Entities.TdoEntityBase.SelectDataReader(System.String,System.String,System.Data.CommandBehavior)">
            <summary>
            Select one or more record(s) from current Entity using search criteria.
            </summary>
            <param name="clauses">Tdo.Common.TdoSqlExpressionDom.Clause.[Where|OrderBy|GroupBy](TdoSqlExpression clause). Use overloaded language operators to generate TdoSqlExpression clause.</param>
            <param name="fields">fields to select.</param>
            <param name="commandBehavior">SqlDateReader CommandBehavior</param>
            <returns>SqlDataReader for reading results.</returns>
        </member>
        <member name="M:Tdo.Common.Entities.TdoEntityBase.SelectDataReader(Tdo.Common.TdoTypes.ITdoColumn[])">
            <summary>
            Select one or more record(s) from current Entity using search criteria.
            </summary>
            <param name="fields">fields to select. Leave empty for 'Select *'</param>
            <returns>SqlDataReader for reading results.</returns>
        </member>
        <member name="M:Tdo.Common.Entities.TdoEntityBase.SelectDataReader(System.Data.CommandBehavior,Tdo.Common.TdoTypes.ITdoColumn[])">
            <summary>
            Select one or more record(s) from current Entity using search criteria with specified CommandBehaviour.
            </summary>
            <param name="fields">fields to select. Leave empty for 'Select *'</param>
            <param name="commandBehavior">SqlDateReader CommandBehavior</param>
            <returns>SqlDataReader for reading results.</returns>
        </member>
        <member name="M:Tdo.Common.Entities.TdoEntityBase.SelectDataTable(System.Data.SqlClient.SqlDataAdapter@,Tdo.Common.TdoTypes.ITdoColumn[])">
            <summary>
            Return an instance of DataTable class using search criteria.
            </summary>
            <param name="dataAdapter">SqlDataAdapter for dataset operations.</param>
            <param name="fields">fields to select. Leave empty for 'Select *'</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Tdo.Common.Entities.TdoEntityBase.SelectDataTable(Tdo.Common.TdoTypes.ITdoColumn[])">
            <summary>
            Create an instance of DataTable class using search criteria.
            </summary>
            <param name="fields">fields to select. Leave empty for 'Select *'</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Tdo.Common.Entities.TdoEntityBase.SelectDataTable(System.String,System.Data.SqlClient.SqlDataAdapter@,Tdo.Common.TdoTypes.ITdoColumn[])">
            <summary>
            Create an instance of DataTable classusing search criteria.
            </summary>
            <param name="clauses">Tdo.Common.TdoSqlExpressionDom.Clause.[Where|OrderBy|GroupBy](TdoSqlExpression clause). Use overloaded language operators to generate TdoSqlExpression clause.</param>
            <param name="dataAdapter">SqlDataAdapter for dataset operations.</param>
            <param name="fields">fields to select. Leave empty for 'Select *'</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Tdo.Common.Entities.TdoEntityBase.SelectDataTable(System.String,Tdo.Common.TdoTypes.ITdoColumn[])">
            <summary>
            Create an instance of DataTable class using search criteria.
            </summary>
            <param name="clauses">Tdo.Common.TdoSqlExpressionDom.Clause.[Where|OrderBy|GroupBy](TdoSqlExpression clause). Use overloaded language operators to generate TdoSqlExpression clause.</param>
            <param name="fields">fields to select. Leave empty for 'Select *'</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Tdo.Common.Entities.TdoEntityBase.SelectFirstRow(System.String)">
            <summary>
            Execute a Select 'Top 1' on Table and assign results only for first returned record.
            </summary>
            <param name="clauses">Tdo.Common.TdoSqlExpressionDom.Clause.[Where|OrderBy|GroupBy](TdoSqlExpression clause). Use overloaded language operators to generate TdoSqlExpression clause.</param>
            <returns>true record exists, else false.</returns>
        </member>
        <member name="M:Tdo.Common.Entities.TdoEntityBase.SelectIdentity(System.String)">
            <summary>
            Select Identity field if exists using search criteria. Return identity actualValue.
            </summary>
            <param name="clauses">Tdo.Common.TdoSqlExpressionDom.Clause.[Where|OrderBy|GroupBy](TdoSqlExpression clause). Use overloaded language operators to generate TdoSqlExpression clause.</param>
            <returns>identity actualValue</returns>
        </member>
        <member name="M:Tdo.Common.Entities.TdoEntityBase.SelectXmlReader(System.String,System.String,Tdo.Common.TdoTypes.ITdoColumn[])">
            <summary>
            Select one or more record(s) from Table using search criteria and return XML.
            </summary>
            <param name="clauses">Tdo.Common.TdoSqlExpressionDom.Clause.[Where|OrderBy|GroupBy](TdoSqlExpression clause). Use overloaded language operators to generate TdoSqlExpression clause.</param>
            <param name="forXmlClause">Clause FOR XML (Auto or AutoElements)</param>
            <param name="fields">fields to select. Leave empty for 'Select *'</param>
            <returns>XmlDataReader for reading results in XML Format.</returns>
        </member>
        <member name="M:Tdo.Common.Entities.TdoEntityBase.BeginSelectXmlReader(System.AsyncCallback,System.Object,System.String,System.String,Tdo.Common.TdoTypes.ITdoColumn[])">
            <summary>
            Select one or more record(s) from Table using search criteria and return XML.
            </summary>
            <param name="callBack">An System.AsyncCallback delegate that will be invoked when the command's execution has completed. Pass null (Nothing in Visual Basic) to indicate that no callBack is needed.</param>
            <param name="stateObject">A user-defined state object that will be passed to the callBack procedure. Retrieve this object from within the callBack procedure using the System.IAsyncResult.AsyncState property.</param>
            <param name="clauses">Tdo.Common.TdoSqlExpressionDom.Clause.[Where|OrderBy|GroupBy](TdoSqlExpression clause). Use overloaded language operators to generate TdoSqlExpression clause.</param>
            <param name="forXmlClause">Clause FOR XML (Auto or AutoElements)</param>
            <param name="fields">fields to select. Leave empty for 'Select *'</param>
            <returns>An System.IAsyncResult that can be used to poll and/or wait for results; this value is also needed when invoking EndSelectDataReader(), which returns a System.Xml.XmlReader instance which can be used to retrieve the returned rows.</returns>
        </member>
        <member name="M:Tdo.Common.Entities.TdoEntityBase.BeginSelectXmlReader(System.AsyncCallback,System.Object,System.String,Tdo.Common.TdoTypes.ITdoColumn[])">
            <summary>
            Initiates the asynchronous execution of the Select FOR XML statement using search criteria, and retrieves one result set from the server.
            </summary>
            <param name="callBack">An System.AsyncCallback delegate that will be invoked when the command's execution has completed. Pass null (Nothing in Visual Basic) to indicate that no callBack is needed.</param>
            <param name="stateObject">A user-defined state object that will be passed to the callBack procedure. Retrieve this object from within the callBack procedure using the System.IAsyncResult.AsyncState property.</param>
            <param name="forXmlClause">Clause FOR XML</param>
            <param name="fields">fields to select. Leave empty for 'Select *'</param>
            <returns>An System.IAsyncResult that can be used to poll and/or wait for results; this value is also needed when invoking EndSelectDataReader(), which returns a System.Xml.XmlReader instance which can be used to retrieve the returned rows.</returns>
        </member>
        <member name="M:Tdo.Common.Entities.TdoEntityBase.BeginSelectXmlReader(System.AsyncCallback,System.Object,System.String,System.String,System.String)">
            <summary>
            Initiates the asynchronous execution of the Select FOR XML statement using search criteria, and retrieves one result set from the server.
            </summary>
            <param name="callBack">An System.AsyncCallback delegate that will be invoked when the command's execution has completed. Pass null (Nothing in Visual Basic) to indicate that no callBack is needed.</param>
            <param name="stateObject">A user-defined state object that will be passed to the callBack procedure. Retrieve this object from within the callBack procedure using the System.IAsyncResult.AsyncState property.</param>
            <param name="clauses">Tdo.Common.TdoSqlExpressionDom.Clause.[Where|OrderBy|GroupBy](TdoSqlExpression clause). Use overloaded language operators to generate TdoSqlExpression clause.</param>
            <param name="forXmlClause">Clause FOR XML</param>
            <param name="fields">fields to select. Leave empty for 'Select *'</param>
            <returns>An System.IAsyncResult that can be used to poll and/or wait for results; this value is also needed when invoking EndSelectDataReader(), which returns a System.Xml.XmlReader instance which can be used to retrieve the returned rows.</returns>
        </member>
        <member name="M:Tdo.Common.Entities.TdoEntityBase.SelectXmlReader(System.String,System.String,System.String)">
            <summary>
            Select one or more record(s) from Table using search criteria and return XML.
            </summary>
            <param name="clauses">Tdo.Common.TdoSqlExpressionDom.Clause.[Where|OrderBy|GroupBy](TdoSqlExpression clause). Use overloaded language operators to generate TdoSqlExpression clause.</param>
            <param name="forXmlClause">Clause FOR XML</param>
            <param name="fields">fields to select. Leave empty for 'Select *'</param>
            <returns>XmlDataReader for reading results in XML Format.</returns>
        </member>
        <member name="M:Tdo.Common.Entities.TdoEntityBase.SelectXmlReader(System.String,Tdo.Common.TdoTypes.ITdoColumn[])">
            <summary>
            Select one or more record(s) from Table using search criteria and return XML.
            </summary>
            <param name="forXmlClause">Clause FOR XML</param>
            <param name="fields">fields to select. Leave empty for 'Select *'</param>
            <returns>XmlDataReader for reading results in XML Format.</returns>
        </member>
        <member name="M:Tdo.Common.Entities.TdoEntityBase.FullSelectEntityName">
            <summary>
            Returns full entity name.
            </summary>
            <returns>string with full entity name.</returns>
        </member>
        <member name="M:Tdo.Common.Entities.TdoEntityBase.Dispose">
            <summary>
            TdoTableBase class destructor
            </summary>
        </member>
        <member name="P:Tdo.Common.Entities.TdoEntityBase.CommandTimeOut">
            <summary>
            Get or Set SqlCommand time out (default is 60 seconds)
            </summary>
        </member>
        <member name="P:Tdo.Common.Entities.TdoEntityBase.TdoHelper">
            <summary>
            Get or Set TdoHelper reference to share common resources
            </summary>
            <remarks>this property must be assigned before you can use methods and/or entity properties.</remarks>
        </member>
        <member name="P:Tdo.Common.Entities.TdoEntityBase.TdoParameterCollection">
            <summary>
            Returns or sets the parameters collection to use in parametric queries
            </summary>
        </member>
        <member name="P:Tdo.Common.Entities.TdoEntityBase.SchemaName">
            <summary>
            Get or Set Schema Name
            </summary>
        </member>
        <member name="P:Tdo.Common.Entities.TdoEntityBase.EntityName">
            <summary>
            Get or Set entity name
            </summary>
        </member>
        <member name="P:Tdo.Common.Entities.TdoEntityBase.FullEntityName">
            <summary>
            Get Full entity name ([schema].[entity])
            </summary>
        </member>
        <member name="P:Tdo.Common.Entities.TdoEntityBase.LastAffectedRecords">
            <summary>
            Always Keeps the last number of records involved in insert,update,delete and stored procedures operations.
            </summary>
        </member>
        <member name="P:Tdo.Common.Entities.TdoEntityBase.TdoColumns">
            <summary>
            Get Columns Table Collection
            </summary>
        </member>
        <member name="E:Tdo.Common.Entities.TdoEntityBase.FillError">
            <summary>
            Occurs during Fill operations with errors.
            </summary>
        </member>
        <member name="E:Tdo.Common.Entities.TdoEntityBase.RowUpdated">
            <summary>
            Occurs during Update after a command is executed against the data source. The attempt to update is made, so the event fires. 
            </summary>
        </member>
        <member name="E:Tdo.Common.Entities.TdoEntityBase.RowUpdating">
            <summary>
            Occurs during Update after a command is executed against the data source. The attempt to update is made, so the event fires. 
            </summary>
        </member>
        <member name="E:Tdo.Common.Entities.TdoEntityBase.StatementCompleted">
            <summary>
            Occurs after a command is executed against the data source. 
            </summary>
        </member>
        <member name="E:Tdo.Common.Entities.TdoEntityBase.Disposed">
            <summary>
            Disposed event.
            </summary>
        </member>
        <member name="P:Tdo.Common.Entities.TdoEntityBase.Site">
            <summary>
            Gets or sets the <see cref="T:System.ComponentModel.ISite"></see> associated with the <see cref="T:System.ComponentModel.IComponent"></see>.
            </summary>
            <value></value>
            <returns>The <see cref="T:System.ComponentModel.ISite"></see> object associated with the component; or null, if the component does not have a site.</returns>
        </member>
        <member name="T:Tdo.Common.Entities.Tables.ITdoTable">
            <summary>
            Interface for all Tables
            </summary>
        </member>
        <member name="M:Tdo.Common.Entities.Tables.ITdoTable.BeginEdit">
            <summary>
            Allow editing of fields values. Invoke BeginEdit(), before editing properties actualValue.
            </summary>
        </member>
        <member name="M:Tdo.Common.Entities.Tables.ITdoTable.EndEdit">
            <summary>
            Ends editing of fields values. Invoke EndEdit(), after editing of properties actualValue.
            </summary>
        </member>
        <member name="M:Tdo.Common.Entities.Tables.ITdoTable.CancelEdit">
            <summary>
            Rollback properties actualValue to original values. Invoke EndEdit(), after editing of properties actualValue.
            </summary>
        </member>
        <member name="P:Tdo.Common.Entities.Tables.ITdoTable.LastIdentity">
            <summary>
            Always Keeps the last number of records involved in insert,update,delete and stored procedures operations.
            </summary>
        </member>
        <member name="F:Tdo.Common.Entities.Tables.TdoTableBase.pLastIdentity">
            <summary>
            Identity actualValue for last inserted record in this table.
            </summary>
        </member>
        <member name="M:Tdo.Common.Entities.Tables.TdoTableBase.#ctor">
            <summary>
            TdoTableBase Default Constructor
            </summary>
        </member>
        <member name="M:Tdo.Common.Entities.Tables.TdoTableBase.BeginEdit">
            <summary>
            Allow editing of fields values. Invoke BeginEdit(), before editing properties actualValue.
            </summary>
        </member>
        <member name="M:Tdo.Common.Entities.Tables.TdoTableBase.EndEdit">
            <summary>
            Ends editing of fields values. Invoke EndEdit(), after editing of properties actualValue.
            </summary>
        </member>
        <member name="M:Tdo.Common.Entities.Tables.TdoTableBase.CancelEdit">
            <summary>
            Rollback properties actualValue to original values. Invoke EndEdit(), after editing of properties actualValue.
            </summary>
        </member>
        <member name="M:Tdo.Common.Entities.Tables.TdoTableBase.LoadFromDataReader(System.Data.SqlClient.SqlDataReader)">
            <summary>
            Load class properties with SqlDataReader values.
            </summary>
            <param name="dataReader">An SqlDataReader from wich read values (dataReader must have same Table Schema).</param>
        </member>
        <member name="M:Tdo.Common.Entities.Tables.TdoTableBase.LoadFromDataRow(System.Data.DataRow)">
            <summary>
            Load class properties with values of DataRow.
            </summary>
            <param name="dataRow">A DataRow with the same Table Schema.</param>
        </member>
        <member name="M:Tdo.Common.Entities.Tables.TdoTableBase.BeginDelete(System.String)">
            <summary>
            Delete Asynchronously Record(s) from Table using specified delete clauses and return affected records.
            </summary>
            <param name="clauses">Tdo.Common.TdoSqlExpressionDom.Clause.[Where|OrderBy|GroupBy](TdoSqlExpression clause). Use overloaded language operators to generate TdoSqlExpression update clause.</param>
            <returns>An System.IAsyncResult that can be used to poll and/or wait for results; this value is also needed when invoking EndDelete(), which returns affected records.</returns>
            <exception cref="T:System.Data.SqlClient.SqlException">Any error that occurred while executing the command text.</exception>
            <exception cref="T:System.InvalidOperationException">The name/value pair "Asynchronous Processing=true" was not included within the connection string defining the connection for this System.Data.SqlClient.SqlCommand.</exception>
        </member>
        <member name="M:Tdo.Common.Entities.Tables.TdoTableBase.BeginDelete(System.AsyncCallback,System.Object,System.String)">
            <summary>
            Delete Asynchronously Record(s) from Table using specified delete clauses and return affected records.
            </summary>
            <param name="callBack">An System.AsyncCallback delegate that will be invoked when the command's execution has completed. Pass null (Nothing in Visual Basic) to indicate that no callBack is needed.</param>
            <param name="stateObject">A user-defined state object that will be passed to the callBack procedure. Retrieve this object from within the callBack procedure using the System.IAsyncResult.AsyncState property.</param>
            <param name="clauses">Tdo.Common.TdoSqlExpressionDom.Clause.[Where|OrderBy|GroupBy](TdoSqlExpression clause). Use overloaded language operators to generate TdoSqlExpression update clause.</param>
            <returns>An System.IAsyncResult that can be used to poll and/or wait for results; this value is also needed when invoking EndDelete(), which returns affected records.</returns>
            <exception cref="T:System.Data.SqlClient.SqlException">Any error that occurred while executing the command text.</exception>
            <exception cref="T:System.InvalidOperationException">The name/value pair "Asynchronous Processing=true" was not included within the connection string defining the connection for this System.Data.SqlClient.SqlCommand.</exception>
        </member>
        <member name="M:Tdo.Common.Entities.Tables.TdoTableBase.Delete(System.String)">
            <summary>
            Delete one or more record(s) of Table Employees using passed clauses
            </summary>
            <param name="clauses">use Clause.Where(TdoSqlExpression) to specifiy records to delete or String.Empty to delete all records.</param>
            <returns>last affected records</returns>
            <exception cref="T:System.Data.SqlClient.SqlException">An exception occurred while executing the command against a locked row. This exception is not generated when using Microsoft .NET Framework version 1.0. </exception>
        </member>
        <member name="M:Tdo.Common.Entities.Tables.TdoTableBase.BeginInsert">
            <summary>
            Insert Asynchronously a Record into Table assigning parameters actualValue to properties actualValue and return affected records
            </summary>
            <returns>An System.IAsyncResult that can be used to poll and/or wait for results; this value is also needed when invoking EndSelectDataReader(), which returns affected records.</returns>
            <exception cref="T:System.Data.SqlClient.SqlException">Any error that occurred while executing the command text.</exception>
            <exception cref="T:System.InvalidOperationException">The name/value pair "Asynchronous Processing=true" was not included within the connection string defining the connection for this System.Data.SqlClient.SqlCommand.</exception>
        </member>
        <member name="M:Tdo.Common.Entities.Tables.TdoTableBase.BeginInsert(System.AsyncCallback,System.Object)">
            <summary>
            Insert Asynchronously a Record into Table assigning parameters actualValue to properties actualValue and return affected records
            </summary>
            <param name="callBack">An System.AsyncCallback delegate that will be invoked when the command's execution has completed. Pass null (Nothing in Visual Basic) to indicate that no callBack is needed.</param>
            <param name="stateObject">A user-defined state object that will be passed to the callBack procedure. Retrieve this object from within the callBack procedure using the System.IAsyncResult.AsyncState property.</param>
            <returns>An System.IAsyncResult that can be used to poll and/or wait for results; this value is also needed when invoking EndSelectDataReader(), which returns affected records.</returns>
            <exception cref="T:System.Data.SqlClient.SqlException">Any error that occurred while executing the command text.</exception>
            <exception cref="T:System.InvalidOperationException">The name/value pair "Asynchronous Processing=true" was not included within the connection string defining the connection for this System.Data.SqlClient.SqlCommand.</exception>
        </member>
        <member name="M:Tdo.Common.Entities.Tables.TdoTableBase.EndDelete(System.IAsyncResult)">
            <summary>
            Finishes asynchronous execution of Delete statement, returning affected records.
            </summary>
            <param name="asyncResult">The System.IAsyncResult returned by the call to BeginDelete.</param>
            <returns>System.Int32 affected records.</returns>
            <exception cref="T:System.Data.SqlClient.SqlException">Any error that occurred while executing the command text.</exception>
            <exception cref="T:System.InvalidOperationException">The name/value pair "Asynchronous Processing=true" was not included within the connection string defining the connection for this System.Data.SqlClient.SqlCommand.</exception>
        </member>
        <member name="M:Tdo.Common.Entities.Tables.TdoTableBase.EndUpdate(System.IAsyncResult)">
            <summary>
            Finishes asynchronous execution of Update statement, returning affected records.
            </summary>
            <param name="asyncResult">The System.IAsyncResult returned by the call to BeginUpdate.</param>
            <returns>System.Int32 affected records.</returns>
            <exception cref="T:System.Data.SqlClient.SqlException">Any error that occurred while executing the command text.</exception>
            <exception cref="T:System.InvalidOperationException">The name/value pair "Asynchronous Processing=true" was not included within the connection string defining the connection for this System.Data.SqlClient.SqlCommand.</exception>
        </member>
        <member name="M:Tdo.Common.Entities.Tables.TdoTableBase.EndInsert(System.IAsyncResult)">
            <summary>
            Finishes asynchronous execution of Insert statement, returning affected records.
            </summary>
            <param name="asyncResult">The System.IAsyncResult returned by the call to BeginInsert.</param>
            <returns>System.Int32 affected records.</returns>
            <exception cref="T:System.Data.SqlClient.SqlException">Any error that occurred while executing the command text.</exception>
            <exception cref="T:System.InvalidOperationException">The name/value pair "Asynchronous Processing=true" was not included within the connection string defining the connection for this System.Data.SqlClient.SqlCommand.</exception>
        </member>
        <member name="M:Tdo.Common.Entities.Tables.TdoTableBase.Insert">
            <summary>
            Insert a Record into Table assigning parameters actualValue to properties actualValue and return affected records
            </summary>
            <returns>last affected records</returns>
            <exception cref="T:System.Data.SqlClient.SqlException">Any error that occurred while executing the command text.</exception>
            <exception cref="T:System.InvalidOperationException">The name/value pair "Asynchronous Processing=true" was not included within the connection string defining the connection for this System.Data.SqlClient.SqlCommand.</exception>
            <exception cref="T:System.InvalidOperationException">Unsupported Sql Server version for SQL Server minor than 7.</exception>
        </member>
        <member name="M:Tdo.Common.Entities.Tables.TdoTableBase.BeginUpdate(System.String)">
            <summary>
            Update Asynchronously a Record into Table assigning parameters actualValue to properties actualValue and return affected records
            </summary>
            <param name="clauses">Tdo.Common.TdoSqlExpressionDom.Clause.[Where|OrderBy|GroupBy](TdoSqlExpression clause). Use overloaded language operators to generate TdoSqlExpression update clause.</param>
            <returns>An System.IAsyncResult that can be used to poll and/or wait for results; this value is also needed when invoking EndSelectDataReader(), which returns affected records.</returns>
            <exception cref="T:System.Data.SqlClient.SqlException">Any error that occurred while executing the command text.</exception>
            <exception cref="T:System.InvalidOperationException">The name/value pair "Asynchronous Processing=true" was not included within the connection string defining the connection for this System.Data.SqlClient.SqlCommand.</exception>
        </member>
        <member name="M:Tdo.Common.Entities.Tables.TdoTableBase.BeginUpdate(System.AsyncCallback,System.Object,System.String)">
            <summary>
            Update Asynchronously a Record into Table assigning parameters actualValue to properties actualValue and return affected records
            </summary>
            <param name="callBack">An System.AsyncCallback delegate that will be invoked when the command's execution has completed. Pass null (Nothing in Visual Basic) to indicate that no callBack is needed.</param>
            <param name="stateObject">A user-defined state object that will be passed to the callBack procedure. Retrieve this object from within the callBack procedure using the System.IAsyncResult.AsyncState property.</param>
            <param name="clauses">Tdo.Common.TdoSqlExpressionDom.Clause.[Where|OrderBy|GroupBy](TdoSqlExpression clause). Use overloaded language operators to generate TdoSqlExpression update clause.</param>
            <returns>An System.IAsyncResult that can be used to poll and/or wait for results; this value is also needed when invoking EndSelectDataReader(), which returns affected records.</returns>
            <exception cref="T:System.Data.SqlClient.SqlException">Any error that occurred while executing the command text.</exception>
            <exception cref="T:System.InvalidOperationException">The name/value pair "Asynchronous Processing=true" was not included within the connection string defining the connection for this System.Data.SqlClient.SqlCommand.</exception>
        </member>
        <member name="M:Tdo.Common.Entities.Tables.TdoTableBase.Update(System.String)">
            <summary>
            Update one or more Table Record(s) and return affected records
            </summary>
            <param name="clauses">Tdo.Common.TdoSqlExpressionDom.Clause.[Where|OrderBy|GroupBy](TdoSqlExpression clause). Use overloaded language operators to generate TdoSqlExpression update clause.</param>
            <returns>last affected records</returns>
        </member>
        <member name="P:Tdo.Common.Entities.Tables.TdoTableBase.LastIdentity">
            <summary>
            Identity actualValue for last inserted record in this table.
            </summary>
        </member>
        <member name="T:Tdo.Common.TdoTypes.TdoGuid">
            <summary>
            TdoGuid class. Allows to keep SqlGuid (uniqueidentifier) actualValue type
            </summary>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoGuid.#ctor">
            <summary>
            Default constructor for TdoGuid Class
            </summary>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoGuid.#ctor(System.Data.SqlTypes.SqlGuid,System.String)">
            <summary>
            Constructor for TdoGuid Class.
            </summary>
            <param name="value">Column constant value</param>
            <param name="columnAlias">Alias column.</param>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoGuid.#ctor(System.Boolean,System.Boolean,System.Int64,System.Int64,System.String,System.String,System.Int32,System.Boolean,System.Boolean,Tdo.Common.Entities.ITdoEntity)">
            <summary>
            Constructor for TdoGuid class
            </summary>
            <param name="allowDBNull">Boolean that indicates wether the field can be NULL</param>
            <param name="autoIncrement">Boolean that indicates if the field is IDENTITY (auto-increase)</param>
            <param name="autoIncrementSeed">Long that indicates how much is increasing the IDENTITY field</param>
            <param name="autoIncrementStep">Long that indicates the start actualValue of the IDENTITY field </param>
            <param name="caption">String that indicates the heading/columnAlias of the field</param>
            <param name="columnName">String that indicates the name of the column (field)</param>
            <param name="maxLength">Integer that indicates the maximum length of the field (-1,field without limit)</param>
            <param name="readOnly">Boolean that indicates if the field is only reading</param>
            <param name="unique">Boolean that indicates if a unique constraint exists on that field</param>
            <param name="tdoEntity">TdoEntity referenced to the class that contains the field</param>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoGuid.Equals(System.Object)">
            <summary>
            Comparison operator Equals
            </summary>
            <param name="obj">Object to compare</param>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoGuid.GetHashCode">
            <summary>
            Returns Hash code
            </summary>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoGuid.ClonedValue(System.Data.SqlTypes.SqlGuid)">
            <summary>
            Return a copy of SqlGuid structure
            </summary>
            <param name="toClone">SqlGuid to copy</param>
            <returns>SqlGuid structure copied</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoGuid.Clone">
            <summary>
            Creates a copy of this TdoGuid object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoGuid.ToString">
            <summary>
            Returns the string representation of the content of the field
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoGuid.op_Equality(Tdo.Common.TdoTypes.TdoGuid,System.Guid)">
            <summary>
            Comparison operator Equals
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoGuid.op_Equality(Tdo.Common.TdoTypes.TdoGuid,Tdo.Common.TdoTypes.ITdoColumn)">
            <summary>
            Comparison operator Equals
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoGuid.op_Equality(Tdo.Common.TdoTypes.TdoGuid,System.DBNull)">
            <summary>
            Comparison operator is (null)
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoGuid.op_GreaterThan(Tdo.Common.TdoTypes.TdoGuid,System.Guid)">
            <summary>
            Comparison operator Greater
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoGuid.op_GreaterThan(Tdo.Common.TdoTypes.TdoGuid,Tdo.Common.TdoTypes.ITdoColumn)">
            <summary>
            Comparison operator Greater
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoGuid.op_GreaterThanOrEqual(Tdo.Common.TdoTypes.TdoGuid,System.Guid)">
            <summary>
            Comparison operator Greater or Equal
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoGuid.op_GreaterThanOrEqual(Tdo.Common.TdoTypes.TdoGuid,Tdo.Common.TdoTypes.ITdoColumn)">
            <summary>
            Comparison operator Greater or Equal
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoGuid.op_LessThan(Tdo.Common.TdoTypes.TdoGuid,System.Guid)">
            <summary>
            Comparison operator Lower
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoGuid.op_LessThan(Tdo.Common.TdoTypes.TdoGuid,Tdo.Common.TdoTypes.ITdoColumn)">
            <summary>
            Comparison operator Lower
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoGuid.op_LessThanOrEqual(Tdo.Common.TdoTypes.TdoGuid,System.Guid)">
            <summary>
            Comparison operator Lower or Equal
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoGuid.op_LessThanOrEqual(Tdo.Common.TdoTypes.TdoGuid,Tdo.Common.TdoTypes.ITdoColumn)">
            <summary>
            Comparison operator Lower or Equal
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoGuid.op_Inequality(Tdo.Common.TdoTypes.TdoGuid,Tdo.Common.TdoTypes.ITdoColumn)">
            <summary>
            Comparison operator NotEqual
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoGuid.op_Inequality(Tdo.Common.TdoTypes.TdoGuid,System.Guid)">
            <summary>
            Comparison operator NotEqual 
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoGuid.op_Inequality(Tdo.Common.TdoTypes.TdoGuid,System.DBNull)">
            <summary>
            Comparison operator is not (null)
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="P:Tdo.Common.TdoTypes.TdoGuid.ObjectValue">
            <summary>
            Get or Set Value property of Object type
            </summary>
        </member>
        <member name="P:Tdo.Common.TdoTypes.TdoGuid.SqlDbType">
            <summary>
            System.Data.SqlDbType of ITdoColumn
            </summary>
        </member>
        <member name="T:Tdo.Common.TdoTypes.TdoDecimal">
            <summary>
            TdoDecimal class. Allows to keep SqlDecimal (decimal, numeric) actualValue type
            </summary>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoDecimal.#ctor">
            <summary>
            Default constructor for TdoDecimal Class
            </summary>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoDecimal.#ctor(System.Data.SqlTypes.SqlDecimal,System.String)">
            <summary>
            Constructor for TdoDecimal Class.
            </summary>
            <param name="value">Column constant value</param>
            <param name="columnAlias">Alias column.</param>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoDecimal.#ctor(System.Boolean,System.Boolean,System.Int64,System.Int64,System.String,System.String,System.Int32,System.Boolean,System.Boolean,Tdo.Common.Entities.ITdoEntity)">
            <summary>
            Constructor for TdoDecimal class
            </summary>
            <param name="allowDBNull">Boolean that indicates wether the field can be NULL</param>
            <param name="autoIncrement">Boolean that indicates if the field is IDENTITY (auto-increase)</param>
            <param name="autoIncrementSeed">Long that indicates how much is increasing the IDENTITY field</param>
            <param name="autoIncrementStep">Long that indicates the start actualValue of the IDENTITY field </param>
            <param name="caption">String that indicates the heading/columnAlias of the field</param>
            <param name="columnName">String that indicates the name of the column (field)</param>
            <param name="maxLength">Integer that indicates the maximum length of the field (-1,field without limit)</param>
            <param name="readOnly">Boolean that indicates if the field is only reading</param>
            <param name="unique">Boolean that indicates if a unique constraint exists on that field</param>
            <param name="tdoEntity">TdoEntity referenced to the class that contains the field</param>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoDecimal.Equals(System.Object)">
            <summary>
            Comparison operator Equals
            </summary>
            <param name="obj">Object to compare</param>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoDecimal.GetHashCode">
            <summary>
            Returns Hash code
            </summary>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoDecimal.ClonedValue(System.Data.SqlTypes.SqlDecimal)">
            <summary>
            Return a copy of SqlDecimal structure
            </summary>
            <param name="toClone">SqlDecimal to copy</param>
            <returns>SqlDecimal structure copied</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoDecimal.Clone">
            <summary>
            Creates a copy of this TdoDecimal object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoDecimal.ToString">
            <summary>
            Returns the string representation of the content of the field
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoDecimal.op_Equality(Tdo.Common.TdoTypes.TdoDecimal,System.Decimal)">
            <summary>
            Comparison operator Equals
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoDecimal.op_Equality(Tdo.Common.TdoTypes.TdoDecimal,Tdo.Common.TdoTypes.ITdoColumn)">
            <summary>
            Comparison operator Equals
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoDecimal.op_Equality(Tdo.Common.TdoTypes.TdoDecimal,System.DBNull)">
            <summary>
            Comparison operator is (null)
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoDecimal.op_Equality(Tdo.Common.TdoTypes.TdoDecimal,Tdo.Common.TdoSqlExpressionDom.TdoWhereRange)">
            <summary>
            Comparison operator BetWeen
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="range">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoDecimal.op_Equality(Tdo.Common.TdoTypes.TdoDecimal,Tdo.Common.TdoSqlExpressionDom.TdoWheresetOfValues)">
            <summary>
            Comparison operator IN
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="setOfValues">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoDecimal.op_Equality(Tdo.Common.TdoTypes.TdoDecimal,System.Object[])">
            <summary>
            Comparison operator IN
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="setOfValues">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoDecimal.op_GreaterThan(Tdo.Common.TdoTypes.TdoDecimal,System.Decimal)">
            <summary>
            Comparison operator Greater
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoDecimal.op_GreaterThan(Tdo.Common.TdoTypes.TdoDecimal,Tdo.Common.TdoTypes.ITdoColumn)">
            <summary>
            Comparison operator Greater
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoDecimal.op_GreaterThanOrEqual(Tdo.Common.TdoTypes.TdoDecimal,System.Decimal)">
            <summary>
            Comparison operator Greater or Equal
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoDecimal.op_GreaterThanOrEqual(Tdo.Common.TdoTypes.TdoDecimal,Tdo.Common.TdoTypes.ITdoColumn)">
            <summary>
            Comparison operator Greater or Equal
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoDecimal.op_LessThan(Tdo.Common.TdoTypes.TdoDecimal,System.Decimal)">
            <summary>
            Comparison operator Lower
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoDecimal.op_LessThan(Tdo.Common.TdoTypes.TdoDecimal,Tdo.Common.TdoTypes.ITdoColumn)">
            <summary>
            Comparison operator Lower
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoDecimal.op_LessThanOrEqual(Tdo.Common.TdoTypes.TdoDecimal,System.Decimal)">
            <summary>
            Comparison operator Lower or Equal
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoDecimal.op_LessThanOrEqual(Tdo.Common.TdoTypes.TdoDecimal,Tdo.Common.TdoTypes.ITdoColumn)">
            <summary>
            Comparison operator Lower or Equal
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoDecimal.op_Inequality(Tdo.Common.TdoTypes.TdoDecimal,Tdo.Common.TdoSqlExpressionDom.TdoWheresetOfValues)">
            <summary>
            Comparison operator NOT IN
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="setOfValues">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoDecimal.op_Inequality(Tdo.Common.TdoTypes.TdoDecimal,Tdo.Common.TdoTypes.ITdoColumn)">
            <summary>
            Comparison operator NotEqual
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoDecimal.op_Inequality(Tdo.Common.TdoTypes.TdoDecimal,System.Object[])">
            <summary>
            Comparison operator NOT IN
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="setOfValues">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoDecimal.op_Inequality(Tdo.Common.TdoTypes.TdoDecimal,Tdo.Common.TdoSqlExpressionDom.TdoWhereRange)">
            <summary>
            Comparison operator Not BetWeen
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="range">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoDecimal.op_Inequality(Tdo.Common.TdoTypes.TdoDecimal,System.Decimal)">
            <summary>
            Comparison operator NotEqual 
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoDecimal.op_Inequality(Tdo.Common.TdoTypes.TdoDecimal,System.DBNull)">
            <summary>
            Comparison operator is not (null)
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="P:Tdo.Common.TdoTypes.TdoDecimal.ObjectValue">
            <summary>
            Get or Set Value property of Object type
            </summary>
        </member>
        <member name="P:Tdo.Common.TdoTypes.TdoDecimal.SqlDbType">
            <summary>
            System.Data.SqlDbType of ITdoColumn
            </summary>
        </member>
        <member name="T:Tdo.Common.TdoTypes.TdoMoney">
            <summary>
            TdoMoney class. Allows to keep TDOMoney actualValue type 
            </summary>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoMoney.#ctor">
            <summary>
            Default constructor for TdoMoney Class
            </summary>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoMoney.#ctor(System.Data.SqlTypes.SqlMoney,System.String)">
            <summary>
            Constructor for TdoMoney Class.
            </summary>
            <param name="value">Column constant value</param>
            <param name="columnAlias">Alias column.</param>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoMoney.#ctor(System.Boolean,System.Boolean,System.Int64,System.Int64,System.String,System.String,System.Int32,System.Boolean,System.Boolean,Tdo.Common.Entities.ITdoEntity)">
            <summary>
            Constructor for TdoMoney class
            </summary>
            <param name="allowDBNull">Boolean that indicates wether the field can be NULL</param>
            <param name="autoIncrement">Boolean that indicates if the field is IDENTITY (auto-increase)</param>
            <param name="autoIncrementSeed">Long that indicates how much is increasing the IDENTITY field</param>
            <param name="autoIncrementStep">Long that indicates the start actualValue of the IDENTITY field </param>
            <param name="caption">String that indicates the heading/columnAlias of the field</param>
            <param name="columnName">String that indicates the name of the column (field)</param>
            <param name="maxLength">Integer that indicates the maximum length of the field (-1,field without limit)</param>
            <param name="readOnly">Boolean that indicates if the field is only reading</param>
            <param name="unique">Boolean that indicates if a unique constraint exists on that field</param>
            <param name="tdoEntity">TdoEntity referenced to the class that contains the field</param>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoMoney.Equals(System.Object)">
            <summary>
            Comparison operator Equals
            </summary>
            <param name="obj">Object to compare</param>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoMoney.GetHashCode">
            <summary>
            Returns Hash code
            </summary>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoMoney.ClonedValue(System.Data.SqlTypes.SqlMoney)">
            <summary>
            Return a copy of SqlMoney structure
            </summary>
            <param name="toClone">SqlMoney to copy</param>
            <returns>SqlMoney structure copied</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoMoney.Clone">
            <summary>
            Creates a copy of this TdoMoney object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoMoney.ToString">
            <summary>
            Returns the string representation of the content of the field
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoMoney.op_Equality(Tdo.Common.TdoTypes.TdoMoney,System.Decimal)">
            <summary>
            Comparison operator Equals
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoMoney.op_Equality(Tdo.Common.TdoTypes.TdoMoney,System.Data.SqlTypes.SqlMoney)">
            <summary>
            Comparison operator Equals
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoMoney.op_Equality(Tdo.Common.TdoTypes.TdoMoney,Tdo.Common.TdoTypes.ITdoColumn)">
            <summary>
            Comparison operator Equals
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoMoney.op_Equality(Tdo.Common.TdoTypes.TdoMoney,System.DBNull)">
            <summary>
            Comparison operator is (null)
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoMoney.op_Equality(Tdo.Common.TdoTypes.TdoMoney,Tdo.Common.TdoSqlExpressionDom.TdoWhereRange)">
            <summary>
            Comparison operator BetWeen
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="range">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoMoney.op_Equality(Tdo.Common.TdoTypes.TdoMoney,Tdo.Common.TdoSqlExpressionDom.TdoWheresetOfValues)">
            <summary>
            Comparison operator IN
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="setOfValues">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoMoney.op_Equality(Tdo.Common.TdoTypes.TdoMoney,System.Object[])">
            <summary>
            Comparison operator IN
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="setOfValues">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoMoney.op_GreaterThan(Tdo.Common.TdoTypes.TdoMoney,System.Decimal)">
            <summary>
            Comparison operator Greater
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoMoney.op_GreaterThan(Tdo.Common.TdoTypes.TdoMoney,System.Data.SqlTypes.SqlMoney)">
            <summary>
            Comparison operator Greater
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoMoney.op_GreaterThan(Tdo.Common.TdoTypes.TdoMoney,Tdo.Common.TdoTypes.ITdoColumn)">
            <summary>
            Comparison operator Greater
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoMoney.op_GreaterThanOrEqual(Tdo.Common.TdoTypes.TdoMoney,System.Decimal)">
            <summary>
            Comparison operator Greater or Equal
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoMoney.op_GreaterThanOrEqual(Tdo.Common.TdoTypes.TdoMoney,System.Data.SqlTypes.SqlMoney)">
            <summary>
            Comparison operator Greater or Equal
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoMoney.op_GreaterThanOrEqual(Tdo.Common.TdoTypes.TdoMoney,Tdo.Common.TdoTypes.ITdoColumn)">
            <summary>
            Comparison operator Greater or Equal
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoMoney.op_LessThan(Tdo.Common.TdoTypes.TdoMoney,System.Decimal)">
            <summary>
            Comparison operator Lower
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoMoney.op_LessThan(Tdo.Common.TdoTypes.TdoMoney,System.Data.SqlTypes.SqlMoney)">
            <summary>
            Comparison operator Lower
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoMoney.op_LessThan(Tdo.Common.TdoTypes.TdoMoney,Tdo.Common.TdoTypes.ITdoColumn)">
            <summary>
            Comparison operator Lower
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoMoney.op_LessThanOrEqual(Tdo.Common.TdoTypes.TdoMoney,System.Decimal)">
            <summary>
            Comparison operator Lower or Equal
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoMoney.op_LessThanOrEqual(Tdo.Common.TdoTypes.TdoMoney,System.Data.SqlTypes.SqlMoney)">
            <summary>
            Comparison operator Lower or Equal
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoMoney.op_LessThanOrEqual(Tdo.Common.TdoTypes.TdoMoney,Tdo.Common.TdoTypes.ITdoColumn)">
            <summary>
            Comparison operator Lower or Equal
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoMoney.op_Inequality(Tdo.Common.TdoTypes.TdoMoney,Tdo.Common.TdoSqlExpressionDom.TdoWheresetOfValues)">
            <summary>
            Comparison operator NOT IN
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="setOfValues">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoMoney.op_Inequality(Tdo.Common.TdoTypes.TdoMoney,Tdo.Common.TdoTypes.ITdoColumn)">
            <summary>
            Comparison operator NotEqual
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoMoney.op_Inequality(Tdo.Common.TdoTypes.TdoMoney,System.Object[])">
            <summary>
            Comparison operator NOT IN
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="setOfValues">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoMoney.op_Inequality(Tdo.Common.TdoTypes.TdoMoney,Tdo.Common.TdoSqlExpressionDom.TdoWhereRange)">
            <summary>
            Comparison operator Not BetWeen
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="range">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoMoney.op_Inequality(Tdo.Common.TdoTypes.TdoMoney,System.Decimal)">
            <summary>
            Comparison operator NotEqual 
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoMoney.op_Inequality(Tdo.Common.TdoTypes.TdoMoney,System.Data.SqlTypes.SqlMoney)">
            <summary>
            Comparison operator NotEqual 
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoMoney.op_Inequality(Tdo.Common.TdoTypes.TdoMoney,System.DBNull)">
            <summary>
            Comparison operator is not (null)
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="P:Tdo.Common.TdoTypes.TdoMoney.ObjectValue">
            <summary>
            Get or Set Value property of Object type
            </summary>
        </member>
        <member name="P:Tdo.Common.TdoTypes.TdoMoney.SqlDbType">
            <summary>
            System.Data.SqlDbType of ITdoColumn
            </summary>
        </member>
        <member name="T:Tdo.Common.TdoTypes.TdoInt16">
            <summary>
            TdoInt16 class. Allows to keep SqlInt16 values type
            </summary>
        </member>
        <member name="T:Tdo.Common.TdoTypes.ITdoExactNumericColumn">
            <summary>
            Interface for all Exact Numeric Tdo Types 
            </summary>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoInt16.#ctor">
            <summary>
            Default constructor for TdoInt16 Class
            </summary>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoInt16.#ctor(System.Data.SqlTypes.SqlInt16,System.String)">
            <summary>
            Constructor for TdoInt16 Class.
            </summary>
            <param name="value">Column constant value</param>
            <param name="columnAlias">Alias column.</param>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoInt16.#ctor(System.Boolean,System.Boolean,System.Int64,System.Int64,System.String,System.String,System.Int32,System.Boolean,System.Boolean,Tdo.Common.Entities.ITdoEntity)">
            <summary>
            Constructor for TdoInt16 class
            </summary>
            <param name="allowDBNull">Boolean that indicates wether the field can be NULL</param>
            <param name="autoIncrement">Boolean that indicates if the field is IDENTITY (auto-increase)</param>
            <param name="autoIncrementSeed">Long that indicates how much is increasing the IDENTITY field</param>
            <param name="autoIncrementStep">Long that indicates the start actualValue of the IDENTITY field </param>
            <param name="caption">String that indicates the heading/columnAlias of the field</param>
            <param name="columnName">String that indicates the name of the column (field)</param>
            <param name="maxLength">Integer that indicates the maximum length of the field (-1,field without limit)</param>
            <param name="readOnly">Boolean that indicates if the field is only reading</param>
            <param name="unique">Boolean that indicates if a unique constraint exists on that field</param>
            <param name="tdoEntity">TdoEntity referenced to the class that contains the field</param>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoInt16.Equals(System.Object)">
            <summary>
            Comparison operator Equals
            </summary>
            <param name="obj">Object to compare</param>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoInt16.GetHashCode">
            <summary>
            Returns Hash code
            </summary>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoInt16.ClonedValue(System.Data.SqlTypes.SqlInt16)">
            <summary>
            Return a copy of SqlInt16 structure
            </summary>
            <param name="toClone">SqlInt16 to copy</param>
            <returns>SqlInt16 structure copied</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoInt16.Clone">
            <summary>
            Creates a copy of this TdoInt16 object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoInt16.ToString">
            <summary>
            Returns the string representation of the content of the field
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoInt16.op_Equality(Tdo.Common.TdoTypes.TdoInt16,System.Int16)">
            <summary>
            Comparison operator Equals
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoInt16.op_Equality(Tdo.Common.TdoTypes.TdoInt16,Tdo.Common.TdoTypes.ITdoColumn)">
            <summary>
            Comparison operator Equals
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoInt16.op_Equality(Tdo.Common.TdoTypes.TdoInt16,System.DBNull)">
            <summary>
            Comparison operator is (null)
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoInt16.op_Equality(Tdo.Common.TdoTypes.TdoInt16,Tdo.Common.TdoSqlExpressionDom.TdoWhereRange)">
            <summary>
            Comparison operator BetWeen
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="range">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoInt16.op_Equality(Tdo.Common.TdoTypes.TdoInt16,Tdo.Common.TdoSqlExpressionDom.TdoWheresetOfValues)">
            <summary>
            Comparison operator IN
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="setOfValues">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoInt16.op_Equality(Tdo.Common.TdoTypes.TdoInt16,System.Object[])">
            <summary>
            Comparison operator IN
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="setOfValues">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoInt16.op_GreaterThan(Tdo.Common.TdoTypes.TdoInt16,System.Int16)">
            <summary>
            Comparison operator Greater
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoInt16.op_GreaterThan(Tdo.Common.TdoTypes.TdoInt16,Tdo.Common.TdoTypes.ITdoColumn)">
            <summary>
            Comparison operator Greater
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoInt16.op_GreaterThanOrEqual(Tdo.Common.TdoTypes.TdoInt16,System.Int16)">
            <summary>
            Comparison operator Greater or Equal
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoInt16.op_GreaterThanOrEqual(Tdo.Common.TdoTypes.TdoInt16,Tdo.Common.TdoTypes.ITdoColumn)">
            <summary>
            Comparison operator Greater or Equal
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoInt16.op_LessThan(Tdo.Common.TdoTypes.TdoInt16,System.Int16)">
            <summary>
            Comparison operator Lower
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoInt16.op_LessThan(Tdo.Common.TdoTypes.TdoInt16,Tdo.Common.TdoTypes.ITdoColumn)">
            <summary>
            Comparison operator Lower
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoInt16.op_LessThanOrEqual(Tdo.Common.TdoTypes.TdoInt16,System.Int16)">
            <summary>
            Comparison operator Lower or Equal
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoInt16.op_LessThanOrEqual(Tdo.Common.TdoTypes.TdoInt16,Tdo.Common.TdoTypes.ITdoColumn)">
            <summary>
            Comparison operator Lower or Equal
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoInt16.op_Inequality(Tdo.Common.TdoTypes.TdoInt16,Tdo.Common.TdoSqlExpressionDom.TdoWheresetOfValues)">
            <summary>
            Comparison operator NOT IN
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="setOfValues">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoInt16.op_Inequality(Tdo.Common.TdoTypes.TdoInt16,Tdo.Common.TdoTypes.ITdoColumn)">
            <summary>
            Comparison operator NotEqual
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoInt16.op_Inequality(Tdo.Common.TdoTypes.TdoInt16,System.Object[])">
            <summary>
            Comparison operator NOT IN
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="setOfValues">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoInt16.op_Inequality(Tdo.Common.TdoTypes.TdoInt16,Tdo.Common.TdoSqlExpressionDom.TdoWhereRange)">
            <summary>
            Comparison operator Not BetWeen
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="range">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoInt16.op_Inequality(Tdo.Common.TdoTypes.TdoInt16,System.Int16)">
            <summary>
            Comparison operator NotEqual 
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoInt16.op_Inequality(Tdo.Common.TdoTypes.TdoInt16,System.DBNull)">
            <summary>
            Comparison operator is not (null)
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="P:Tdo.Common.TdoTypes.TdoInt16.ObjectValue">
            <summary>
            Get or Set Value property of Object type
            </summary>
        </member>
        <member name="P:Tdo.Common.TdoTypes.TdoInt16.SqlDbType">
            <summary>
            System.Data.SqlDbType of ITdoColumn
            </summary>
        </member>
        <member name="T:Tdo.Common.TdoSqlExpressionDom.Clause">
            <summary>
            Class for the SQL clauses.
            </summary>
        </member>
        <member name="M:Tdo.Common.TdoSqlExpressionDom.Clause.#ctor">
            <summary>
            Private constructor 
            </summary>
        </member>
        <member name="M:Tdo.Common.TdoSqlExpressionDom.Clause.Where(System.String)">
            <summary>
            Returns the Where clause
            </summary>
            <param name="clauses">
            <code>TdoSqlExpression</code> clause. Use overloaded language operators to generate <code>TdoSqlExpression</code> clause.
            <example><code><![CDATA[Clause.Where(tdo.tEmployees.Firstname=="Nancy" & !(tdo.tEmployees.Lastname==DBNull.Value)).]]></code></example>
            </param>
            <returns>TdoEntityType-SQL WHERE Clause</returns>
        </member>
        <member name="M:Tdo.Common.TdoSqlExpressionDom.Clause.Where(Tdo.Common.TdoSqlExpressionDom.TdoSqlExpression)">
            <summary>
            returns the Where clause
            </summary>
            <param name="clauses">
            <code>TdoSqlExpression</code> clause. Use overloaded language operators to generate <code>TdoSqlExpression</code> clause.
            Ex.: <code>Clause.Where(tdo.tEmployees.Firstname=="Nancy" &amp; !(tdo.tEmployees.Lastname!=DBNull.Value)).</code>
            </param>
            <returns>TdoEntityType-SQL WHERE Clause</returns>
        </member>
        <member name="M:Tdo.Common.TdoSqlExpressionDom.Clause.OrderBy(Tdo.Common.TdoTypes.ITdoColumn[])">
            <summary>
            Order by clause for Where Clause (Default ASC Order)
            </summary>
            <param name="fields"> fields to order (Default is ASC Order)</param>
            <returns>Returns the Order by clause string </returns>
        </member>
        <member name="M:Tdo.Common.TdoSqlExpressionDom.Clause.OrderBy(Tdo.Common.TdoTypes.ITdoColumn,Tdo.Common.TdoSqlExpressionDom.OrderByOperator)">
            <summary>
            Order by clause for Where Clause
            </summary>
            <param name="column1">Sort Key Column 1</param>
            <param name="order1">OrderByOperator.Asc or OrderByOperator.Desc</param>
            <returns>Returns the Order by clause string </returns>
        </member>
        <member name="M:Tdo.Common.TdoSqlExpressionDom.Clause.OrderBy(Tdo.Common.TdoTypes.ITdoColumn,Tdo.Common.TdoSqlExpressionDom.OrderByOperator,Tdo.Common.TdoTypes.ITdoColumn,Tdo.Common.TdoSqlExpressionDom.OrderByOperator)">
            <summary>
            Order by clause for Where Clause
            </summary>
            <param name="column1">Sort Key Column 1</param>
            <param name="order1">OrderByOperator.Asc or OrderByOperator.Desc</param>
            <param name="column2">Sort Key Column 2</param>
            <param name="order2">OrderByOperator.Asc or OrderByOperator.Desc</param>
            <returns>Returns the Order by clause string </returns>
        </member>
        <member name="M:Tdo.Common.TdoSqlExpressionDom.Clause.OrderBy(Tdo.Common.TdoTypes.ITdoColumn,Tdo.Common.TdoSqlExpressionDom.OrderByOperator,Tdo.Common.TdoTypes.ITdoColumn,Tdo.Common.TdoSqlExpressionDom.OrderByOperator,Tdo.Common.TdoTypes.ITdoColumn,Tdo.Common.TdoSqlExpressionDom.OrderByOperator)">
            <summary>
            Order by clause for Where Clause
            </summary>
            <param name="column1">Sort Key Column 1</param>
            <param name="order1">OrderByOperator.Asc or OrderByOperator.Desc</param>
            <param name="column2">Sort Key Column 2</param>
            <param name="order2">OrderByOperator.Asc or OrderByOperator.Desc</param>
            <param name="column3">Sort Key Column 3</param>
            <param name="order3">OrderByOperator.Asc or OrderByOperator.Desc</param>
            <returns>Returns the Order by clause string </returns>
        </member>
        <member name="M:Tdo.Common.TdoSqlExpressionDom.Clause.OrderBy(System.Object[])">
            <summary>
            Order by clause for Where Clause
            </summary>
            <param name="fieldsAndSorts"> fields to order and sort clause .</param>
            <returns>Returns the Order by clause string </returns>
            <exception cref="T:System.ArgumentException">thrown when order by clause parameters number is incorrect</exception>
        </member>
        <member name="M:Tdo.Common.TdoSqlExpressionDom.Clause.GroupBy(Tdo.Common.TdoTypes.ITdoColumn,Tdo.Common.TdoTypes.ITdoColumn[])">
            <summary>
            Group By clause for the Where statement
            </summary>
            <param name="firstField">The first field of the Group By clause (obligatory)</param>
            <param name="otherFields">Other possible fields for the Group By clause</param>
            <returns> the GroupBy clause string</returns>
        </member>
        <member name="T:Tdo.Common.TdoStateObject">
            <summary>
            A Tdo-defined state object that will be passed to the callBack procedure. 
            Retrieve user-object from within the callBack procedure using the System.IAsyncResult.AsyncState property.
            </summary>
        </member>
        <member name="M:Tdo.Common.TdoStateObject.#ctor">
            <summary>
            Private default constructor.
            </summary>
        </member>
        <member name="M:Tdo.Common.TdoStateObject.#ctor(System.AsyncCallback,System.Object,System.String)">
            <summary>
            TdoStateObject constructor
            </summary>
            <param name="callBack">References the callBack method to be called when the asynchronous operation is completed.</param>
            <param name="stateObject">Gets a user-defined object that qualifies or contains information about an asynchronous operation.</param>
            <param name="methodName">method name async.ly invoked</param>
        </member>
        <member name="P:Tdo.Common.TdoStateObject.callBack">
            <summary>
            References the callBack method to be called when the asynchronous operation is completed.
            </summary>
        </member>
        <member name="P:Tdo.Common.TdoStateObject.StateObject">
            <summary>
            Gets a user-defined object that qualifies or contains information about an asynchronous operation.
            </summary>
        </member>
        <member name="P:Tdo.Common.TdoStateObject.AsyncCommandUniqueIdentifier">
            <summary>
            References async command unique identifier (System.Guid).
            </summary>
        </member>
        <member name="T:Tdo.Common.Entities.Views.TdoViewBase">
            <summary>
            TdoViewBase class. It's the default class of all Views
            </summary>
        </member>
        <member name="M:Tdo.Common.Entities.Views.TdoViewBase.#ctor">
            <summary>
            TdoViewBase Default Constructor
            </summary>
        </member>
        <member name="T:Tdo.Common.TdoSqlExpressionDom.TdoWheresetOfValues">
             <summary>
            TdoWheresetOfValues class for the IN and NOT IN clause.
             </summary>
        </member>
        <member name="F:Tdo.Common.TdoSqlExpressionDom.TdoWheresetOfValues.setOfValues">
            <summary>
            Objects set
            </summary>
        </member>
        <member name="M:Tdo.Common.TdoSqlExpressionDom.TdoWheresetOfValues.#ctor(System.Object[])">
            <summary>
            Constructor of TdoWheresetOfValues class for the IN and NOT IN clause
            </summary>
            <param name="setOfValues">Set di valori</param>
        </member>
        <member name="P:Tdo.Common.TdoSqlExpressionDom.TdoWheresetOfValues.Length">
            <summary>
            Returns the number of elements in the actual set of values
            </summary>
        </member>
        <member name="T:Tdo.Common.TdoTypes.TdoString">
            <summary>
            TdoString class. Allows to keep values of SqlString types.
            </summary>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoString.#ctor">
            <summary>
            Default constructor for TdoString Class
            </summary>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoString.#ctor(System.Data.SqlTypes.SqlString,System.String)">
            <summary>
            Constructor for TdoString Class.
            </summary>
            <param name="value">Column constant value</param>
            <param name="columnAlias">Alias column.</param>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoString.#ctor(System.Boolean,System.Boolean,System.Int64,System.Int64,System.String,System.String,System.Int32,System.Boolean,System.Boolean,Tdo.Common.Entities.ITdoEntity)">
            <summary>
            Constructor for TdoString class
            </summary>
            <param name="allowDBNull">Boolean that indicates wether the field can be NULL</param>
            <param name="autoIncrement">Boolean that indicates if the field is IDENTITY (auto-increase)</param>
            <param name="autoIncrementSeed">Long that indicates how much is increasing the IDENTITY field</param>
            <param name="autoIncrementStep">Long that indicates the start actualValue of the IDENTITY field </param>
            <param name="caption">String that indicates the heading/columnAlias of the field</param>
            <param name="columnName">String that indicates the name of the column (field)</param>
            <param name="maxLength">Integer that indicates the maximum length of the field (-1,field without limit)</param>
            <param name="readOnly">Boolean that indicates if the field is only reading</param>
            <param name="unique">Boolean that indicates if a unique constraint exists on that field</param>
            <param name="tdoEntity">TdoEntity referenced to the class that contains the field</param>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoString.Equals(System.Object)">
            <summary>
            Comparison operator Equals
            </summary>
            <param name="obj">Object to compare</param>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoString.GetHashCode">
            <summary>
            Returns Hash code
            </summary>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoString.ClonedValue(System.Data.SqlTypes.SqlString)">
            <summary>
            Return a copy of SqlString structure
            </summary>
            <param name="toClone">SqlString to copy</param>
            <returns>SqlString structure copied</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoString.Clone">
            <summary>
            Creates a copy of this TdoString object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoString.ToString">
            <summary>
            Returns the string representation of the content of the field
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoString.op_Equality(Tdo.Common.TdoTypes.TdoString,System.String)">
            <summary>
            Comparison operator Equal
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoString.op_Equality(Tdo.Common.TdoTypes.TdoString,Tdo.Common.TdoTypes.ITdoType{System.Data.SqlTypes.SqlString})">
            <summary>
            Comparison operator Equal
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoString.op_Equality(Tdo.Common.TdoTypes.TdoString,System.DBNull)">
            <summary>
            Comparison operator is (null)
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoString.op_Equality(Tdo.Common.TdoTypes.TdoString,Tdo.Common.TdoSqlExpressionDom.TdoWhereRange)">
            <summary>
            Comparison operator BetWeen
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="range">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoString.op_Equality(Tdo.Common.TdoTypes.TdoString,Tdo.Common.TdoSqlExpressionDom.TdoWheresetOfValues)">
            <summary>
            Comparison operator IN
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="setOfValues">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoString.op_Equality(Tdo.Common.TdoTypes.TdoString,System.Object[])">
            <summary>
            Comparison operator IN
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="setOfValues">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoString.op_GreaterThan(Tdo.Common.TdoTypes.TdoString,System.String)">
            <summary>
            Comparison operator Greater
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoString.op_GreaterThan(Tdo.Common.TdoTypes.TdoString,Tdo.Common.TdoTypes.ITdoType{System.Data.SqlTypes.SqlString})">
            <summary>
            Comparison operator Greater
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoString.op_GreaterThanOrEqual(Tdo.Common.TdoTypes.TdoString,System.String)">
            <summary>
            Comparison operator Greater or Equal
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoString.op_GreaterThanOrEqual(Tdo.Common.TdoTypes.TdoString,Tdo.Common.TdoTypes.ITdoType{System.Data.SqlTypes.SqlString})">
            <summary>
            Comparison operator Greater or Equal
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoString.op_LessThan(Tdo.Common.TdoTypes.TdoString,System.String)">
            <summary>
            Comparison operator Lower
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoString.op_LessThan(Tdo.Common.TdoTypes.TdoString,Tdo.Common.TdoTypes.ITdoType{System.Data.SqlTypes.SqlString})">
            <summary>
            Comparison operator Lower
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoString.op_LessThanOrEqual(Tdo.Common.TdoTypes.TdoString,System.String)">
            <summary>
            Comparison operator Lower or Equal
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoString.op_LessThanOrEqual(Tdo.Common.TdoTypes.TdoString,Tdo.Common.TdoTypes.ITdoType{System.Data.SqlTypes.SqlString})">
            <summary>
            Comparison operator Lower or Equal
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoString.op_Inequality(Tdo.Common.TdoTypes.TdoString,Tdo.Common.TdoSqlExpressionDom.TdoWheresetOfValues)">
            <summary>
            Comparison operator NOT IN
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="setOfValues">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoString.op_Inequality(Tdo.Common.TdoTypes.TdoString,Tdo.Common.TdoTypes.ITdoType{System.Data.SqlTypes.SqlString})">
            <summary>
            Comparison operator NotEqual
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoString.op_Inequality(Tdo.Common.TdoTypes.TdoString,System.Object[])">
            <summary>
            Comparison operator NOT IN
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="setOfValues">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoString.op_Modulus(Tdo.Common.TdoTypes.TdoString,System.String)">
            <summary>
            Comparison operator Like
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoString.op_Subtraction(Tdo.Common.TdoTypes.TdoString,System.String)">
            <summary>
            Comparison operator Not Like
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoString.op_Inequality(Tdo.Common.TdoTypes.TdoString,Tdo.Common.TdoSqlExpressionDom.TdoWhereRange)">
            <summary>
            Comparison operator Not BetWeen
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="range">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoString.op_Inequality(Tdo.Common.TdoTypes.TdoString,System.String)">
            <summary>
            Comparison operator NotEqual 
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoString.op_Inequality(Tdo.Common.TdoTypes.TdoString,System.DBNull)">
            <summary>
            Comparison operator is not (null)
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="P:Tdo.Common.TdoTypes.TdoString.ObjectValue">
            <summary>
            Get or Set Value property of Object type
            </summary>
        </member>
        <member name="P:Tdo.Common.TdoTypes.TdoString.SqlDbType">
            <summary>
            System.Data.SqlDbType of ITdoColumn
            </summary>
        </member>
        <member name="T:Tdo.Common.TdoTypes.TdoSingle">
            <summary>
            TdoSingle class. Allows to keep SqlSingle (float)actualValue type
            </summary>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoSingle.#ctor">
            <summary>
            Default constructor for TdoSingle Class
            </summary>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoSingle.#ctor(System.Data.SqlTypes.SqlSingle,System.String)">
            <summary>
            Constructor for TdoSingle Class.
            </summary>
            <param name="value">Column constant value</param>
            <param name="columnAlias">Alias column.</param>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoSingle.#ctor(System.Boolean,System.Boolean,System.Int64,System.Int64,System.String,System.String,System.Int32,System.Boolean,System.Boolean,Tdo.Common.Entities.ITdoEntity)">
            <summary>
            Constructor for TdoSingle class
            </summary>
            <param name="allowDBNull">Boolean that indicates wether the field can be NULL</param>
            <param name="autoIncrement">Boolean that indicates if the field is IDENTITY (auto-increase)</param>
            <param name="autoIncrementSeed">Long that indicates how much is increasing the IDENTITY field</param>
            <param name="autoIncrementStep">Long that indicates the start actualValue of the IDENTITY field </param>
            <param name="caption">String that indicates the heading/columnAlias of the field</param>
            <param name="columnName">String that indicates the name of the column (field)</param>
            <param name="maxLength">Integer that indicates the maximum length of the field (-1,field without limit)</param>
            <param name="readOnly">Boolean that indicates if the field is only reading</param>
            <param name="unique">Boolean that indicates if a unique constraint exists on that field</param>
            <param name="tdoEntity">TdoEntity referenced to the class that contains the field</param>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoSingle.Equals(System.Object)">
            <summary>
            Comparison operator Equals
            </summary>
            <param name="obj">Object to compare</param>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoSingle.GetHashCode">
            <summary>
            Returns Hash code
            </summary>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoSingle.ClonedValue(System.Data.SqlTypes.SqlSingle)">
            <summary>
            Return a copy of SqlSingle structure
            </summary>
            <param name="toClone">SqlSingle to copy</param>
            <returns>SqlSingle structure copied</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoSingle.Clone">
            <summary>
            Creates a copy of this TdoSingle object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoSingle.ToString">
            <summary>
            Returns the string representation of the content of the field
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoSingle.op_Equality(Tdo.Common.TdoTypes.TdoSingle,System.Single)">
            <summary>
            Comparison operator Equals
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoSingle.op_Equality(Tdo.Common.TdoTypes.TdoSingle,Tdo.Common.TdoTypes.ITdoColumn)">
            <summary>
            Comparison operator Equals
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoSingle.op_Equality(Tdo.Common.TdoTypes.TdoSingle,System.DBNull)">
            <summary>
            Comparison operator is (null)
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoSingle.op_Equality(Tdo.Common.TdoTypes.TdoSingle,Tdo.Common.TdoSqlExpressionDom.TdoWhereRange)">
            <summary>
            Comparison operator BetWeen
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="range">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoSingle.op_Equality(Tdo.Common.TdoTypes.TdoSingle,Tdo.Common.TdoSqlExpressionDom.TdoWheresetOfValues)">
            <summary>
            Comparison operator IN
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="setOfValues">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoSingle.op_Equality(Tdo.Common.TdoTypes.TdoSingle,System.Object[])">
            <summary>
            Comparison operator IN
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="setOfValues">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoSingle.op_GreaterThan(Tdo.Common.TdoTypes.TdoSingle,System.Single)">
            <summary>
            Comparison operator Greater
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoSingle.op_GreaterThan(Tdo.Common.TdoTypes.TdoSingle,Tdo.Common.TdoTypes.ITdoColumn)">
            <summary>
            Comparison operator Greater
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoSingle.op_GreaterThanOrEqual(Tdo.Common.TdoTypes.TdoSingle,System.Single)">
            <summary>
            Comparison operator Greater or Equal
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoSingle.op_GreaterThanOrEqual(Tdo.Common.TdoTypes.TdoSingle,Tdo.Common.TdoTypes.ITdoColumn)">
            <summary>
            Comparison operator Greater or Equal
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoSingle.op_LessThan(Tdo.Common.TdoTypes.TdoSingle,System.Single)">
            <summary>
            Comparison operator Lower
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoSingle.op_LessThan(Tdo.Common.TdoTypes.TdoSingle,Tdo.Common.TdoTypes.ITdoColumn)">
            <summary>
            Comparison operator Lower
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoSingle.op_LessThanOrEqual(Tdo.Common.TdoTypes.TdoSingle,System.Single)">
            <summary>
            Comparison operator Lower or Equal
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoSingle.op_LessThanOrEqual(Tdo.Common.TdoTypes.TdoSingle,Tdo.Common.TdoTypes.ITdoColumn)">
            <summary>
            Comparison operator Lower or Equal
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoSingle.op_Inequality(Tdo.Common.TdoTypes.TdoSingle,Tdo.Common.TdoSqlExpressionDom.TdoWheresetOfValues)">
            <summary>
            Comparison operator NOT IN
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="setOfValues">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoSingle.op_Inequality(Tdo.Common.TdoTypes.TdoSingle,Tdo.Common.TdoTypes.ITdoColumn)">
            <summary>
            Comparison operator NotEqual
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoSingle.op_Inequality(Tdo.Common.TdoTypes.TdoSingle,System.Object[])">
            <summary>
            Comparison operator NOT IN
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="setOfValues">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoSingle.op_Inequality(Tdo.Common.TdoTypes.TdoSingle,Tdo.Common.TdoSqlExpressionDom.TdoWhereRange)">
            <summary>
            Comparison operator Not BetWeen
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="range">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoSingle.op_Inequality(Tdo.Common.TdoTypes.TdoSingle,System.Single)">
            <summary>
            Comparison operator NotEqual 
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoSingle.op_Inequality(Tdo.Common.TdoTypes.TdoSingle,System.DBNull)">
            <summary>
            Comparison operator is not (null)
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="P:Tdo.Common.TdoTypes.TdoSingle.ObjectValue">
            <summary>
            Get or Set Value property of Object type
            </summary>
        </member>
        <member name="P:Tdo.Common.TdoTypes.TdoSingle.SqlDbType">
            <summary>
            System.Data.SqlDbType of ITdoColumn
            </summary>
        </member>
        <member name="T:Tdo.Common.TdoTypes.TdoByte">
            <summary>
            Classe TdoByte. Consente di conservare valori di tipo SqlByte (tinyint)
            </summary>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoByte.#ctor">
            <summary>
            Default constructor for TdoByte Class
            </summary>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoByte.#ctor(System.Data.SqlTypes.SqlByte,System.String)">
            <summary>
            Constructor for TdoByte Class.
            </summary>
            <param name="value">Column constant value</param>
            <param name="columnAlias">Alias column.</param>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoByte.#ctor(System.Boolean,System.Boolean,System.Int64,System.Int64,System.String,System.String,System.Int32,System.Boolean,System.Boolean,Tdo.Common.Entities.ITdoEntity)">
            <summary>
            Constructor for TdoByte class
            </summary>
            <param name="allowDBNull">Boolean that indicates wether the field can be NULL</param>
            <param name="autoIncrement">Boolean that indicates if the field is IDENTITY (auto-increase)</param>
            <param name="autoIncrementSeed">Long that indicates how much is increasing the IDENTITY field</param>
            <param name="autoIncrementStep">Long that indicates the start actualValue of the IDENTITY field </param>
            <param name="caption">String that indicates the heading/columnAlias of the field</param>
            <param name="columnName">String that indicates the name of the column (field)</param>
            <param name="maxLength">Integer that indicates the maximum length of the field (-1,field without limit)</param>
            <param name="readOnly">Boolean that indicates if the field is only reading</param>
            <param name="unique">Boolean that indicates if a unique constraint exists on that field</param>
            <param name="tdoEntity">TdoEntity referenced to the class that contains the field</param>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoByte.Equals(System.Object)">
            <summary>
            Comparison operator Equals
            </summary>
            <param name="obj">Object to compare</param>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoByte.GetHashCode">
            <summary>
            Returns Hash code
            </summary>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoByte.ClonedValue(System.Data.SqlTypes.SqlByte)">
            <summary>
            Return a copy of SqlByte structure
            </summary>
            <param name="toClone">SqlByte to copy</param>
            <returns>SqlByte structure copied</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoByte.Clone">
            <summary>
            Creates a copy of this TdoByte object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoByte.ToString">
            <summary>
            Returns the string representation of the content of the field
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoByte.op_Equality(Tdo.Common.TdoTypes.TdoByte,System.Byte)">
            <summary>
            Comparison operator Equals
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoByte.op_Equality(Tdo.Common.TdoTypes.TdoByte,Tdo.Common.TdoTypes.ITdoColumn)">
            <summary>
            Comparison operator Equals
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoByte.op_Equality(Tdo.Common.TdoTypes.TdoByte,System.DBNull)">
            <summary>
            Comparison operator is (null)
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoByte.op_Equality(Tdo.Common.TdoTypes.TdoByte,Tdo.Common.TdoSqlExpressionDom.TdoWhereRange)">
            <summary>
            Comparison operator BetWeen
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="range">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoByte.op_Equality(Tdo.Common.TdoTypes.TdoByte,Tdo.Common.TdoSqlExpressionDom.TdoWheresetOfValues)">
            <summary>
            Comparison operator IN
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="setOfValues">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoByte.op_Equality(Tdo.Common.TdoTypes.TdoByte,System.Object[])">
            <summary>
            Comparison operator IN
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="setOfValues">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoByte.op_GreaterThan(Tdo.Common.TdoTypes.TdoByte,System.Byte)">
            <summary>
            Comparison operator Greater
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoByte.op_GreaterThan(Tdo.Common.TdoTypes.TdoByte,Tdo.Common.TdoTypes.ITdoColumn)">
            <summary>
            Comparison operator Greater
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoByte.op_GreaterThanOrEqual(Tdo.Common.TdoTypes.TdoByte,System.Byte)">
            <summary>
            Comparison operator Greater or Equal
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoByte.op_GreaterThanOrEqual(Tdo.Common.TdoTypes.TdoByte,Tdo.Common.TdoTypes.ITdoColumn)">
            <summary>
            Comparison operator Greater or Equal
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoByte.op_LessThan(Tdo.Common.TdoTypes.TdoByte,System.Byte)">
            <summary>
            Comparison operator Lower
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoByte.op_LessThan(Tdo.Common.TdoTypes.TdoByte,Tdo.Common.TdoTypes.ITdoColumn)">
            <summary>
            Comparison operator Lower
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoByte.op_LessThanOrEqual(Tdo.Common.TdoTypes.TdoByte,System.Byte)">
            <summary>
            Comparison operator Lower obj Equal
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoByte.op_LessThanOrEqual(Tdo.Common.TdoTypes.TdoByte,Tdo.Common.TdoTypes.ITdoColumn)">
            <summary>
            Comparison operator Lower obj Equal
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoByte.op_Inequality(Tdo.Common.TdoTypes.TdoByte,Tdo.Common.TdoSqlExpressionDom.TdoWheresetOfValues)">
            <summary>
            Comparison operator NOT IN
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="setOfValues">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoByte.op_Inequality(Tdo.Common.TdoTypes.TdoByte,Tdo.Common.TdoTypes.ITdoColumn)">
            <summary>
            Comparison operator NotEqual
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoByte.op_Inequality(Tdo.Common.TdoTypes.TdoByte,System.Object[])">
            <summary>
            Comparison operator NOT IN
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="setOfValues">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoByte.op_Inequality(Tdo.Common.TdoTypes.TdoByte,Tdo.Common.TdoSqlExpressionDom.TdoWhereRange)">
            <summary>
            Comparison operator Not BetWeen
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="range">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoByte.op_Inequality(Tdo.Common.TdoTypes.TdoByte,System.Byte)">
            <summary>
            Comparison operator NotEqual 
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoByte.op_Inequality(Tdo.Common.TdoTypes.TdoByte,System.DBNull)">
            <summary>
            Comparison operator is not (null)
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="P:Tdo.Common.TdoTypes.TdoByte.ObjectValue">
            <summary>
            Get or Set Value property of Object type
            </summary>
        </member>
        <member name="P:Tdo.Common.TdoTypes.TdoByte.SqlDbType">
            <summary>
            System.Data.SqlDbType of ITdoColumn
            </summary>
        </member>
        <member name="T:Tdo.Common.TdoTypes.TdoBoolean">
            <summary>
            TdoBoolean boolean. Allows to keep SqlBoolean (boolan, bit)actualValue type
            </summary>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoBoolean.#ctor">
            <summary>
            Default constructor for TdoBoolean Class
            </summary>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoBoolean.#ctor(System.Data.SqlTypes.SqlBoolean,System.String)">
            <summary>
            Constructor for TdoBoolean Class.
            </summary>
            <param name="value">Column constant value.</param>
            <param name="columnAlias">Alias column.</param>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoBoolean.#ctor(System.Boolean,System.Boolean,System.Int64,System.Int64,System.String,System.String,System.Int32,System.Boolean,System.Boolean,Tdo.Common.Entities.ITdoEntity)">
            <summary>
            Constructor for TdoBoolean class
            </summary>
            <param name="allowDBNull">Boolean that indicates wether the field can be NULL</param>
            <param name="autoIncrement">Boolean that indicates if the field is IDENTITY (auto-increase)</param>
            <param name="autoIncrementSeed">Long that indicates how much is increasing the IDENTITY field</param>
            <param name="autoIncrementStep">Long that indicates the start actualValue of the IDENTITY field </param>
            <param name="caption">String that indicates the heading/columnAlias of the field</param>
            <param name="columnName">String that indicates the name of the column (field)</param>
            <param name="maxLength">Integer that indicates the maximum length of the field (-1,field without limit)</param>
            <param name="readOnly">Boolean that indicates if the field is only reading</param>
            <param name="unique">Boolean that indicates if a unique constraint exists on that field</param>
            <param name="tdoEntity">TdoEntity referenced to the class that contains the field</param>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoBoolean.Equals(System.Object)">
            <summary>
            Comparison operator Equals
            </summary>
            <param name="obj">Object to compare</param>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoBoolean.GetHashCode">
            <summary>
            Returns Hash code
            </summary>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoBoolean.ClonedValue(System.Data.SqlTypes.SqlBoolean)">
            <summary>
            Return a copy of SqlBoolean structure
            </summary>
            <param name="toClone">SqlBoolean to copy</param>
            <returns>SqlBoolean structure copied</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoBoolean.Clone">
            <summary>
            Creates a copy of this TdoBoolean object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoBoolean.ToString">
            <summary>
            Returns the string representation of the content of the field
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoBoolean.op_Equality(Tdo.Common.TdoTypes.TdoBoolean,System.Boolean)">
            <summary>
            Comparison operator Equals 
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoBoolean.op_Equality(Tdo.Common.TdoTypes.TdoBoolean,System.DBNull)">
            <summary>
            Comparison operator is (null)
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoBoolean.op_Inequality(Tdo.Common.TdoTypes.TdoBoolean,System.Boolean)">
            <summary>
            Comparison operator NotEqual 
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoBoolean.op_Inequality(Tdo.Common.TdoTypes.TdoBoolean,System.DBNull)">
            <summary>
            Comparison operator is not (null)
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="P:Tdo.Common.TdoTypes.TdoBoolean.ObjectValue">
            <summary>
            Get or Set Value property of Object type
            </summary>
        </member>
        <member name="P:Tdo.Common.TdoTypes.TdoBoolean.SqlDbType">
            <summary>
            System.Data.SqlDbType of ITdoColumn
            </summary>
        </member>
        <member name="T:Tdo.Common.TdoTypes.TdoBinary">
            <summary>
            TdoBinary class. Allows to keep SqlBinary (byte[], image, binary) actualValue type
            </summary>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoBinary.#ctor">
            <summary>
            Default constructor for TdoBinary Class.
            </summary>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoBinary.#ctor(System.Data.SqlTypes.SqlBinary,System.String)">
            <summary>
            Constructor for TdoBinary Class.
            </summary>
            <param name="value">Column constant value</param>
            <param name="columnAlias">Alias column.</param>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoBinary.#ctor(System.Boolean,System.Boolean,System.Int64,System.Int64,System.String,System.String,System.Int32,System.Boolean,System.Boolean,Tdo.Common.Entities.ITdoEntity)">
            <summary>
            Constructor for TdoBinary class
            </summary>
            <param name="allowDBNull">Boolean that indicates wether the field can be NULL</param>
            <param name="autoIncrement">Boolean that indicates if the field is IDENTITY (auto-increase)</param>
            <param name="autoIncrementSeed">Long that indicates how much is increasing the IDENTITY field</param>
            <param name="autoIncrementStep">Long that indicates the start actualValue of the IDENTITY field </param>
            <param name="caption">String that indicates the heading/columnAlias of the field</param>
            <param name="columnName">String that indicates the name of the column (field)</param>
            <param name="maxLength">Integer that indicates the maximum length of the field (-1,field without limit)</param>
            <param name="readOnly">Boolean that indicates if the field is only reading</param>
            <param name="unique">Boolean that indicates if a unique constraint exists on that field</param>
            <param name="tdoEntity">TdoEntity referenced to the class that contains the field</param>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoBinary.Equals(System.Object)">
            <summary>
            Comparison operator Equals
            </summary>
            <param name="obj">Object to compare</param>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoBinary.GetHashCode">
            <summary>
            Returns Hash code
            </summary>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoBinary.ClonedValue(System.Data.SqlTypes.SqlBinary)">
            <summary>
            Return a copy of SqlBinary structure
            </summary>
            <param name="toClone">SqlBinary to copy</param>
            <returns>SqlBinary structure copied</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoBinary.Clone">
            <summary>
            Creates a copy of this TdoBinary object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoBinary.ToString">
            <summary>
            Returns the string representation of the content of the field
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoBinary.op_Inequality(Tdo.Common.TdoTypes.TdoBinary,System.DBNull)">
            <summary>
            Comparison operator is not (null)
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoBinary.op_Equality(Tdo.Common.TdoTypes.TdoBinary,System.DBNull)">
            <summary>
            Comparison operator is (null)
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoBinary.op_Modulus(Tdo.Common.TdoTypes.TdoBinary,System.Byte[])">
            <summary>
            Comparison operator Like
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoBinary.op_Subtraction(Tdo.Common.TdoTypes.TdoBinary,System.Byte[])">
            <summary>
            Comparison operator Not Like
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoBinary.op_Equality(Tdo.Common.TdoTypes.TdoBinary,System.Byte[])">
            <summary>
            Comparison operator Like
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoBinary.op_Inequality(Tdo.Common.TdoTypes.TdoBinary,System.Byte[])">
            <summary>
            Comparison operator Not Like
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="P:Tdo.Common.TdoTypes.TdoBinary.ObjectValue">
            <summary>
            Get or Set Value property of Object type
            </summary>
        </member>
        <member name="P:Tdo.Common.TdoTypes.TdoBinary.SqlDbType">
            <summary>
            System.Data.SqlDbType of ITdoColumn
            </summary>
        </member>
        <member name="P:Tdo.Common.TdoTypes.TdoBinary.IsConstant">
            <summary>
            Gets or sets if column is a constant expression.
            </summary>
            <remarks>
            True for Value, false for Column.
            </remarks>
            <exception cref="T:System.InvalidOperationException">thrown when IsConstant property is set to true for blob fields.</exception>
        </member>
        <member name="T:Tdo.Common.TdoTypes.TdoXml">
            <summary>
            TdoXml class. Allows to keep values of SqlXml types.
            </summary>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoXml.ToSqlXml(System.String)">
            <summary>
            TdoXml to SqlXml converter.
            </summary>
            <param name="xmlFragment">The XML fragment.</param>
            <returns></returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoXml.#ctor">
            <summary>
            Default constructor for TdoXml Class
            </summary>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoXml.#ctor(System.Data.SqlTypes.SqlXml,System.String)">
            <summary>
            Constructor for TdoXml Class.
            </summary>
            <param name="value">Column constant value</param>
            <param name="columnAlias">Alias column.</param>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoXml.#ctor(System.Xml.XmlReader,System.String)">
            <summary>
            Constructor for TdoXml Class.
            </summary>
            <param name="xmlReader">An System.Xml.XmlReader-derived class instance to be used as the value of the new System.Data.SqlTypes.SqlXml instance.</param>
            <param name="columnAlias">Alias column.</param>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoXml.#ctor(System.IO.Stream,System.String)">
            <summary>
            Constructor for TdoXml Class.
            </summary>
            <param name="stream">A System.IO.Stream-derived instance (such as System.IO.FileStream) from which to load the System.Data.SqlTypes.SqlXml instance's Xml content.</param>
            <param name="columnAlias">Alias column.</param>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoXml.#ctor(System.String,System.Xml.ConformanceLevel,System.String)">
            <summary>
            Constructor for TdoXml Class.
            </summary>
            <param name="xmlFragment">The string containing the XML fragment to parse.</param>
            <param name="conformanceLevel">The level of conformance which the System.Xml.XmlReader will comply.</param>
            <param name="columnAlias">Alias column.</param>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoXml.#ctor(System.Xml.XmlDocument,System.String)">
            <summary>
            Constructor for TdoXml Class.
            </summary>
            <param name="xmlDocument">System.Xml.XmlDocument from wich read xml.</param>
            <param name="columnAlias">Alias column.</param>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoXml.#ctor(System.Xml.XmlNodeList,System.String)">
            <summary>
            Constructor for TdoXml Class.
            </summary>
            <param name="xmlNodeList">System.Xml.XmlNodeList from wich read xml nodes.</param>
            <param name="columnAlias">Alias column.</param>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoXml.#ctor(System.Xml.XmlNode,System.String)">
            <summary>
            Constructor for TdoXml Class.
            </summary>
            <param name="xmlNode">System.Xml.XmlNode from wich read xml node.</param>
            <param name="columnAlias">Alias column.</param>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoXml.#ctor(System.Boolean,System.Boolean,System.Int64,System.Int64,System.String,System.String,System.Int32,System.Boolean,System.Boolean,Tdo.Common.Entities.ITdoEntity)">
            <summary>
            Constructor for TdoXml class
            </summary>
            <param name="allowDBNull">Boolean that indicates wether the field can be NULL</param>
            <param name="autoIncrement">Boolean that indicates if the field is IDENTITY (auto-increase)</param>
            <param name="autoIncrementSeed">Long that indicates how much is increasing the IDENTITY field</param>
            <param name="autoIncrementStep">Long that indicates the start actualValue of the IDENTITY field </param>
            <param name="caption">String that indicates the heading/columnAlias of the field</param>
            <param name="columnName">String that indicates the name of the column (field)</param>
            <param name="maxLength">Integer that indicates the maximum length of the field (-1,field without limit)</param>
            <param name="readOnly">Boolean that indicates if the field is only reading</param>
            <param name="unique">Boolean that indicates if a unique constraint exists on that field</param>
            <param name="tdoEntity">TdoEntity referenced to the class that contains the field</param>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoXml.Equals(System.Object)">
            <summary>
            Comparison operator Equals
            </summary>
            <param name="obj">Object to compare</param>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoXml.GetHashCode">
            <summary>
            Returns Hash code
            </summary>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoXml.ClonedValue(System.Data.SqlTypes.SqlXml)">
            <summary>
            Return a copy of SqlXml structure
            </summary>
            <param name="toClone">SqlXml to copy</param>
            <returns>SqlXml structure copied</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoXml.Clone">
            <summary>
            Creates a copy of this TdoXml object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoXml.ToString">
            <summary>
            Returns the string representation of the content of the field
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoXml.GetXmlNodes">
            <summary>
            Returns a System.Xml.XmlNode array if SqlXml.Value is not SqlXml.Null. Otherwise null.
            </summary>
            <returns>System.Xml.XmlNode array</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoXml.GetXmlDocument">
            <summary>
            Returns a System.Xml.XmlDocument even if SqlXml.Value is an xml well-formed document otherwise null.
            </summary>
            <returns>System.Xml.XmlDocument</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoXml.op_Equality(Tdo.Common.TdoTypes.TdoXml,System.String)">
            <summary>
            Comparison operator Equal
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoXml.op_Equality(Tdo.Common.TdoTypes.TdoXml,Tdo.Common.TdoTypes.ITdoType{System.Data.SqlTypes.SqlXml})">
            <summary>
            Comparison operator Equal
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoXml.op_Equality(Tdo.Common.TdoTypes.TdoXml,System.DBNull)">
            <summary>
            Comparison operator is (null)
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoXml.op_Inequality(Tdo.Common.TdoTypes.TdoXml,Tdo.Common.TdoTypes.ITdoType{System.Data.SqlTypes.SqlXml})">
            <summary>
            Comparison operator NotEqual
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoXml.op_Inequality(Tdo.Common.TdoTypes.TdoXml,System.String)">
            <summary>
            Comparison operator NotEqual 
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoXml.op_Inequality(Tdo.Common.TdoTypes.TdoXml,System.DBNull)">
            <summary>
            Comparison operator is not (null)
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="P:Tdo.Common.TdoTypes.TdoXml.ObjectValue">
            <summary>
            Get or Set Value property of Object type
            </summary>
        </member>
        <member name="P:Tdo.Common.TdoTypes.TdoXml.SqlDbType">
            <summary>
            System.Data.SqlDbType of ITdoColumn
            </summary>
        </member>
        <member name="T:Tdo.Common.Utility">
            <summary>
            Utility static class. Provides common Tdo utility methods. 
            </summary>
        </member>
        <member name="M:Tdo.Common.Utility.ReadConnectionStringIfExists(System.String)">
            <summary>
            Reads the connection string if exists.
            </summary>
            <param name="connectionStringName">Name of the connection string.</param>
            <returns></returns>
        </member>
        <member name="M:Tdo.Common.Utility.ColumnOrValue(Tdo.Common.TdoTypes.ITdoColumn)">
            <summary>
            Return column.ObjectValue.ToString() if IsConstant property is true, column.TdoEntity.EntityName.columnName otherwise.
            </summary>
            <returns>Column or Value string</returns>
        </member>
        <member name="M:Tdo.Common.Utility.ColumnOrValueWithoutAlias(Tdo.Common.TdoTypes.ITdoColumn)">
            <summary>
            Return column.ObjectValue.ToString() if IsConstant property is true, column.TdoEntity.EntityName.columnName otherwise.
            </summary>
            <returns>Column or Value string without alias.</returns>
        </member>
        <member name="M:Tdo.Common.Utility.WriteTdoEntityXml``1(``0,System.String)">
            <summary>
            Writes the current contents of the tdoEntityToSerialize as XML using the specified file.
            </summary>
            <typeparam name="TdoEntityType">Type of ITdoEntity to serialize</typeparam>
            <param name="tdoEntityToSerialize">TdoEntity to serialize</param>
            <param name="fileName">The file to which to write the XML data.</param>
        </member>
        <member name="M:Tdo.Common.Utility.WriteTdoEntityXml``1(``0,System.IO.Stream)">
            <summary>
            Writes the current contents of the tdoEntityToSerialize as XML using the specified file.
            </summary>
            <typeparam name="TdoEntityType">Type of ITdoEntity to serialize</typeparam>
            <param name="tdoEntityToSerialize">TdoEntity to serialize</param>
            <param name="stream">A System.IO.Stream object used to write to a file.</param>
        </member>
        <member name="M:Tdo.Common.Utility.WriteTdoEntityXml``1(``0,System.IO.TextWriter)">
            <summary>
            Writes the current contents of the tdoEntityToSerialize as XML using the specified file.
            </summary>
            <typeparam name="TdoEntityType">Type of ITdoEntity to serialize</typeparam>
            <param name="tdoEntityToSerialize">TdoEntity to serialize</param>
            <param name="textWriter">The System.IO.TextWriter object with which to write.</param>
        </member>
        <member name="M:Tdo.Common.Utility.WriteTdoEntityXml``1(``0,System.Xml.XmlWriter)">
            <summary>
            Writes the current contents of the tdoEntityToSerialize as XML using the specified file.
            </summary>
            <typeparam name="TdoEntityType">Type of ITdoEntity to serialize</typeparam>
            <param name="tdoEntityToSerialize">TdoEntity to serialize</param>
            <param name="xmlWriter">The System.Xml.XmlWriter with which to write.</param>
        </member>
        <member name="M:Tdo.Common.Utility.ReadTdoEntityFromXml``1(System.String)">
            <summary>
            Reads XML data into the TdoEntityType using the specified file.
            </summary>
            <typeparam name="TdoEntityType">Type of ITdoEntity to deserialize</typeparam>
            <param name="fileName">The filename (including the path) from which to read.</param>
            <returns>TdoEntityType with data</returns>
        </member>
        <member name="M:Tdo.Common.Utility.ReadTdoEntityFromXml``1(System.IO.Stream)">
            <summary>
            Reads XML data into the TdoEntityType using the specified System.IO.Stream.
            </summary>
            <typeparam name="TdoEntityType">Type of ITdoEntity to deserialize</typeparam>
            <param name="stream">An object that derives from System.IO.Stream.</param>
            <returns>TdoEntityType with data</returns>
        </member>
        <member name="M:Tdo.Common.Utility.ReadTdoEntityFromXml``1(System.IO.TextReader)">
            <summary>
            Reads XML data into the TdoEntityType using the specified System.IO.TextReader.
            </summary>
            <typeparam name="TdoEntityType">Type of ITdoEntity to deserialize</typeparam>
            <param name="textReader">The System.IO.TextReader from which to read.</param>
            <returns>TdoEntityType with data</returns>
        </member>
        <member name="M:Tdo.Common.Utility.ReadTdoEntityFromXml``1(System.Xml.XmlReader)">
            <summary>
            Reads XML data into the TdoEntityType using the specified System.IO.XmlReader.
            </summary>
            <typeparam name="TdoEntityType">Type of ITdoEntity to deserialize</typeparam>
            <param name="xmlReader">The System.IO.XmlReader from which to read.</param>
            <returns>TdoEntityType with data</returns>
        </member>
        <member name="M:Tdo.Common.Utility.WriteTdoHelperToXml``1(``0,System.String)">
            <summary>
            Writes the current contents of the tdoHelperToSerialize as XML using the specified file.
            </summary>
            <typeparam name="TdoHelperType">Type of ITdoHelper to serialize</typeparam>
            <param name="tdoHelperToSerialize">TdoHelper to serialize</param>
            <param name="fileName">The file to which to write the XML data.</param>
        </member>
        <member name="M:Tdo.Common.Utility.WriteTdoHelperToXml``1(``0,System.IO.Stream)">
            <summary>
            Writes the current contents of the tdoHelperToSerialize as XML using the specified System.IO.Stream.
            </summary>
            <typeparam name="TdoHelperType">Type of ITdoHelper to serialize</typeparam>
            <param name="tdoHelperToSerialize">TdoHelper to serialize</param>
            <param name="stream">A System.IO.Stream object used to write to a file.</param>
        </member>
        <member name="M:Tdo.Common.Utility.WriteTdoHelperToXml``1(``0,System.IO.TextWriter)">
            <summary>
            Writes the current contents of the tdoHelperToSerialize as XML using the specified System.IO.TextWriter.
            </summary>
            <typeparam name="TdoHelperType">Type of ITdoHelper to serialize</typeparam>
            <param name="tdoHelperToSerialize">TdoHelper to serialize</param>
            <param name="textWriter">A System.IO.TextWriter object used to write to a file.</param>
        </member>
        <member name="M:Tdo.Common.Utility.WriteTdoHelperToXml``1(``0,System.Xml.XmlWriter)">
            <summary>
            Writes the current contents of the tdoHelperToSerialize as XML using the specified System.IO.XmlWriter.
            </summary>
            <typeparam name="TdoHelperType">Type of ITdoHelper to serialize</typeparam>
            <param name="tdoHelperToSerialize">TdoHelper to serialize</param>
            <param name="xmlWriter">A System.IO.XmlWriter object used to write to a file.</param>
        </member>
        <member name="M:Tdo.Common.Utility.ReadTdoHelperFromXml``1(System.String)">
            <summary>
            Reads XML data into the TdoHelperType using the specified file.
            </summary>
            <typeparam name="TdoHelperType">Type of ITdoHelper to deserialize</typeparam>
            <param name="fileName">The filename (including the path) from which to read.</param>
            <returns>TdoHelperType with data</returns>
        </member>
        <member name="M:Tdo.Common.Utility.ReadTdoHelperFromXml``1(System.IO.Stream)">
            <summary>
            Reads XML data into the TdoHelperType using the specified System.IO.Stream.
            </summary>
            <typeparam name="TdoHelperType">Type of ITdoHelper to deserialize</typeparam>
            <param name="stream">An object that derives from System.IO.Stream.</param>
            <returns>TdoHelperType with data</returns>
        </member>
        <member name="M:Tdo.Common.Utility.ReadTdoHelperFromXml``1(System.Xml.XmlReader)">
            <summary>
            Reads XML data into the TdoHelperType using the specified System.IO.XmlReader.
            </summary>
            <typeparam name="TdoHelperType">Type of ITdoHelper to deserialize</typeparam>
            <param name="xmlReader">The System.IO.XmlReader from which to read.</param>
            <returns>TdoHelperType with data</returns>
        </member>
        <member name="M:Tdo.Common.Utility.ReadTdoHelperFromXml``1(System.IO.TextReader)">
            <summary>
            Reads XML data into the TdoHelperType using the specified System.IO.TextReader.
            </summary>
            <typeparam name="TdoHelperType">Type of ITdoHelper to deserialize</typeparam>
            <param name="textReader">The System.IO.TextReader from which to read.</param>
            <returns>TdoHelperType with data</returns>
        </member>
        <member name="T:Tdo.Common.Helper.ITdoHelper">
            <summary>
            Interface ITdoHelper for all TDOHelper Classes
            </summary>
        </member>
        <member name="M:Tdo.Common.Helper.ITdoHelper.OpenConnection">
            <summary>
            <code>Open DataBase Connection</code>
            </summary>
        </member>
        <member name="M:Tdo.Common.Helper.ITdoHelper.CloseConnection">
            <summary>
            Close DataBase Connection
            </summary>
        </member>
        <member name="M:Tdo.Common.Helper.ITdoHelper.BeginTransaction(System.Data.IsolationLevel,System.String)">
            <summary>
            Begin an commandText-transaction
            </summary>
            <param name="isolationLevel">Transaction Isolation Level</param>
            <param name="transactionName">Transaction Name</param>
        </member>
        <member name="M:Tdo.Common.Helper.ITdoHelper.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            Begin a commandText-transaction
            </summary>
            <param name="isolationLevel">Transaction Isolation Level</param>
        </member>
        <member name="M:Tdo.Common.Helper.ITdoHelper.BeginTransaction">
            <summary>
            Begin a commandText-transaction
            </summary>
        </member>
        <member name="M:Tdo.Common.Helper.ITdoHelper.BeginTransaction(System.String)">
            <summary>
            Begin a commandText-transaction
            </summary>
            <param name="transactionName">Transaction Name</param>
        </member>
        <member name="M:Tdo.Common.Helper.ITdoHelper.CommitTransaction">
            <summary>
            Commit current transaction
            </summary>
        </member>
        <member name="M:Tdo.Common.Helper.ITdoHelper.RollBackTransaction">
            <summary>
            Commit current transaction
            </summary>
        </member>
        <member name="M:Tdo.Common.Helper.ITdoHelper.RollBackTransaction(System.String)">
            <summary>
            Commit transactionName transaction
            </summary>
            <param name="transactionName">Transaction Name</param>
        </member>
        <member name="M:Tdo.Common.Helper.ITdoHelper.CreateCommand(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Creates and returns a System.Data.SqlClient.SqlCommand object associated supplied values.
            </summary>
            <param name="commandText">Transact-SQL statement or stored procedure to execute at the data source.</param>
            <param name="sqlParameters">The parameters of the Transact-SQL statement or stored procedure. The default is an empty collection.</param>
            <returns></returns>
        </member>
        <member name="M:Tdo.Common.Helper.ITdoHelper.CreateCommand(System.String,System.Data.CommandType,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Creates and returns a System.Data.SqlClient.SqlCommand object associated supplied values.
            </summary>
            <param name="commandText">Transact-SQL statement or stored procedure to execute at the data source.</param>
            <param name="commandType">a value indicating how the System.Data.SqlClient.SqlCommand.CommandText property is to be interpreted.</param>
            <param name="sqlParameters">The parameters of the Transact-SQL statement or stored procedure. The default is an empty collection.</param>
            <returns></returns>
        </member>
        <member name="M:Tdo.Common.Helper.ITdoHelper.CreateCommand(System.String,System.Data.CommandType,System.Data.Sql.SqlNotificationRequest,System.Boolean,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Creates and returns a System.Data.SqlClient.SqlCommand object associated supplied values.
            </summary>
            <param name="commandText">Transact-SQL statement or stored procedure to execute at the data source.</param>
            <param name="commandType">a value indicating how the System.Data.SqlClient.SqlCommand.CommandText property is to be interpreted.</param>
            <param name="sqlNotificationRequest">a value that specifies the System.Data.Sql.SqlNotificationRequest object bound to this command.</param>
            <param name="notificationAutoEnlist">[To be supplied.]</param>
            <param name="sqlParameters">The parameters of the Transact-SQL statement or stored procedure. The default is an empty collection.</param>
            <returns></returns>
        </member>
        <member name="M:Tdo.Common.Helper.ITdoHelper.PrepareAutomaticConnection">
            <summary>
            Prepare Automatic Connection.
            </summary>
        </member>
        <member name="M:Tdo.Common.Helper.ITdoHelper.PrepareAutomaticTransaction">
            <summary>
            Prepare Automatic Transaction.
            </summary>
        </member>
        <member name="M:Tdo.Common.Helper.ITdoHelper.UnPrepareAutomaticConnection">
            <summary>
            Unprepare Automatic Connection.
            </summary>
        </member>
        <member name="M:Tdo.Common.Helper.ITdoHelper.UnPrepareAutomaticTransaction">
            <summary>
            UnPrepare Automatic Transaction.
            </summary>
        </member>
        <member name="M:Tdo.Common.Helper.ITdoHelper.internalStatementCompletedEventHandler(System.Object,System.Data.StatementCompletedEventArgs)">
            <summary>
            [Internal use only].
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:Tdo.Common.Helper.ITdoHelper.ConnectionString">
            <summary>
            Sql Connection String
            </summary>
        </member>
        <member name="P:Tdo.Common.Helper.ITdoHelper.Transaction">
            <summary>
            Reference for current SqlTransaction
            </summary>
        </member>
        <member name="P:Tdo.Common.Helper.ITdoHelper.Connection">
            <summary>
            Get SqlConnection reference
            </summary>
        </member>
        <member name="P:Tdo.Common.Helper.ITdoHelper.CommandTimeOut">
            <summary>
            Get or Set SqlCommand time out (default is 60 seconds)
            </summary>
        </member>
        <member name="P:Tdo.Common.Helper.ITdoHelper.TdoTables">
            <summary>
            Returns an array of ITdoTable
            </summary>
        </member>
        <member name="P:Tdo.Common.Helper.ITdoHelper.TdoViews">
            <summary>
            Returns an array of ITdoView
            </summary>
        </member>
        <member name="P:Tdo.Common.Helper.ITdoHelper.TdoStoredProcedures">
            <summary>
            Returns an array of ITdoStoredProcedure
            </summary>
        </member>
        <member name="P:Tdo.Common.Helper.ITdoHelper.SqlCommandAsyncStore">
            <summary>
            SqlCommand HashTable with async SqlCommands (Begin/End Methods) 
            </summary>
        </member>
        <member name="P:Tdo.Common.Helper.ITdoHelper.AutomaticOpenCloseConnection">
            <summary>
            Gets or Sets if TdoHelper must Open and Close Connection automatically.
            </summary>
        </member>
        <member name="P:Tdo.Common.Helper.ITdoHelper.AutomaticTransaction">
            <summary>
            Gets or Sets a bool value indicating if TdoHelper must execute Command automatically in Transaction.
            </summary>
        </member>
        <member name="P:Tdo.Common.Helper.ITdoHelper.ServerVersion">
            <summary>
            Get Sql Server version
            </summary>
        </member>
        <member name="E:Tdo.Common.Helper.ITdoHelper.FillError">
            <summary>
            Occurs during Fill operations with errors.
            </summary>
        </member>
        <member name="E:Tdo.Common.Helper.ITdoHelper.ConnectionStateChange">
            <summary>
            Occurs when SQL Server connection state change.
            </summary>
        </member>
        <member name="E:Tdo.Common.Helper.ITdoHelper.InfoMessage">
            <summary>
            Occurs when SQL Server returns a warning or informational message.
            </summary>
        </member>
        <member name="E:Tdo.Common.Helper.ITdoHelper.RowUpdated">
            <summary>
            Occurs during Update after a command is executed against the data source. The attempt to update is made, so the event fires. 
            </summary>
        </member>
        <member name="E:Tdo.Common.Helper.ITdoHelper.RowUpdating">
            <summary>
            Occurs during Update after a command is executed against the data source. The attempt to update is made, so the event fires. 
            </summary>
        </member>
        <member name="E:Tdo.Common.Helper.ITdoHelper.StatementCompleted">
            <summary>
            Occurs after a command is executed against the data source. 
            </summary>
        </member>
        <member name="T:Tdo.Common.Programmability.TdoTableFunctionBase">
            <summary>
            TdoTableFunctionBase class. It's the default class of all Table-valued Functions.
            </summary>
        </member>
        <member name="T:Tdo.Common.Programmability.ITdoTableFunction">
            <summary>
            Common Interface for all Table-valued Functions.
            </summary>
        </member>
        <member name="M:Tdo.Common.Programmability.ITdoTableFunction.AssignTableParameters(System.Data.SqlTypes.INullable[])">
            <summary>
            Quickly assigns table parameter values with supplied Sql Values.
            </summary>
            <param name="tableParameters">INullable parameters array to assign to Table Parameters</param>
            <remarks>To assign Null values use SqlXxxxx.Null like SqlString.Null and SqlInt32.Null</remarks>
        </member>
        <member name="P:Tdo.Common.Programmability.ITdoTableFunction.TableParameters">
            <summary>
            Table-valued function parameters array.
            </summary>
        </member>
        <member name="F:Tdo.Common.Programmability.TdoTableFunctionBase.pTableParameters">
            <summary>
            Table-valued SqlParamaters Array
            </summary>
        </member>
        <member name="M:Tdo.Common.Programmability.TdoTableFunctionBase.#ctor">
            <summary>
            TdoTableFunctionBase Default Constructor
            </summary>
        </member>
        <member name="M:Tdo.Common.Programmability.TdoTableFunctionBase.Tdo#Common#Programmability#ITdoTableFunction#AssignTableParameters(System.Data.SqlTypes.INullable[])">
            <summary>
            Quickly assigns table parameter values with supplied Sql Values.
            </summary>
            <param name="tableParameters">INullable parameters array to assign to Table Parameters</param>
            <remarks>To assign Null values use SqlXxxxx.Null like SqlString.Null and SqlInt32.Null</remarks>
            <exception cref="T:System.ArgumentException">thrown when tableParameters array length does not match TableParameters array length</exception>
        </member>
        <member name="M:Tdo.Common.Programmability.TdoTableFunctionBase.FullSelectEntityName">
            <summary>
            Returns full entity name.
            </summary>
            <returns>string with full entity name.</returns>
        </member>
        <member name="P:Tdo.Common.Programmability.TdoTableFunctionBase.Tdo#Common#Programmability#ITdoTableFunction#TableParameters">
            <summary>
            References Table-valued SqlParamaters Array
            </summary>
        </member>
        <member name="T:Tdo.Common.TdoTypes.TdoInt32">
            <summary>
            TdoInt32 class. Allows to keep values of SqlInt32 type
            </summary>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoInt32.#ctor">
            <summary>
            Default constructor for TdoInt32 Class
            </summary>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoInt32.#ctor(System.Data.SqlTypes.SqlInt32,System.String)">
            <summary>
            Constructor for TdoInt32 Class.
            </summary>
            <param name="value">Column constant value</param>
            <param name="columnAlias">Alias column.</param>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoInt32.#ctor(System.Boolean,System.Boolean,System.Int64,System.Int64,System.String,System.String,System.Int32,System.Boolean,System.Boolean,Tdo.Common.Entities.ITdoEntity)">
            <summary>
            Constructor for TdoInt32 class
            </summary>
            <param name="allowDBNull">Boolean that indicates wether the field can be NULL</param>
            <param name="autoIncrement">Boolean that indicates if the field is IDENTITY (auto-increase)</param>
            <param name="autoIncrementSeed">Long that indicates how much is increasing the IDENTITY field</param>
            <param name="autoIncrementStep">Long that indicates the start actualValue of the IDENTITY field </param>
            <param name="caption">String that indicates the heading/columnAlias of the field</param>
            <param name="columnName">String that indicates the name of the column (field)</param>
            <param name="maxLength">Integer that indicates the maximum length of the field (-1,field without limit)</param>
            <param name="readOnly">Boolean that indicates if the field is only reading</param>
            <param name="unique">Boolean that indicates if a unique constraint exists on that field</param>
            <param name="tdoEntity">TdoEntity referenced to the class that contains the field</param>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoInt32.Equals(System.Object)">
            <summary>
            Comparison operator Equals
            </summary>
            <param name="obj">Object to compare</param>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoInt32.GetHashCode">
            <summary>
            Returns Hash code
            </summary>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoInt32.ClonedValue(System.Data.SqlTypes.SqlInt32)">
            <summary>
            Return a copy of SqlInt32 structure
            </summary>
            <param name="toClone">SqlInt32 to copy</param>
            <returns>SqlInt32 structure copied</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoInt32.Clone">
            <summary>
            Creates a copy of this TdoInt32 object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoInt32.ToString">
            <summary>
            Returns the string representation of the content of the field
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoInt32.op_Equality(Tdo.Common.TdoTypes.TdoInt32,System.Int32)">
            <summary>
            Comparison operator Equals
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoInt32.op_Equality(Tdo.Common.TdoTypes.TdoInt32,Tdo.Common.TdoTypes.ITdoColumn)">
            <summary>
            Comparison operator Equals
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoInt32.op_Equality(Tdo.Common.TdoTypes.TdoInt32,System.DBNull)">
            <summary>
            Comparison operator is (null)
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoInt32.op_Equality(Tdo.Common.TdoTypes.TdoInt32,Tdo.Common.TdoSqlExpressionDom.TdoWhereRange)">
            <summary>
            Comparison operator BetWeen
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="range">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoInt32.op_Equality(Tdo.Common.TdoTypes.TdoInt32,Tdo.Common.TdoSqlExpressionDom.TdoWheresetOfValues)">
            <summary>
            Comparison operator IN
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="setOfValues">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoInt32.op_Equality(Tdo.Common.TdoTypes.TdoInt32,System.Object[])">
            <summary>
            Comparison operator IN
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="setOfValues">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoInt32.op_GreaterThan(Tdo.Common.TdoTypes.TdoInt32,System.Int32)">
            <summary>
            Comparison operator Greater
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoInt32.op_GreaterThan(Tdo.Common.TdoTypes.TdoInt32,Tdo.Common.TdoTypes.ITdoColumn)">
            <summary>
            Comparison operator Greater
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoInt32.op_GreaterThanOrEqual(Tdo.Common.TdoTypes.TdoInt32,System.Int32)">
            <summary>
            Comparison operator Greater or Equal
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoInt32.op_GreaterThanOrEqual(Tdo.Common.TdoTypes.TdoInt32,Tdo.Common.TdoTypes.ITdoColumn)">
            <summary>
            Comparison operator Greater or Equal
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoInt32.op_LessThan(Tdo.Common.TdoTypes.TdoInt32,System.Int32)">
            <summary>
            Comparison operator Lower
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoInt32.op_LessThan(Tdo.Common.TdoTypes.TdoInt32,Tdo.Common.TdoTypes.ITdoColumn)">
            <summary>
            Comparison operator Lower
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoInt32.op_LessThanOrEqual(Tdo.Common.TdoTypes.TdoInt32,System.Int32)">
            <summary>
            Comparison operator Lower or Equal
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoInt32.op_LessThanOrEqual(Tdo.Common.TdoTypes.TdoInt32,Tdo.Common.TdoTypes.ITdoColumn)">
            <summary>
            Comparison operator Lower or Equal
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoInt32.op_Inequality(Tdo.Common.TdoTypes.TdoInt32,Tdo.Common.TdoSqlExpressionDom.TdoWheresetOfValues)">
            <summary>
            Comparison operator NOT IN
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="setOfValues">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoInt32.op_Inequality(Tdo.Common.TdoTypes.TdoInt32,Tdo.Common.TdoTypes.ITdoColumn)">
            <summary>
            Comparison operator NotEqual
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoInt32.op_Inequality(Tdo.Common.TdoTypes.TdoInt32,System.Object[])">
            <summary>
            Comparison operator NOT IN
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="setOfValues">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoInt32.op_Inequality(Tdo.Common.TdoTypes.TdoInt32,Tdo.Common.TdoSqlExpressionDom.TdoWhereRange)">
            <summary>
            Comparison operator Not BetWeen
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="range">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoInt32.op_Inequality(Tdo.Common.TdoTypes.TdoInt32,System.Int32)">
            <summary>
            Comparison operator NotEqual 
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoInt32.op_Inequality(Tdo.Common.TdoTypes.TdoInt32,System.DBNull)">
            <summary>
            Comparison operator is not (null)
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="P:Tdo.Common.TdoTypes.TdoInt32.ObjectValue">
            <summary>
            Get or Set Value property of Object type
            </summary>
        </member>
        <member name="P:Tdo.Common.TdoTypes.TdoInt32.SqlDbType">
            <summary>
            System.Data.SqlDbType of ITdoColumn
            </summary>
        </member>
        <member name="T:Tdo.Common.TdoSqlExpressionDom.TdoWhereRange">
            <summary>
            TDOSqlRange class used for the intervals in the Between and Not Between clause in TDOSqlExpressions
            </summary>
        </member>
        <member name="M:Tdo.Common.TdoSqlExpressionDom.TdoWhereRange.#ctor(System.Object,System.Object)">
            <summary>
            Constructor of TDOSqlRange class
            </summary>
            <param name="from">"From" part of the Between clause</param>
            <param name="to">"To" part  of the Between clause </param>
        </member>
        <member name="P:Tdo.Common.TdoSqlExpressionDom.TdoWhereRange.From">
            <summary>
            Returns the "from" part in the interval
            </summary>
        </member>
        <member name="P:Tdo.Common.TdoSqlExpressionDom.TdoWhereRange.To">
            <summary>
            Returns the "to" part in the interval
            </summary>
        </member>
        <member name="T:Tdo.Common.TdoTypes.TdoInt64">
            <summary>
            TdoInt64 class. Allows to keep SqlInt64 actualValue type 
            </summary>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoInt64.#ctor">
            <summary>
            Default constructor for TdoInt64 Class
            </summary>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoInt64.#ctor(System.Data.SqlTypes.SqlInt64,System.String)">
            <summary>
            Constructor for TdoInt64 Class.
            </summary>
            <param name="value">Column constant value</param>
            <param name="columnAlias">Alias column.</param>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoInt64.#ctor(System.Boolean,System.Boolean,System.Int64,System.Int64,System.String,System.String,System.Int32,System.Boolean,System.Boolean,Tdo.Common.Entities.ITdoEntity)">
            <summary>
            Constructor for TdoInt64 class
            </summary>
            <param name="allowDBNull">Boolean that indicates wether the field can be NULL</param>
            <param name="autoIncrement">Boolean that indicates if the field is IDENTITY (auto-increase)</param>
            <param name="autoIncrementSeed">Long that indicates how much is increasing the IDENTITY field</param>
            <param name="autoIncrementStep">Long that indicates the start actualValue of the IDENTITY field </param>
            <param name="caption">String that indicates the heading/columnAlias of the field</param>
            <param name="columnName">String that indicates the name of the column (field)</param>
            <param name="maxLength">Integer that indicates the maximum length of the field (-1,field without limit)</param>
            <param name="readOnly">Boolean that indicates if the field is only reading</param>
            <param name="unique">Boolean that indicates if a unique constraint exists on that field</param>
            <param name="tdoEntity">TdoEntity referenced to the class that contains the field</param>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoInt64.Equals(System.Object)">
            <summary>
            Comparison operator Equals
            </summary>
            <param name="obj">Object to compare</param>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoInt64.GetHashCode">
            <summary>
            Returns Hash code
            </summary>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoInt64.ClonedValue(System.Data.SqlTypes.SqlInt64)">
            <summary>
            Return a copy of SqlInt64 structure
            </summary>
            <param name="toClone">SqlInt64 to copy</param>
            <returns>SqlInt64 structure copied</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoInt64.Clone">
            <summary>
            Creates a copy of this TdoInt64 object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoInt64.ToString">
            <summary>
            Returns the string representation of the content of the field
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoInt64.op_Equality(Tdo.Common.TdoTypes.TdoInt64,System.Int64)">
            <summary>
            Comparison operator Equals
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoInt64.op_Equality(Tdo.Common.TdoTypes.TdoInt64,Tdo.Common.TdoTypes.ITdoColumn)">
            <summary>
            Comparison operator Equals
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoInt64.op_Equality(Tdo.Common.TdoTypes.TdoInt64,System.DBNull)">
            <summary>
            Comparison operator is (null)
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoInt64.op_Equality(Tdo.Common.TdoTypes.TdoInt64,Tdo.Common.TdoSqlExpressionDom.TdoWhereRange)">
            <summary>
            Comparison operator BetWeen
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="range">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoInt64.op_Equality(Tdo.Common.TdoTypes.TdoInt64,Tdo.Common.TdoSqlExpressionDom.TdoWheresetOfValues)">
            <summary>
            Comparison operator IN
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="setOfValues">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoInt64.op_Equality(Tdo.Common.TdoTypes.TdoInt64,System.Object[])">
            <summary>
            Comparison operator IN
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="setOfValues">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoInt64.op_GreaterThan(Tdo.Common.TdoTypes.TdoInt64,System.Int64)">
            <summary>
            Comparison operator Greater
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoInt64.op_GreaterThan(Tdo.Common.TdoTypes.TdoInt64,Tdo.Common.TdoTypes.ITdoColumn)">
            <summary>
            Comparison operator Greater
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoInt64.op_GreaterThanOrEqual(Tdo.Common.TdoTypes.TdoInt64,System.Int64)">
            <summary>
            Comparison operator Greater or Equal
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoInt64.op_GreaterThanOrEqual(Tdo.Common.TdoTypes.TdoInt64,Tdo.Common.TdoTypes.ITdoColumn)">
            <summary>
            Comparison operator Greater or Equal
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoInt64.op_LessThan(Tdo.Common.TdoTypes.TdoInt64,System.Int64)">
            <summary>
            Comparison operator Lower
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoInt64.op_LessThan(Tdo.Common.TdoTypes.TdoInt64,Tdo.Common.TdoTypes.ITdoColumn)">
            <summary>
            Comparison operator Lower
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoInt64.op_LessThanOrEqual(Tdo.Common.TdoTypes.TdoInt64,System.Int64)">
            <summary>
            Comparison operator Lower or Equal
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoInt64.op_LessThanOrEqual(Tdo.Common.TdoTypes.TdoInt64,Tdo.Common.TdoTypes.ITdoColumn)">
            <summary>
            Comparison operator Lower or Equal
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoInt64.op_Inequality(Tdo.Common.TdoTypes.TdoInt64,Tdo.Common.TdoSqlExpressionDom.TdoWheresetOfValues)">
            <summary>
            Comparison operator NOT IN
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="setOfValues">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoInt64.op_Inequality(Tdo.Common.TdoTypes.TdoInt64,Tdo.Common.TdoTypes.ITdoColumn)">
            <summary>
            Comparison operator NotEqual
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoInt64.op_Inequality(Tdo.Common.TdoTypes.TdoInt64,System.Object[])">
            <summary>
            Comparison operator NOT IN
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="setOfValues">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoInt64.op_Inequality(Tdo.Common.TdoTypes.TdoInt64,Tdo.Common.TdoSqlExpressionDom.TdoWhereRange)">
            <summary>
            Comparison operator Not BetWeen
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="range">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoInt64.op_Inequality(Tdo.Common.TdoTypes.TdoInt64,System.Int64)">
            <summary>
            Comparison operator NotEqual 
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoInt64.op_Inequality(Tdo.Common.TdoTypes.TdoInt64,System.DBNull)">
            <summary>
            Comparison operator is not (null)
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="P:Tdo.Common.TdoTypes.TdoInt64.ObjectValue">
            <summary>
            Get or Set Value property of Object type
            </summary>
        </member>
        <member name="P:Tdo.Common.TdoTypes.TdoInt64.SqlDbType">
            <summary>
            System.Data.SqlDbType of ITdoColumn
            </summary>
        </member>
        <member name="M:Tdo.Common.TdoAsyncResult.#ctor">
            <summary>
            Internal default constructor
            </summary>
        </member>
        <member name="P:Tdo.Common.TdoAsyncResult.AsyncState">
            <summary>
            Gets a user-defined object that qualifies or contains information about an asynchronous operation.
            </summary>
            <value></value>
            <returns>A user-defined object that qualifies or contains information about an asynchronous operation.</returns>
        </member>
        <member name="P:Tdo.Common.TdoAsyncResult.AsyncWaitHandle">
            <summary>
            Gets a <see cref="T:System.Threading.WaitHandle"></see> that is used to wait for an asynchronous operation to complete.
            </summary>
            <value></value>
            <returns>A <see cref="T:System.Threading.WaitHandle"></see> that is used to wait for an asynchronous operation to complete.</returns>
        </member>
        <member name="P:Tdo.Common.TdoAsyncResult.CompletedSynchronously">
            <summary>
            Gets an indication of whether the asynchronous operation completed synchronously.
            </summary>
            <value></value>
            <returns>true if the asynchronous operation completed synchronously; otherwise, false.</returns>
        </member>
        <member name="P:Tdo.Common.TdoAsyncResult.IsCompleted">
            <summary>
            Gets an indication whether the asynchronous operation has completed.
            </summary>
            <value></value>
            <returns>true if the operation is complete; otherwise, false.</returns>
        </member>
        <member name="T:Tdo.Common.TdoTypes.TdoDateTime">
            <summary>
            TdoDateTime class. Allows to keep SqlDateTime actualValue type 
            </summary>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoDateTime.#ctor">
            <summary>
            Default constructor for TdoDateTime Class
            </summary>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoDateTime.#ctor(System.Data.SqlTypes.SqlDateTime,System.String)">
            <summary>
            Constructor for TdoDateTime Class.
            </summary>
            <param name="value">Column constant value</param>
            <param name="columnAlias">Alias column.</param>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoDateTime.#ctor(System.Boolean,System.Boolean,System.Int64,System.Int64,System.String,System.String,System.Int32,System.Boolean,System.Boolean,Tdo.Common.Entities.ITdoEntity)">
            <summary>
            Constructor for TdoDateTime class
            </summary>
            <param name="allowDBNull">Boolean that indicates wether the field can be NULL</param>
            <param name="autoIncrement">Boolean that indicates if the field is IDENTITY (auto-increase)</param>
            <param name="autoIncrementSeed">Long that indicates how much is increasing the IDENTITY field</param>
            <param name="autoIncrementStep">Long that indicates the start actualValue of the IDENTITY field </param>
            <param name="caption">String that indicates the heading/columnAlias of the field</param>
            <param name="columnName">String that indicates the name of the column (field)</param>
            <param name="maxLength">Integer that indicates the maximum length of the field (-1,field without limit)</param>
            <param name="readOnly">Boolean that indicates if the field is only reading</param>
            <param name="unique">Boolean that indicates if a unique constraint exists on that field</param>
            <param name="tdoEntity">TdoEntity referenced to the class that contains the field</param>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoDateTime.Equals(System.Object)">
            <summary>
            Comparison operator Equals
            </summary>
            <param name="obj">Object to compare</param>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoDateTime.GetHashCode">
            <summary>
            Returns Hash code
            </summary>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoDateTime.ClonedValue(System.Data.SqlTypes.SqlDateTime)">
            <summary>
            Return a copy of SqlDateTime structure
            </summary>
            <param name="toClone">SqlDateTime to copy</param>
            <returns>SqlDateTime structure copied</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoDateTime.Clone">
            <summary>
            Creates a copy of this TdoString object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoDateTime.ToString">
            <summary>
            Returns the string representation of the content of the field
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoDateTime.op_Equality(Tdo.Common.TdoTypes.TdoDateTime,System.DateTime)">
            <summary>
            Comparison operator Equals
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoDateTime.op_Equality(Tdo.Common.TdoTypes.TdoDateTime,Tdo.Common.TdoTypes.ITdoColumn)">
            <summary>
            Comparison operator Equals
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoDateTime.op_Equality(Tdo.Common.TdoTypes.TdoDateTime,System.DBNull)">
            <summary>
            Comparison operator is (null)
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoDateTime.op_Equality(Tdo.Common.TdoTypes.TdoDateTime,Tdo.Common.TdoSqlExpressionDom.TdoWhereRange)">
            <summary>
            Comparison operator BetWeen
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="range">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoDateTime.op_Equality(Tdo.Common.TdoTypes.TdoDateTime,Tdo.Common.TdoSqlExpressionDom.TdoWheresetOfValues)">
            <summary>
            Comparison operator IN
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="setOfValues">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoDateTime.op_Equality(Tdo.Common.TdoTypes.TdoDateTime,System.Object[])">
            <summary>
            Comparison operator IN
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="setOfValues">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoDateTime.op_GreaterThan(Tdo.Common.TdoTypes.TdoDateTime,System.DateTime)">
            <summary>
            Comparison operator Greater
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoDateTime.op_GreaterThan(Tdo.Common.TdoTypes.TdoDateTime,Tdo.Common.TdoTypes.ITdoColumn)">
            <summary>
            Comparison operator Greater
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoDateTime.op_GreaterThanOrEqual(Tdo.Common.TdoTypes.TdoDateTime,System.DateTime)">
            <summary>
            Comparison operator Greater or Equal
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoDateTime.op_GreaterThanOrEqual(Tdo.Common.TdoTypes.TdoDateTime,Tdo.Common.TdoTypes.ITdoColumn)">
            <summary>
            Comparison operator Greater or Equal
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoDateTime.op_LessThan(Tdo.Common.TdoTypes.TdoDateTime,System.DateTime)">
            <summary>
            Comparison operator Lower
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoDateTime.op_LessThan(Tdo.Common.TdoTypes.TdoDateTime,Tdo.Common.TdoTypes.ITdoColumn)">
            <summary>
            Comparison operator Lower
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoDateTime.op_LessThanOrEqual(Tdo.Common.TdoTypes.TdoDateTime,System.DateTime)">
            <summary>
            Comparison operator Lower or Equal
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoDateTime.op_LessThanOrEqual(Tdo.Common.TdoTypes.TdoDateTime,Tdo.Common.TdoTypes.ITdoColumn)">
            <summary>
            Comparison operator Lower or Equal
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoDateTime.op_Inequality(Tdo.Common.TdoTypes.TdoDateTime,Tdo.Common.TdoSqlExpressionDom.TdoWheresetOfValues)">
            <summary>
            Comparison operator NOT IN
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="setOfValues">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoDateTime.op_Inequality(Tdo.Common.TdoTypes.TdoDateTime,Tdo.Common.TdoTypes.ITdoColumn)">
            <summary>
            Comparison operator NotEqual
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoDateTime.op_Inequality(Tdo.Common.TdoTypes.TdoDateTime,System.Object[])">
            <summary>
            Comparison operator NOT IN
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="setOfValues">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoDateTime.op_Inequality(Tdo.Common.TdoTypes.TdoDateTime,Tdo.Common.TdoSqlExpressionDom.TdoWhereRange)">
            <summary>
            Comparison operator Not BetWeen
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="range">range on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoDateTime.op_Inequality(Tdo.Common.TdoTypes.TdoDateTime,System.DateTime)">
            <summary>
            Comparison operator NotEqual 
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="M:Tdo.Common.TdoTypes.TdoDateTime.op_Inequality(Tdo.Common.TdoTypes.TdoDateTime,System.DBNull)">
            <summary>
            Comparison operator is not (null)
            </summary>
            <param name="left">Parameter on the left of the operator</param>
            <param name="right">Parameter on the right of the operator</param>
            <returns>Returns an expression like TdoSqlExpression useful to convert the where clause to string</returns>
        </member>
        <member name="P:Tdo.Common.TdoTypes.TdoDateTime.ObjectValue">
            <summary>
            Get or Set Value property of Object type
            </summary>
        </member>
        <member name="P:Tdo.Common.TdoTypes.TdoDateTime.SqlDbType">
            <summary>
            System.Data.SqlDbType of ITdoColumn
            </summary>
        </member>
        <member name="T:Tdo.Common.TdoSqlExpressionDom.TdoParameterCollection">
            <summary>
            TdoParameterCollection class to create parametric queries
            </summary>
        </member>
        <member name="F:Tdo.Common.TdoSqlExpressionDom.TdoParameterCollection.prefix">
            <summary>
            Prefix for parameters name
            </summary>
        </member>
        <member name="F:Tdo.Common.TdoSqlExpressionDom.TdoParameterCollection.parametercollection">
            <summary>
            Contains the parameters list to construct the Where clause
            </summary>
        </member>
        <member name="M:Tdo.Common.TdoSqlExpressionDom.TdoParameterCollection.#ctor">
            <summary>
            default constructor of TdoParameterCollection class
            </summary>
        </member>
        <member name="M:Tdo.Common.TdoSqlExpressionDom.TdoParameterCollection.NextParamName">
            <summary>
            Function that returns the name of the next useful parameter		
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tdo.Common.TdoSqlExpressionDom.TdoParameterCollection.Reset">
            <summary>
            Empty the Parameter Collection
            </summary>
        </member>
        <member name="P:Tdo.Common.TdoSqlExpressionDom.TdoParameterCollection.ParameterCollection">
            <summary>
            Returns or Sets an ArrayList containing a SqlParameter Collection
            </summary>
        </member>
        <member name="T:Tdo.Common.TdoSqlExpressionDom.Join">
            <summary>
            Join Operators
            </summary>
        </member>
        <member name="F:Tdo.Common.TdoSqlExpressionDom.Join.InnerJoin">
            <summary>
            INNER JOIN OPERATOR
            </summary>
        </member>
        <member name="F:Tdo.Common.TdoSqlExpressionDom.Join.LeftOuterJoin">
            <summary>
            LEFT OUTER JOIN OPERATOR
            </summary>
        </member>
        <member name="F:Tdo.Common.TdoSqlExpressionDom.Join.RightOuterJoin">
            <summary>
            RIGHT OUTER JOIN OPERATOR
            </summary>
        </member>
        <member name="F:Tdo.Common.TdoSqlExpressionDom.Join.FullOuterJoin">
            <summary>
            FULL OUTER JOIN OPERATOR
            </summary>
        </member>
        <member name="F:Tdo.Common.TdoSqlExpressionDom.Join.CrossJoin">
            <summary>
            CROSS JOIN OPERATOR
            </summary>
        </member>
        <member name="T:Tdo.Common.TdoSqlExpressionDom.JoinHelper">
            <summary>
            Provides Information for SelectJoin Method
            </summary>
        </member>
        <member name="M:Tdo.Common.TdoSqlExpressionDom.JoinHelper.#ctor(Tdo.Common.TdoSqlExpressionDom.Join,Tdo.Common.TdoTypes.ITdoColumn,Tdo.Common.TdoSqlExpressionDom.JoinOperator,Tdo.Common.TdoTypes.ITdoColumn)">
            <summary>
            Constructor for SelectJoin Method between 2 Tables
            </summary>
            <param name="join1">Join Type between First Table and Second Table</param>
            <param name="fieldON11">Column of the First Table for ON Matching</param>
            <param name="sqlOperator1">Sql Operator for ON Matching Join between fieldON11 and fieldON12</param>
            <param name="fieldON12">Column of the Second Table for ON Matching</param>
        </member>
        <member name="M:Tdo.Common.TdoSqlExpressionDom.JoinHelper.#ctor(Tdo.Common.TdoSqlExpressionDom.Join,Tdo.Common.TdoTypes.ITdoColumn,Tdo.Common.TdoSqlExpressionDom.JoinOperator,Tdo.Common.TdoTypes.ITdoColumn,Tdo.Common.TdoSqlExpressionDom.Join,Tdo.Common.TdoTypes.ITdoColumn,Tdo.Common.TdoSqlExpressionDom.JoinOperator,Tdo.Common.TdoTypes.ITdoColumn)">
            <summary>
            Constructor for SelectJoin Method between 3 Tables
            </summary>
            <param name="join1">Join Type between First Table and Second Table</param>
            <param name="fieldON11">Column of the First Table for ON Matching</param>
            <param name="sqlOperator1">Sql Operator for ON Matching Join between fieldON11 and fieldON12</param>
            <param name="fieldON12">Column of the Second Table for ON Matching</param>
            <param name="join2">Join Type between Second Table and Third Table</param>
            <param name="fieldON21">Column of the Second Table for ON Matching</param>
            <param name="sqlOperator2">Sql Operator for ON Matching Join between fieldON21 and fieldON22</param>
            <param name="fieldON22">Column of the Third Table for ON Matching</param>
        </member>
        <member name="M:Tdo.Common.TdoSqlExpressionDom.JoinHelper.#ctor(Tdo.Common.TdoSqlExpressionDom.Join,Tdo.Common.TdoTypes.ITdoColumn,Tdo.Common.TdoSqlExpressionDom.JoinOperator,Tdo.Common.TdoTypes.ITdoColumn,Tdo.Common.TdoSqlExpressionDom.Join,Tdo.Common.TdoTypes.ITdoColumn,Tdo.Common.TdoSqlExpressionDom.JoinOperator,Tdo.Common.TdoTypes.ITdoColumn,Tdo.Common.TdoSqlExpressionDom.Join,Tdo.Common.TdoTypes.ITdoColumn,Tdo.Common.TdoSqlExpressionDom.JoinOperator,Tdo.Common.TdoTypes.ITdoColumn)">
            <summary>
            Constructor for SelectJoin Method between 4 Tables
            </summary>
            <param name="join1">Join Type between First Table and Second Table</param>
            <param name="fieldON11">Column of the First Table for ON Matching</param>
            <param name="sqlOperator1">Sql Operator for ON Matching Join between fieldON11 and fieldON12</param>
            <param name="fieldON12">Column of the Second Table for ON Matching</param>
            <param name="join2">Join Type between Second Table and Third Table</param>
            <param name="fieldON21">Column of the Second Table for ON Matching</param>
            <param name="sqlOperator2">Sql Operator for ON Matching Join between fieldON21 and fieldON22</param>
            <param name="fieldON22">Column of the Third Table for ON Matching</param>
            <param name="join3">Join Type between Third Table and Forth Tabke</param>
            <param name="fieldON31">Column of the Third Table for ON Matching</param>
            <param name="sqlOperator3">Sql Operator for ON Matching Join between fieldON31 and fieldON32</param>
            <param name="fieldON32">Column of the Fourth Table for ON Matching</param>
        </member>
        <member name="M:Tdo.Common.TdoSqlExpressionDom.JoinHelper.#ctor(Tdo.Common.TdoSqlExpressionDom.Join,Tdo.Common.TdoTypes.ITdoColumn,Tdo.Common.TdoSqlExpressionDom.JoinOperator,Tdo.Common.TdoTypes.ITdoColumn,Tdo.Common.TdoSqlExpressionDom.Join,Tdo.Common.TdoTypes.ITdoColumn,Tdo.Common.TdoSqlExpressionDom.JoinOperator,Tdo.Common.TdoTypes.ITdoColumn,Tdo.Common.TdoSqlExpressionDom.Join,Tdo.Common.TdoTypes.ITdoColumn,Tdo.Common.TdoSqlExpressionDom.JoinOperator,Tdo.Common.TdoTypes.ITdoColumn,Tdo.Common.TdoSqlExpressionDom.Join,Tdo.Common.TdoTypes.ITdoColumn,Tdo.Common.TdoSqlExpressionDom.JoinOperator,Tdo.Common.TdoTypes.ITdoColumn)">
            <summary>
            Constructor for SelectJoin Method between 5 Tables
            </summary>
            <param name="join1">Join Type between First Table and Second Table</param>
            <param name="fieldON11">Column of the First Table for ON Matching</param>
            <param name="sqlOperator1">Sql Operator for ON Matching Join between fieldON11 and fieldON12</param>
            <param name="fieldON12">Column of the Second Table for ON Matching</param>
            <param name="join2">Join Type between Second Table and Third Table</param>
            <param name="fieldON21">Column of the Second Table for ON Matching</param>
            <param name="sqlOperator2">Sql Operator for ON Matching Join between fieldON21 and fieldON22</param>
            <param name="fieldON22">Column of the Third Table for ON Matching</param>
            <param name="join3">Join Type between Third Table and Fourth Tabke</param>
            <param name="fieldON31">Column of the Third Table for ON Matching</param>
            <param name="sqlOperator3">Sql Operator for ON Matching Join between fieldON31 and fieldON32</param>
            <param name="fieldON32">Column of the Fourth Table for ON Matching</param>
            <param name="join4">Join Type between Fourth Table and Fifth Tabke</param>
            <param name="fieldON41">Column of the Fourth Table for ON Matching</param>
            <param name="sqlOperator4">Sql Operator for ON Matching Join between fieldON41 and fieldON42</param>
            <param name="fieldON42">Column of the Fifth Table for ON Matching</param>
        </member>
        <member name="M:Tdo.Common.TdoSqlExpressionDom.JoinHelper.#ctor(Tdo.Common.TdoSqlExpressionDom.Join,Tdo.Common.TdoTypes.ITdoColumn,Tdo.Common.TdoSqlExpressionDom.JoinOperator,Tdo.Common.TdoTypes.ITdoColumn,Tdo.Common.TdoSqlExpressionDom.Join,Tdo.Common.TdoTypes.ITdoColumn,Tdo.Common.TdoSqlExpressionDom.JoinOperator,Tdo.Common.TdoTypes.ITdoColumn,Tdo.Common.TdoSqlExpressionDom.Join,Tdo.Common.TdoTypes.ITdoColumn,Tdo.Common.TdoSqlExpressionDom.JoinOperator,Tdo.Common.TdoTypes.ITdoColumn,Tdo.Common.TdoSqlExpressionDom.Join,Tdo.Common.TdoTypes.ITdoColumn,Tdo.Common.TdoSqlExpressionDom.JoinOperator,Tdo.Common.TdoTypes.ITdoColumn,Tdo.Common.TdoSqlExpressionDom.Join,Tdo.Common.TdoTypes.ITdoColumn,Tdo.Common.TdoSqlExpressionDom.JoinOperator,Tdo.Common.TdoTypes.ITdoColumn)">
            <summary>
            Constructor for SelectJoin Method between 6 Tables
            </summary>
            <param name="join1">Join Type between First Table and second Table</param>
            <param name="fieldON11">Column of the First Table for ON Matching</param>
            <param name="sqlOperator1">Sql Operator for ON Matching Join between fieldON11 and fieldON12</param>
            <param name="fieldON12">Column of the Second Table for ON Matching</param>
            <param name="join2">Join Type between Second Table and Third Table</param>
            <param name="fieldON21">Column of the Second Table for ON Matching</param>
            <param name="sqlOperator2">Sql Operator for ON Matching Join between fieldON21 and fieldON22</param>
            <param name="fieldON22">Column of the Third Table for ON Matching</param>
            <param name="join3">Join Type between Third Table and Forth Tabke</param>
            <param name="fieldON31">Column of the Third Table for ON Matching</param>
            <param name="sqlOperator3">Sql Operator for ON Matching Join between fieldON31 and fieldON32</param>
            <param name="fieldON32">Column of the Fourth Table for ON Matching</param>
            <param name="join4">Join Type between Fourth Table and Fifth Tabke</param>
            <param name="fieldON41">Column of the Fourth Table for ON Matching</param>
            <param name="sqlOperator4">Sql Operator for ON Matching Join between fieldON41 and fieldON42</param>
            <param name="fieldON42">Column of the Fifth Table for ON Matching</param>
            <param name="join5">Join Type between Fifth Table and Sixth Tabke</param>
            <param name="fieldON51">Column of the Fifth Table for ON Matching</param>
            <param name="sqlOperator5">Sql Operator for ON Matching Join between fieldON51 and fieldON52</param>
            <param name="fieldON52">Column of the Sixth Table for ON Matching</param>
        </member>
        <member name="T:Tdo.Common.TdoSqlExpressionDom.JoinOperator">
            <summary>
            Sql Join Operators enumeration.
            </summary>
        </member>
        <member name="F:Tdo.Common.TdoSqlExpressionDom.JoinOperator.Lower">
            <summary>
            Boolean Lower than operator
            </summary>
        </member>
        <member name="F:Tdo.Common.TdoSqlExpressionDom.JoinOperator.LowerOrEqual">
            <summary>
            Boolean Lower or equal than operator
            </summary>
        </member>
        <member name="F:Tdo.Common.TdoSqlExpressionDom.JoinOperator.Greater">
            <summary>
            Greater than operator
            </summary>
        </member>
        <member name="F:Tdo.Common.TdoSqlExpressionDom.JoinOperator.GreaterOrEqual">
            <summary>
            Greater or equal than operator
            </summary>
        </member>
        <member name="F:Tdo.Common.TdoSqlExpressionDom.JoinOperator.Equal">
            <summary>
            Equality operator.
            </summary>
        </member>
        <member name="F:Tdo.Common.TdoSqlExpressionDom.JoinOperator.NotEqual">
            <summary>
            Unequality operator.
            </summary>
        </member>
        <member name="T:Tdo.Common.Programmability.Functions">
            <summary>
            Implements TDO SQL Functions for Select Methods
            </summary>
        </member>
        <member name="M:Tdo.Common.Programmability.Functions.Distinct(Tdo.Common.TdoTypes.ITdoColumn[])">
            <summary>
            The DISTINCT eliminates duplicate rows from the results of a SELECT statement
            SELECT DISTINCT tdoColumn1, tdoColumn2, ... tdoColumnN FROM ....
            </summary>
            <param name="tdoColumns">The Tdo columns.</param>
            <returns>Returns DISTINCT rows.</returns>
        </member>
        <member name="M:Tdo.Common.Programmability.Functions.Count``1(Tdo.Common.TdoTypes.ITdoColumn,System.String)">
            <summary>
            SQL Count Function.
            SELECT COUNT(tdoColumn) as columnName
            </summary>
            <param name="tdoColumn">Field Name for Count</param>
            <param name="columnName">Column Name</param>
            <returns>Returns the number of items in a group. </returns>
        </member>
        <member name="M:Tdo.Common.Programmability.Functions.CountDistinct``1(Tdo.Common.TdoTypes.ITdoColumn,System.String)">
            <summary>
            Specifies that COUNT returns the number of pUnique nonnull values.
            SELECT COUNT(DISTINCT tdoColumn) as columnName
            </summary>
            <param name="tdoColumn">Field Name for Count Distinct</param>
            <param name="columnName">Counter Name</param>
            <returns>Returns the number of items in a group. </returns>
        </member>
        <member name="M:Tdo.Common.Programmability.Functions.Concat``1(Tdo.Common.TdoTypes.ITdoColumn[],System.String)">
            <summary>
            Concats the specified tdo columns.
            </summary>
            <param name="tdoColumns">The tdo columns.</param>
            <param name="columnName">Name of the column.</param>
            <returns></returns>
        </member>
        <member name="M:Tdo.Common.Programmability.Functions.Concat``1(Tdo.Common.TdoTypes.ITdoColumn,Tdo.Common.TdoTypes.ITdoColumn,System.String)">
            <summary>
            Concats the specified tdo columns.
            </summary>
            <param name="tdoColumn1">The tdo column1.</param>
            <param name="tdoColumn2">The tdo column2.</param>
            <param name="columnName">Name of the column.</param>
            <returns></returns>
        </member>
        <member name="M:Tdo.Common.Programmability.Functions.Concat``1(Tdo.Common.TdoTypes.ITdoColumn,Tdo.Common.TdoTypes.ITdoColumn,Tdo.Common.TdoTypes.ITdoColumn,System.String)">
            <summary>
            Concats the specified tdo columns.
            </summary>
            <param name="tdoColumn1">The tdo column1.</param>
            <param name="tdoColumn2">The tdo column2.</param>
            <param name="tdoColumn3">The tdo column3.</param>
            <param name="columnName">Name of the column.</param>
            <returns></returns>
        </member>
        <member name="M:Tdo.Common.Programmability.Functions.Abs``1(Tdo.Common.TdoTypes.ITdoNumericColumn,System.String)">
            <summary>
            Is an expression of the exact numeric or approximate numeric data type category, except for the bit data type.
            ABS ( numeric_expression ) 
            </summary>
            <param name="tdoColumn">Field Name for Abs</param>
            <param name="columnName">Column Name</param>
            <returns>Returns the absolute, positive actualValue of the given numeric expression.</returns>
        </member>
        <member name="M:Tdo.Common.Programmability.Functions.Avg``1(Tdo.Common.TdoTypes.ITdoNumericColumn,System.String)">
            <summary>
            Returns the average of the values in a group. Null values are ignored.
            AVG ( numeric_expression ) 
            </summary>
            <param name="tdoColumn">Field Name for Avg</param>
            <param name="columnName">Column Name</param>
            <returns>Is an expression of the exact numeric or approximate numeric data type category</returns>
        </member>
        <member name="M:Tdo.Common.Programmability.Functions.AvgDistinct``1(Tdo.Common.TdoTypes.ITdoNumericColumn,System.String)">
            <summary>
            Returns the average of the values in a group. Null values are ignored.
            Specifies that AVG be performed only on each pUnique instance of a actualValue, regardless of how many times the actualValue occurs.
            AVG ( DISTINCT numeric_expression ) 
            </summary>
            <param name="tdoColumn">Field Name for Avg</param>
            <param name="columnName">Column Name</param>
            <returns>Is an expression of the exact numeric or approximate numeric data type category</returns>
        </member>
        <member name="M:Tdo.Common.Programmability.Functions.DateAdd(Tdo.Common.Programmability.Functions.TdoDatePart,System.Int32,Tdo.Common.TdoTypes.TdoDateTime,System.String)">
            <summary>
            Returns a new datetime actualValue based on adding an interval to the specified date.
            DATEADD ( datepart , number, datetime ) 
            </summary>
            <param name="datepart">Is the parameter that specifies on which part of the date to return a new actualValue.</param>
            <param name="number">Is the actualValue used to increment datepart.</param>
            <param name="datetime">Is an expression that returns a datetime or smalldatetime actualValue</param>
            <param name="columnName">Column Name</param>
            <returns>Returns TdoDateTime</returns>
        </member>
        <member name="M:Tdo.Common.Programmability.Functions.DateDiff``1(Tdo.Common.Programmability.Functions.TdoDatePart,Tdo.Common.TdoTypes.TdoDateTime,Tdo.Common.TdoTypes.TdoDateTime,System.String)">
            <summary>
            Returns the number of date and time boundaries crossed between two specified dates. 
            DATEDIFF ( datepart , startdate , enddate ) 
            </summary>
            <param name="datepart">Is the parameter that specifies on which part of the date to return a new actualValue.</param>
            <param name="startdate">Is the beginning date for the calculation.</param>
            <param name="enddate">Is the ending date for the calculation.</param>
            <param name="columnName">Column Name</param>
            <returns>startdate is subtracted from enddate. If startdate is later than enddate, a negative actualValue is returned.</returns>
        </member>
        <member name="M:Tdo.Common.Programmability.Functions.DatePart``1(Tdo.Common.Programmability.Functions.TdoDatePart,Tdo.Common.TdoTypes.TdoDateTime,System.String)">
            <summary>
            Returns an integer representing the specified datepart of the specified date.
            DATEPART ( datepart , date ) 
            </summary>
            <param name="datepart">Is the parameter that specifies on which part of the date to return a new actualValue.</param>
            <param name="datetime">Is the date for the calculation.</param>
            <param name="columnName">Column Name</param>
            <returns>Returns a TdoInt32 representing the specified datepart of the specified date.</returns>
        </member>
        <member name="M:Tdo.Common.Programmability.Functions.DateName(Tdo.Common.Programmability.Functions.TdoDatePart,Tdo.Common.TdoTypes.TdoDateTime,System.String)">
            <summary>
            Returns a character string representing the specified datepart of the specified date.
            DATENAME ( datepart , date ) 
            </summary>
            <param name="datename">Is the parameter that specifies on which part of the date to return a new actualValue.</param>
            <param name="datetime">Is the date for the calculation.</param>
            <param name="columnName">Column Name</param>
            <returns>Returns a TdoString representing the specified datepart of the specified date.</returns>
        </member>
        <member name="M:Tdo.Common.Programmability.Functions.Min``2(``1,System.String)">
            <summary>
            Returns the minimum actualValue in the expression. 
            </summary>
            <param name="tdoColumn">Field Name for Min</param>
            <param name="columnName">Column Name</param>
            <returns>Returns a actualValue same as expression.</returns>
        </member>
        <member name="M:Tdo.Common.Programmability.Functions.MinDistinct``2(``1,System.String)">
            <summary>
            Returns the Minimum (only pUnique values are considered) actualValue in the expression. 
            MinDistinct ( numeric_expression ) 
            </summary>
            <param name="tdoColumn">Field Name for MinDistinct</param>
            <param name="columnName">Column Name</param>
            <returns>Returns a actualValue same as expression.</returns>
        </member>
        <member name="M:Tdo.Common.Programmability.Functions.Max``2(``1,System.String)">
            <summary>
            Returns the Maximum actualValue in the expression. 
            Max ( DateTime ) 
            </summary>
            <param name="tdoColumn">Field Name for Max</param>
            <param name="columnName">Column Name</param>
            <returns>Returns a actualValue same as expression.</returns>
        </member>
        <member name="M:Tdo.Common.Programmability.Functions.MaxDistinct``2(``1,System.String)">
            <summary>
            Returns the Maximum (only pUnique values are considered) actualValue in the expression. 
            MaxDistinct ( numeric_expression ) 
            </summary>
            <param name="tdoColumn">Field Name for MaxDistinct</param>
            <param name="columnName">Column Name</param>
            <returns>Returns a actualValue same as expression.</returns>
        </member>
        <member name="M:Tdo.Common.Programmability.Functions.Sum``1(``0,System.String)">
            <summary>
            Returns the sum of all the values in the expression. SUM can be used with numeric columnNames only. Null values are ignored. 
            Sum ( numeric_expression ) 
            </summary>
            <param name="tdoColumn">Field Name for Sum</param>
            <param name="columnName">Column Name</param>
            <returns>Returns the summation of all expression values in the most precise expression data type.</returns>
        </member>
        <member name="M:Tdo.Common.Programmability.Functions.SumDistinct``1(``0,System.String)">
            <summary>
            Returns the Sum of all pUnique values in the expression. Sum Distinct can be used with numeric columnNames only. Null values are ignored. 
            SUM (DISTINCT numeric_expression ) 
            </summary>
            <param name="tdoColumn">Field Name for Sum Distinct</param>
            <param name="columnName">Column Name</param>
            <returns>Returns the summation of all expression values in the most precise expression data type.</returns>
        </member>
        <member name="M:Tdo.Common.Programmability.Functions.Left(Tdo.Common.TdoTypes.TdoString,System.Int32,System.String)">
            <summary>
            Returns the part of a character string starting at a specified number of characters from the left.
            RIGHT ( character_expression , integer_expression )
            </summary>
            <param name="expression">Is an expression of character or binary data. expression can be a constant or column. character_expression must be of a data type that can be implicitly convertible to TdoString or TdoBinary.</param>
            <param name="length">Is a positive whole number. If integer_expression is negative, a null string is returned.</param>
            <param name="columnName">Column Name</param>
            <returns>Returns a TdoString representing the specified partial TdoString.</returns>
        </member>
        <member name="M:Tdo.Common.Programmability.Functions.Left(Tdo.Common.TdoTypes.TdoBinary,System.Int32,System.String)">
            <summary>
            Returns the part of a character string starting at a specified number of characters from the left.
            RIGHT ( character_expression , integer_expression )
            </summary>
            <param name="expression">Is an expression of character or binary data. expression can be a constant or column. character_expression must be of a data type that can be implicitly convertible to TdoString or TdoBinary.</param>
            <param name="length">Is a positive whole number. If integer_expression is negative, a null string is returned.</param>
            <param name="columnName">Column Name</param>
            <returns>Returns a TdoString representing the specified partial TdoString.</returns>
        </member>
        <member name="M:Tdo.Common.Programmability.Functions.Right(Tdo.Common.TdoTypes.TdoString,System.Int32,System.String)">
            <summary>
            Returns the part of a character string starting a specified number of integer_expression characters from the right.
            RIGHT ( character_expression , integer_expression )
            </summary>
            <param name="expression">Is an expression of character or binary data. expression can be a constant or column. character_expression must be of a data type that can be implicitly convertible to TdoString or TdoBinary.</param>
            <param name="length">Is the starting position, expressed as a positive whole number. If integer_expression is negative, an error is returned.</param>
            <param name="columnName">Column Name</param>
            <returns>Returns a TdoString representing the specified partial TdoString.</returns>
        </member>
        <member name="M:Tdo.Common.Programmability.Functions.Right(Tdo.Common.TdoTypes.TdoBinary,System.Int32,System.String)">
            <summary>
            Returns the part of a character string starting a specified number of integer_expression characters from the right.
            RIGHT ( character_expression , integer_expression )
            </summary>
            <param name="expression">Is an expression of character or binary data. expression can be a constant or column. character_expression must be of a data type that can be implicitly convertible to TdoString or TdoBinary.</param>
            <param name="length">Is the starting position, expressed as a positive whole number. If integer_expression is negative, an error is returned.</param>
            <param name="columnName">Column Name</param>
            <returns>Returns a TdoString representing the specified partial TdoString.</returns>
        </member>
        <member name="M:Tdo.Common.Programmability.Functions.SubString(Tdo.Common.TdoTypes.TdoString,System.Int32,System.Int32,System.String)">
            <summary>
            Returns part of a TdoString or TdoBinary expression.
            SUBSTRING ( expression , start , length ) 
            </summary>
            <param name="expression">Is a TdoString, TdoBinary, a column, or an expression that includes a column. Do not use expressions that include aggregate functions.</param>
            <param name="start">Is an int that specifies where the substring begins (1-based).</param>
            <param name="length">Is an integer that specifies the length of the substring (the number of characters or bytes to return).</param>
            <param name="columnName">Column Name</param>
            <returns>Returns character data if expression is one of the supported character data types. Returns binary data if expression is one of the supported binary data types.</returns>
        </member>
        <member name="M:Tdo.Common.Programmability.Functions.SubString(Tdo.Common.TdoTypes.TdoBinary,System.Int32,System.Int32,System.String)">
            <summary>
            Returns part of a TdoString or TdoBinary expression.
            SUBSTRING ( expression , start , length )
            </summary>
            <param name="expression">Is a TdoString, TdoBinary, a column, or an expression that includes a column. Do not use expressions that include aggregate functions.</param>
            <param name="start">Is an int that specifies where the substring begins (1-based).</param>
            <param name="length">Is an integer that specifies the length of the substring (the number of characters or bytes to return).</param>
            <param name="columnName">Column Name</param>
            <returns>Returns character data if expression is one of the supported character data types. Returns binary data if expression is one of the supported binary data types.</returns>
        </member>
        <member name="M:Tdo.Common.Programmability.Functions.Upper(Tdo.Common.TdoTypes.TdoString,System.String)">
            <summary>
            Returns a character expression with lowercase character data converted to uppercase.
            UPPER ( character_expression )
            </summary>
            <param name="expression">Is an expression of character data. character_expression can be a constant, variable, or column of TdoString.</param>
            <param name="columnName">Column Name</param>
            <returns>Returns an Uppercase TdoString </returns>
        </member>
        <member name="M:Tdo.Common.Programmability.Functions.Lower(Tdo.Common.TdoTypes.TdoString,System.String)">
            <summary>
            Returns a character expression with uppercase character data converted to lowercase.
            LOWER ( character_expression )
            </summary>
            <param name="expression">Is an expression of character data. character_expression can be a constant, variable, or column of TdoString.</param>
            <param name="columnName">Column Name</param>
            <returns>Returns an Lowercase TdoString </returns>
        </member>
        <member name="M:Tdo.Common.Programmability.Functions.LTrim(Tdo.Common.TdoTypes.TdoString,System.String)">
            <summary>
            Returns a character expression after removing leading blanks.
            LTRIM ( character_expression )
            </summary>
            <param name="expression">Is an expression of character data. character_expression can be a constant, variable, or column of TdoString.</param>
            <param name="columnName">Column Name</param>
            <returns>Returns a TdoString </returns>
        </member>
        <member name="M:Tdo.Common.Programmability.Functions.RTrim(Tdo.Common.TdoTypes.TdoString,System.String)">
            <summary>
            Returns a character string after truncating all trailing blanks.
            RTRIM ( character_expression )
            </summary>
            <param name="expression">Is an expression of character data. character_expression can be a constant, variable, or column of TdoString.</param>
            <param name="columnName">Column Name</param>
            <returns>Returns a TdoString </returns>
        </member>
        <member name="M:Tdo.Common.Programmability.Functions.Reverse(Tdo.Common.TdoTypes.TdoString,System.String)">
            <summary>
            Returns the reverse of a character expression.
            REVERSE ( character_expression )
            </summary>
            <param name="expression">Is an expression of character data. character_expression can be a constant, variable, or column of TdoString.</param>
            <param name="columnName">Column Name</param>
            <returns>Returns a TdoString </returns>
        </member>
        <member name="M:Tdo.Common.Programmability.Functions.TopPercent(System.Double,Tdo.Common.TdoTypes.ITdoColumn[])">
            <summary>
            The TOP clause limits the number of rows returned in the result set.
            SELECT TOP n PERCENT tdoColumn1, tdoColumn2, ... tdoColumnN FROM ....
            </summary>
            <param name="n">n is the percentage of the result set rows to return.</param>
            <param name="tdoColumns">The Tdo columns.</param>
            <returns>ITDOColumns surrounded by TOP clause.</returns>
        </member>
        <member name="M:Tdo.Common.Programmability.Functions.Top(System.Int32,Tdo.Common.TdoTypes.ITdoColumn[])">
            <summary>
            The TOP clause limits the number of rows returned in the result set.
            SELECT TOP x tdoColumn1, tdoColumn2, ... tdoColumnN FROM ....
            </summary>
            <param name="n">n specifies how many rows are returned, n is the number of rows to return.</param>
            <param name="tdoColumns">The Tdo columns.</param>
            <returns>ITDOColumns surrounded by TOP clause.</returns>
        </member>
        <member name="T:Tdo.Common.Programmability.Functions.TdoDatePart">
            <summary>
            Is the parameter that specifies on which part of the date to return a new actualValue.
            </summary>
        </member>
        <member name="F:Tdo.Common.Programmability.Functions.TdoDatePart.Year">
            <summary>
            Year
            </summary>
        </member>
        <member name="F:Tdo.Common.Programmability.Functions.TdoDatePart.Quarter">
            <summary>
            Quarter
            </summary>
        </member>
        <member name="F:Tdo.Common.Programmability.Functions.TdoDatePart.Month">
            <summary>
            Month
            </summary>
        </member>
        <member name="F:Tdo.Common.Programmability.Functions.TdoDatePart.DayOfYear">
            <summary>
            Day Of Year
            </summary>
        </member>
        <member name="F:Tdo.Common.Programmability.Functions.TdoDatePart.Day">
            <summary>
            Day
            </summary>
        </member>
        <member name="F:Tdo.Common.Programmability.Functions.TdoDatePart.Week">
            <summary>
            Week
            </summary>
        </member>
        <member name="F:Tdo.Common.Programmability.Functions.TdoDatePart.Hour">
            <summary>
            Hour
            </summary>
        </member>
        <member name="F:Tdo.Common.Programmability.Functions.TdoDatePart.Minute">
            <summary>
            Minute
            </summary>
        </member>
        <member name="F:Tdo.Common.Programmability.Functions.TdoDatePart.Second">
            <summary>
            Second
            </summary>
        </member>
        <member name="F:Tdo.Common.Programmability.Functions.TdoDatePart.Millisecond">
            <summary>
            Millisecond
            </summary>
        </member>
        <member name="T:Tdo.Common.Helper.TdoHelperBase">
            <summary>
            Base class for TDOHelperClass
            </summary>
        </member>
        <member name="F:Tdo.Common.Helper.TdoHelperBase.pAutomaticOpenCloseConnection">
            <summary>
            Gets or Sets if TdoHelper must Open and Close Connection automatically.
            </summary>
        </member>
        <member name="F:Tdo.Common.Helper.TdoHelperBase.pAutomaticTransaction">
            <summary>
            Gets or Sets a bool value indicating if TdoHelper must execute Command automatically in Transaction.
            </summary>
        </member>
        <member name="F:Tdo.Common.Helper.TdoHelperBase.pSqlCommandAsyncStore">
            <summary>
            SqlCommandHashCollection with async SqlCommands (Begin/End Methods) 
            </summary>
        </member>
        <member name="F:Tdo.Common.Helper.TdoHelperBase.pCommandTimeOut">
            <summary>
            Get or Set SqlCommand time out (default is 60 seconds)
            </summary>
        </member>
        <member name="F:Tdo.Common.Helper.TdoHelperBase.pServerVersion">
            <summary>
            Get Sql Server version
            </summary>
        </member>
        <member name="F:Tdo.Common.Helper.TdoHelperBase.piSite">
            <summary>
            ISite Property for IComponent
            </summary>
        </member>
        <member name="F:Tdo.Common.Helper.TdoHelperBase.pConnection">
            <summary>
            Current SqlConnection
            </summary>
        </member>
        <member name="F:Tdo.Common.Helper.TdoHelperBase.pTransaction">
            <summary>
            Current SqlTransaction
            </summary>
        </member>
        <member name="F:Tdo.Common.Helper.TdoHelperBase.pConnectionString">
            <summary>
            Sql Connection string
            </summary>
        </member>
        <member name="M:Tdo.Common.Helper.TdoHelperBase.#ctor">
            <summary>
            TdoHelperBase default constructor
            </summary>
        </member>
        <member name="M:Tdo.Common.Helper.TdoHelperBase.#ctor(System.String)">
            <summary>
            TdoHelperBase Constructor
            </summary>
            <param name="connectionString">Sql Connection string</param>
        </member>
        <member name="M:Tdo.Common.Helper.TdoHelperBase.OpenConnection">
            <summary>
            <code>Open DataBase Connection</code>
            </summary>
        </member>
        <member name="M:Tdo.Common.Helper.TdoHelperBase.CloseConnection">
            <summary>
            Close DataBase Connection
            </summary>
        </member>
        <member name="M:Tdo.Common.Helper.TdoHelperBase.BeginTransaction(System.Data.IsolationLevel,System.String)">
            <summary>
            Begin a commandText-transaction
            </summary>
            <param name="isolationLevel">Transaction Isolation Level</param>
            <param name="transactionName">Transaction Name</param>
        </member>
        <member name="M:Tdo.Common.Helper.TdoHelperBase.SaveTransaction(System.String)">
            <summary>
            Creates a savepoint in the transaction that can be used to roll back a portion of the transaction, and specifies the savepoint name.
            </summary>
            <param name="savePointName">The name of the savepoint. </param>
            <exception cref="T:System.InvalidOperationException">The transaction has already been committed or rolled back.-or- The connection is broken.</exception>
            <exception cref="T:System.Exception">An error occurred while trying to commit the transaction. </exception>
        </member>
        <member name="M:Tdo.Common.Helper.TdoHelperBase.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            Begin a commandText-transaction
            </summary>
            <param name="isolationLevel">Transaction Isolation Level</param>
        </member>
        <member name="M:Tdo.Common.Helper.TdoHelperBase.BeginTransaction">
            <summary>
            Begin a commandText-transaction
            </summary>
        </member>
        <member name="M:Tdo.Common.Helper.TdoHelperBase.BeginTransaction(System.String)">
            <summary>
            Begin a commandText-transaction
            </summary>
            <param name="transactionName">Transaction Name</param>
        </member>
        <member name="M:Tdo.Common.Helper.TdoHelperBase.CommitTransaction">
            <summary>
            Commit current transaction
            </summary>
        </member>
        <member name="M:Tdo.Common.Helper.TdoHelperBase.RollBackTransaction">
            <summary>
            Commit current transaction
            </summary>
        </member>
        <member name="M:Tdo.Common.Helper.TdoHelperBase.RollBackTransaction(System.String)">
            <summary>
            Commit transactionName transaction
            </summary>
            <param name="transactionName">Transaction Name</param>
        </member>
        <member name="M:Tdo.Common.Helper.TdoHelperBase.ExecuteReader(System.String)">
            <summary>
            Executes commandText query and returns a SqlDataReader reference
            </summary>
            <param name="commandText">Sql statement to execute</param>
            <returns>SqlDataReader for reading results</returns>
        </member>
        <member name="M:Tdo.Common.Helper.TdoHelperBase.ExecuteReader(System.String,System.Data.CommandBehavior)">
            <summary>
            Executes commandText query and returns a SqlDataReader reference
            </summary>
            <param name="commandText">Sql statement to execute</param>
            <param name="commandBeahvior">Command Beahvior</param>
            <returns>SqlDataReader for reading results</returns>
        </member>
        <member name="M:Tdo.Common.Helper.TdoHelperBase.ExecuteXmlReader(System.String)">
            <summary>
            Executes commandText query and returns a SqlDataReader reference
            </summary>
            <param name="commandText">Sql statement to execute</param>
            <returns>SqlDataReader for reading results</returns>
        </member>
        <member name="M:Tdo.Common.Helper.TdoHelperBase.CreateCommand(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Creates and returns a System.Data.SqlClient.SqlCommand object associated supplied values.
            </summary>
            <param name="commandText">Transact-SQL statement or stored procedure to execute at the data source.</param>
            <param name="sqlParameters">The parameters of the Transact-SQL statement or stored procedure. The default is an empty collection.</param>
            <returns></returns>
        </member>
        <member name="M:Tdo.Common.Helper.TdoHelperBase.CreateCommand(System.String,System.Data.CommandType,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Creates and returns a System.Data.SqlClient.SqlCommand object associated supplied values.
            </summary>
            <param name="commandText">Transact-SQL statement or stored procedure to execute at the data source.</param>
            <param name="commandType">a value indicating how the System.Data.SqlClient.SqlCommand.CommandText property is to be interpreted.</param>
            <param name="sqlParameters">The parameters of the Transact-SQL statement or stored procedure. The default is an empty collection.</param>
            <returns></returns>
        </member>
        <member name="M:Tdo.Common.Helper.TdoHelperBase.CreateCommand(System.String,System.Data.CommandType,System.Data.Sql.SqlNotificationRequest,System.Boolean,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Creates and returns a System.Data.SqlClient.SqlCommand object associated supplied values.
            </summary>
            <param name="commandText">Transact-SQL statement or stored procedure to execute at the data source.</param>
            <param name="commandType">a value indicating how the System.Data.SqlClient.SqlCommand.CommandText property is to be interpreted.</param>
            <param name="sqlNotificationRequest">a value that specifies the System.Data.Sql.SqlNotificationRequest object bound to this command.</param>
            <param name="notificationAutoEnlist">[To be supplied.]</param>
            <param name="sqlParameters">The parameters of the Transact-SQL statement or stored procedure. The default is an empty collection.</param>
            <returns></returns>
        </member>
        <member name="M:Tdo.Common.Helper.TdoHelperBase.ExecuteNonQuery(System.String)">
            <summary>
            Executes commandText query and returns the number of rows affected.
            </summary>
            <param name="commandText">Sql statement to execute</param>
            <returns>Number of rows affected</returns>			
        </member>
        <member name="M:Tdo.Common.Helper.TdoHelperBase.ExecuteScalar(System.String)">
            <summary>
            Runs the query and returns the first actualValue at the left top of the "rectangular" result.
            </summary>
            <param name="commandText">statement SQL to execute</param>
            <returns>first actualValue at the left top of the "rectangular" result.</returns>
        </member>
        <member name="M:Tdo.Common.Helper.TdoHelperBase.Fill(System.String,System.String)">
            <summary>
            Runs the query and returns a DataTable object with the selected records
            </summary>
            <param name="selectCommandText">Select Statement</param>
            <param name="entityName">Table name to assign to DataTable object</param>
            <returns>DataTable containing the selected records</returns>
        </member>
        <member name="M:Tdo.Common.Helper.TdoHelperBase.CreateDataAdapter(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Gets a new instance of the System.Data.SqlClient.SqlDataAdapter class with supplied values.
            </summary>
            <param name="selectCommandText">Sets a Transact-SQL statement or stored procedure used to select records in the data source.</param>
            <param name="sqlParameters">Sets the parameters of the Transact-SQL statement or stored procedure. The default is an empty collection.</param>
            <returns>System.Data.SqlClient.SqlDataAdapter class with a set of data commands and a database connection that are used to fill the System.Data.DataSet.</returns>
        </member>
        <member name="M:Tdo.Common.Helper.TdoHelperBase.CreateDataAdapter(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlCommand)">
            <summary>
            Gets a new instance of the System.Data.SqlClient.SqlDataAdapter class with supplied values.
            </summary>
            <param name="selectCommand">Sets a Transact-SQL statement or stored procedure used to select records in the data source.</param>
            <param name="insertCommand">Sets a Transact-SQL statement or stored procedure to insert new records into the data source.</param>
            <param name="updateCommand">Sets a Transact-SQL statement or stored procedure used to update records in the data source.</param>
            <param name="deleteCommand">Sets a Transact-SQL statement or stored procedure to delete records from the data set.</param>
            <returns>System.Data.SqlClient.SqlDataAdapter class with a set of data commands and a database connection that are used to fill the System.Data.DataSet and update a SQL Server database.</returns>
        </member>
        <member name="M:Tdo.Common.Helper.TdoHelperBase.CreateDataAdapter(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlCommand,System.Boolean,System.Boolean,System.Boolean,System.Data.LoadOption,System.Data.MissingMappingAction,System.Data.MissingSchemaAction,System.Boolean,System.Int32)">
            <summary>
            Gets a new instance of the System.Data.SqlClient.SqlDataAdapter class with supplied values.
            </summary>
            <param name="selectCommand">Sets a Transact-SQL statement or stored procedure used to select records in the data source.</param>
            <param name="insertCommand">Sets a Transact-SQL statement or stored procedure to insert new records into the data source.</param>
            <param name="updateCommand">Sets a Transact-SQL statement or stored procedure used to update records in the data source.</param>
            <param name="deleteCommand">Sets a Transact-SQL statement or stored procedure to delete records from the data set.</param>
            <param name="acceptChangesDuringFill">Sets a value indicating whether System.Data.FillDataRow.AcceptChanges() is called on a System.Data.FillDataRow after it is added to the System.Data.DataTable during any of the Fill operations.</param>
            <param name="acceptChangesDuringUpdate">Sets a value indicating whether System.Data.FillDataRow.AcceptChanges() is called on a System.Data.FillDataRow after it is updated into the System.Data.DataTable during any of the Fill operations.</param>
            <param name="continueUpdateOnError">Sets a value that specifies whether to generate an exception when an error is encountered during a row update.</param>
            <param name="fillLoadOption">[To be supplied.]</param>
            <param name="missingMappingAction">Determines the action to take when incoming data does not have a matching table or column. The default is Passthrough.</param>
            <param name="missingSchemaAction">Determines the action to take when existing System.Data.DataSet schema does not match incoming data.</param>
            <param name="returnProviderSpecificTypes">[To be supplied.]</param>
            <param name="updateBatchSize">Sets a value that enables or disables batch processing support, and specifies the number of commands that can be executed in a batch.</param>
            <returns>System.Data.SqlClient.SqlDataAdapter class with a set of data commands and a database connection that are used to fill the System.Data.DataSet and update a SQL Server database.</returns>
        </member>
        <member name="M:Tdo.Common.Helper.TdoHelperBase.Fill(System.String)">
            <summary>
            Runs the query and returns a DataTable object with the selected records
            </summary>
            <param name="selectCommandText">Select Statement</param>
            <returns>DataTable containing the selected records</returns>
        </member>
        <member name="M:Tdo.Common.Helper.TdoHelperBase.ExecuteScalarFunction(Tdo.Common.TdoTypes.ITdoColumn)">
            <summary>
            Executes the scalar function.
            </summary>
            <param name="scalarFunction">The scalar function.</param>
            <returns></returns>
        </member>
        <member name="M:Tdo.Common.Helper.TdoHelperBase.ExecuteScalarFunctions(Tdo.Common.TdoTypes.ITdoColumn[])">
            <summary>
            Executes the scalar functions.
            </summary>
            <param name="scalarFunctions">The scalar functions.</param>
            <returns></returns>
        </member>
        <member name="M:Tdo.Common.Helper.TdoHelperBase.FillSchema(Tdo.Common.Entities.ITdoEntity,System.Data.SchemaType)">
            <summary>
            Fill Schema Table/View for an ITdoEntity with given schemaType
            </summary>
            <param name="entity">must be an ITdoEntity type</param>
            <param name="schemaType">Mapped or Source</param>
            <returns></returns>
        </member>
        <member name="M:Tdo.Common.Helper.TdoHelperBase.SelectJoin(Tdo.Common.TdoSqlExpressionDom.JoinHelper,System.String,Tdo.Common.TdoTypes.ITdoColumn[])">
            <summary>
            Creates a DataTable instance using Join Operator
            </summary>
            <param name="joinInfo">JoinHelper Class for Select Join Information</param>
            <param name="clauses">Selection clause for SELECT</param>
            <param name="selectFields">fields list (ITdoType) to select</param> 
            <returns>DataTable with Select Join resulting records </returns>
        </member>
        <member name="M:Tdo.Common.Helper.TdoHelperBase.SelectJoin(Tdo.Common.TdoSqlExpressionDom.JoinHelper,Tdo.Common.TdoTypes.ITdoColumn[])">
            <summary>
            Creates a DataTable instance using Join Operator
            </summary>
            <param name="joinInfo">JoinHelper Class for Select Join Information</param>
            <param name="selectFields">fields list (ITdoType) to select</param> 
            <returns>DataTable with Select Join resulting records </returns>
        </member>
        <member name="M:Tdo.Common.Helper.TdoHelperBase.SelectJoinReader(Tdo.Common.TdoSqlExpressionDom.JoinHelper,System.String,Tdo.Common.TdoTypes.ITdoColumn[])">
            <summary>
            Creates an SqlDataReader instance using Join Operator
            </summary>
            <param name="joinInfo">JoinHelper Class for Select Join Information</param>
            <param name="clauses">Selection clause for SELECT</param>
            <param name="selectFields">fields list (ITdoType) to select</param> 
            <returns>DataTable with Select Join resulting records </returns>
        </member>
        <member name="M:Tdo.Common.Helper.TdoHelperBase.SelectJoinReader(Tdo.Common.TdoSqlExpressionDom.JoinHelper,Tdo.Common.TdoTypes.ITdoColumn[])">
            <summary>
            Creates an SqlDataReader instance using Join Operator
            </summary>
            <param name="joinInfo">JoinHelper Class for Select Join Information</param>
            <param name="selectFields">fields list (ITdoType) to select</param> 
            <returns>DataTable with Select Join resulting records </returns>
        </member>
        <member name="M:Tdo.Common.Helper.TdoHelperBase.Dispose">
            <summary>
            TdoHelperBase Dispose
            </summary>
        </member>
        <member name="M:Tdo.Common.Helper.TdoHelperBase.Tdo#Common#Helper#ITdoHelper#PrepareAutomaticConnection">
            <summary>
            Prepare Automatic Connection.
            </summary>
        </member>
        <member name="M:Tdo.Common.Helper.TdoHelperBase.Tdo#Common#Helper#ITdoHelper#UnPrepareAutomaticConnection">
            <summary>
            Unprepare Automatic Connection.
            </summary>
        </member>
        <member name="M:Tdo.Common.Helper.TdoHelperBase.Tdo#Common#Helper#ITdoHelper#PrepareAutomaticTransaction">
            <summary>
            Unprepare Automatic Transaction.
            </summary>
        </member>
        <member name="M:Tdo.Common.Helper.TdoHelperBase.Tdo#Common#Helper#ITdoHelper#UnPrepareAutomaticTransaction">
            <summary>
            Prepare Automatic Transaction.
            </summary>
        </member>
        <member name="M:Tdo.Common.Helper.TdoHelperBase.Tdo#Common#Helper#ITdoHelper#internalStatementCompletedEventHandler(System.Object,System.Data.StatementCompletedEventArgs)">
            <summary>
            [Internal] use only.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="E:Tdo.Common.Helper.TdoHelperBase.Disposed">
            <summary>
            Disposed Component Event 
            </summary>
        </member>
        <member name="P:Tdo.Common.Helper.TdoHelperBase.AutomaticOpenCloseConnection">
            <summary>
            Gets or Sets if TdoHelper must Open and Close Connection automatically. Default is true.
            </summary>
        </member>
        <member name="P:Tdo.Common.Helper.TdoHelperBase.AutomaticTransaction">
            <summary>
            Gets or Sets a bool value indicating if TdoHelper must execute Command automatically in Transaction. Default is false.
            </summary>
        </member>
        <member name="P:Tdo.Common.Helper.TdoHelperBase.ServerVersion">
            <summary>
            Get Sql Server version
            </summary>
        </member>
        <member name="P:Tdo.Common.Helper.TdoHelperBase.ConnectionString">
            <summary>
            Sql Connection string
            </summary>
        </member>
        <member name="P:Tdo.Common.Helper.TdoHelperBase.Tdo#Common#Helper#ITdoHelper#SqlCommandAsyncStore">
            <summary>
            SqlCommand HashTable with async SqlCommands (Begin/End Methods) 
            </summary>
        </member>
        <member name="P:Tdo.Common.Helper.TdoHelperBase.Transaction">
            <summary>
            Reference for current SqlTransaction
            </summary>
        </member>
        <member name="P:Tdo.Common.Helper.TdoHelperBase.TdoTables">
            <summary>
            Returns an array of ITdoTable
            </summary>
        </member>
        <member name="P:Tdo.Common.Helper.TdoHelperBase.TdoTableFunctions">
            <summary>
            Returns an array of ITdoTableFunction
            </summary>
        </member>
        <member name="P:Tdo.Common.Helper.TdoHelperBase.TdoViews">
            <summary>
            Returns an array of ITdoView
            </summary>
        </member>
        <member name="P:Tdo.Common.Helper.TdoHelperBase.TdoStoredProcedures">
            <summary>
            Returns an array of ITdoStoredProcedure
            </summary>
        </member>
        <member name="P:Tdo.Common.Helper.TdoHelperBase.Connection">
            <summary>
            Current SqlConnection
            </summary>
        </member>
        <member name="P:Tdo.Common.Helper.TdoHelperBase.CommandTimeOut">
            <summary>
            Get or Set SqlCommand time out (default is 60 seconds)
            </summary>
        </member>
        <member name="E:Tdo.Common.Helper.TdoHelperBase.ConnectionStateChange">
            <summary>
            Occurs when SQL Server connection state change.
            </summary>
        </member>
        <member name="E:Tdo.Common.Helper.TdoHelperBase.InfoMessage">
            <summary>
            Occurs when SQL Server returns a warning or informational message.
            </summary>
        </member>
        <member name="E:Tdo.Common.Helper.TdoHelperBase.StatementCompleted">
            <summary>
            Occurs after a command is executed against the data source. 
            </summary>
        </member>
        <member name="E:Tdo.Common.Helper.TdoHelperBase.FillError">
            <summary>
            Occurs during Fill operations with errors.
            </summary>
        </member>
        <member name="E:Tdo.Common.Helper.TdoHelperBase.RowUpdated">
            <summary>
            Occurs during Update after a command is executed against the data source. The attempt to update is made, so the event fires. 
            </summary>
        </member>
        <member name="E:Tdo.Common.Helper.TdoHelperBase.RowUpdating">
            <summary>
            Occurs during Update after a command is executed against the data source. The attempt to update is made, so the event fires. 
            </summary>
        </member>
        <member name="P:Tdo.Common.Helper.TdoHelperBase.Site">
            <summary>
            Gets or sets the <see cref="T:System.ComponentModel.ISite"></see> associated with the <see cref="T:System.ComponentModel.IComponent"></see>.
            </summary>
            <value></value>
            <returns>The <see cref="T:System.ComponentModel.ISite"></see> object associated with the component; or null, if the component does not have a site.</returns>
        </member>
        <member name="T:Tdo.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Tdo.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Tdo.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
    </members>
</doc>
