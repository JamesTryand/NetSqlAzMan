#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NetSqlAzMan.LINQ
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="NetSqlAzManStorage")]
	[Provider(typeof(System.Data.Linq.SqlClient.Sql2000Provider))]
	public partial class NetSqlAzManStorageDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertApplicationAttributesTable(ApplicationAttributesTable instance);
    partial void UpdateApplicationAttributesTable(ApplicationAttributesTable instance);
    partial void DeleteApplicationAttributesTable(ApplicationAttributesTable instance);
    partial void InsertApplicationGroupMembersTable(ApplicationGroupMembersTable instance);
    partial void UpdateApplicationGroupMembersTable(ApplicationGroupMembersTable instance);
    partial void DeleteApplicationGroupMembersTable(ApplicationGroupMembersTable instance);
    partial void InsertApplicationGroupsTable(ApplicationGroupsTable instance);
    partial void UpdateApplicationGroupsTable(ApplicationGroupsTable instance);
    partial void DeleteApplicationGroupsTable(ApplicationGroupsTable instance);
    partial void InsertApplicationPermissionsTable(ApplicationPermissionsTable instance);
    partial void UpdateApplicationPermissionsTable(ApplicationPermissionsTable instance);
    partial void DeleteApplicationPermissionsTable(ApplicationPermissionsTable instance);
    partial void InsertApplicationsTable(ApplicationsTable instance);
    partial void UpdateApplicationsTable(ApplicationsTable instance);
    partial void DeleteApplicationsTable(ApplicationsTable instance);
    partial void InsertAuthorizationAttributesTable(AuthorizationAttributesTable instance);
    partial void UpdateAuthorizationAttributesTable(AuthorizationAttributesTable instance);
    partial void DeleteAuthorizationAttributesTable(AuthorizationAttributesTable instance);
    partial void InsertAuthorizationsTable(AuthorizationsTable instance);
    partial void UpdateAuthorizationsTable(AuthorizationsTable instance);
    partial void DeleteAuthorizationsTable(AuthorizationsTable instance);
    partial void InsertBizRulesTable(BizRulesTable instance);
    partial void UpdateBizRulesTable(BizRulesTable instance);
    partial void DeleteBizRulesTable(BizRulesTable instance);
    partial void InsertItemAttributesTable(ItemAttributesTable instance);
    partial void UpdateItemAttributesTable(ItemAttributesTable instance);
    partial void DeleteItemAttributesTable(ItemAttributesTable instance);
    partial void InsertItemsHierarchyTable(ItemsHierarchyTable instance);
    partial void UpdateItemsHierarchyTable(ItemsHierarchyTable instance);
    partial void DeleteItemsHierarchyTable(ItemsHierarchyTable instance);
    partial void InsertItemsTable(ItemsTable instance);
    partial void UpdateItemsTable(ItemsTable instance);
    partial void DeleteItemsTable(ItemsTable instance);
    partial void InsertLogTable(LogTable instance);
    partial void UpdateLogTable(LogTable instance);
    partial void DeleteLogTable(LogTable instance);
    partial void InsertSettings(Settings instance);
    partial void UpdateSettings(Settings instance);
    partial void DeleteSettings(Settings instance);
    partial void InsertStoreAttributesTable(StoreAttributesTable instance);
    partial void UpdateStoreAttributesTable(StoreAttributesTable instance);
    partial void DeleteStoreAttributesTable(StoreAttributesTable instance);
    partial void InsertStoreGroupMembersTable(StoreGroupMembersTable instance);
    partial void UpdateStoreGroupMembersTable(StoreGroupMembersTable instance);
    partial void DeleteStoreGroupMembersTable(StoreGroupMembersTable instance);
    partial void InsertStoreGroupsTable(StoreGroupsTable instance);
    partial void UpdateStoreGroupsTable(StoreGroupsTable instance);
    partial void DeleteStoreGroupsTable(StoreGroupsTable instance);
    partial void InsertStorePermissionsTable(StorePermissionsTable instance);
    partial void UpdateStorePermissionsTable(StorePermissionsTable instance);
    partial void DeleteStorePermissionsTable(StorePermissionsTable instance);
    partial void InsertStoresTable(StoresTable instance);
    partial void UpdateStoresTable(StoresTable instance);
    partial void DeleteStoresTable(StoresTable instance);
    partial void InsertUsersDemo(UsersDemo instance);
    partial void UpdateUsersDemo(UsersDemo instance);
    partial void DeleteUsersDemo(UsersDemo instance);
    #endregion
		
		public NetSqlAzManStorageDataContext() : 
				base(global::NetSqlAzMan.Properties.Settings.Default.NetSqlAzManStorageConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public NetSqlAzManStorageDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public NetSqlAzManStorageDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public NetSqlAzManStorageDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public NetSqlAzManStorageDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<ApplicationAttributesTable> ApplicationAttributesTable
		{
			get
			{
				return this.GetTable<ApplicationAttributesTable>();
			}
		}
		
		public System.Data.Linq.Table<ApplicationAttributesView> ApplicationAttributesView
		{
			get
			{
				return this.GetTable<ApplicationAttributesView>();
			}
		}
		
		public System.Data.Linq.Table<ApplicationGroupMembersTable> ApplicationGroupMembersTable
		{
			get
			{
				return this.GetTable<ApplicationGroupMembersTable>();
			}
		}
		
		public System.Data.Linq.Table<ApplicationGroupMembersView> ApplicationGroupMembersView
		{
			get
			{
				return this.GetTable<ApplicationGroupMembersView>();
			}
		}
		
		public System.Data.Linq.Table<ApplicationGroupsTable> ApplicationGroupsTable
		{
			get
			{
				return this.GetTable<ApplicationGroupsTable>();
			}
		}
		
		public System.Data.Linq.Table<ApplicationPermissionsTable> ApplicationPermissionsTable
		{
			get
			{
				return this.GetTable<ApplicationPermissionsTable>();
			}
		}
		
		public System.Data.Linq.Table<ApplicationsTable> ApplicationsTable
		{
			get
			{
				return this.GetTable<ApplicationsTable>();
			}
		}
		
		public System.Data.Linq.Table<ApplicationsView> ApplicationsView
		{
			get
			{
				return this.GetTable<ApplicationsView>();
			}
		}
		
		public System.Data.Linq.Table<AuthorizationAttributesTable> AuthorizationAttributesTable
		{
			get
			{
				return this.GetTable<AuthorizationAttributesTable>();
			}
		}
		
		public System.Data.Linq.Table<AuthorizationAttributesView> AuthorizationAttributesView
		{
			get
			{
				return this.GetTable<AuthorizationAttributesView>();
			}
		}
		
		public System.Data.Linq.Table<AuthorizationsTable> AuthorizationsTable
		{
			get
			{
				return this.GetTable<AuthorizationsTable>();
			}
		}
		
		public System.Data.Linq.Table<AuthorizationView> AuthorizationView
		{
			get
			{
				return this.GetTable<AuthorizationView>();
			}
		}
		
		public System.Data.Linq.Table<BizRulesTable> BizRulesTable
		{
			get
			{
				return this.GetTable<BizRulesTable>();
			}
		}
		
		public System.Data.Linq.Table<BizRuleView> BizRuleView
		{
			get
			{
				return this.GetTable<BizRuleView>();
			}
		}
		
		public System.Data.Linq.Table<DatabaseUsers> DatabaseUsers
		{
			get
			{
				return this.GetTable<DatabaseUsers>();
			}
		}
		
		public System.Data.Linq.Table<ItemAttributesTable> ItemAttributesTable
		{
			get
			{
				return this.GetTable<ItemAttributesTable>();
			}
		}
		
		public System.Data.Linq.Table<ItemAttributesView> ItemAttributesView
		{
			get
			{
				return this.GetTable<ItemAttributesView>();
			}
		}
		
		public System.Data.Linq.Table<ItemsHierarchyTable> ItemsHierarchyTable
		{
			get
			{
				return this.GetTable<ItemsHierarchyTable>();
			}
		}
		
		public System.Data.Linq.Table<ItemsHierarchyView> ItemsHierarchyView
		{
			get
			{
				return this.GetTable<ItemsHierarchyView>();
			}
		}
		
		public System.Data.Linq.Table<ItemsTable> ItemsTable
		{
			get
			{
				return this.GetTable<ItemsTable>();
			}
		}
		
		public System.Data.Linq.Table<LogTable> LogTables
		{
			get
			{
				return this.GetTable<LogTable>();
			}
		}
		
		public System.Data.Linq.Table<Settings> Settings
		{
			get
			{
				return this.GetTable<Settings>();
			}
		}
		
		public System.Data.Linq.Table<StoreAttributesTable> StoreAttributesTable
		{
			get
			{
				return this.GetTable<StoreAttributesTable>();
			}
		}
		
		public System.Data.Linq.Table<StoreAttributesView> StoreAttributesView
		{
			get
			{
				return this.GetTable<StoreAttributesView>();
			}
		}
		
		public System.Data.Linq.Table<StoreGroupMembersTable> StoreGroupMembersTable
		{
			get
			{
				return this.GetTable<StoreGroupMembersTable>();
			}
		}
		
		public System.Data.Linq.Table<StoreGroupMembersView> StoreGroupMembersView
		{
			get
			{
				return this.GetTable<StoreGroupMembersView>();
			}
		}
		
		public System.Data.Linq.Table<StoreGroupsTable> StoreGroupsTable
		{
			get
			{
				return this.GetTable<StoreGroupsTable>();
			}
		}
		
		public System.Data.Linq.Table<StorePermissionsTable> StorePermissionsTable
		{
			get
			{
				return this.GetTable<StorePermissionsTable>();
			}
		}
		
		public System.Data.Linq.Table<StoresTable> StoresTable
		{
			get
			{
				return this.GetTable<StoresTable>();
			}
		}
		
		public System.Data.Linq.Table<UsersDemo> UsersDemo
		{
			get
			{
				return this.GetTable<UsersDemo>();
			}
		}
		
		[Function(Name="dbo.netsqlazman_ApplicationAttributeDelete")]
		[return: Parameter(DbType="Int")]
		public int ApplicationAttributeDelete([Parameter(Name="ApplicationId", DbType="Int")] System.Nullable<int> applicationId, [Parameter(Name="ApplicationAttributeId", DbType="Int")] System.Nullable<int> applicationAttributeId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), applicationId, applicationAttributeId);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.netsqlazman_ApplicationAttributeInsert")]
		[return: Parameter(DbType="Int")]
		public int ApplicationAttributeInsert([Parameter(Name="ApplicationId", DbType="Int")] System.Nullable<int> applicationId, [Parameter(Name="AttributeKey", DbType="NVarChar(255)")] string attributeKey, [Parameter(Name="AttributeValue", DbType="NVarChar(4000)")] string attributeValue)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), applicationId, attributeKey, attributeValue);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.netsqlazman_ApplicationAttributes", IsComposable=true)]
		public IQueryable<ApplicationAttributesResult> ApplicationAttributes()
		{
			return this.CreateMethodCallQuery<ApplicationAttributesResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
		}
		
		[Function(Name="dbo.netsqlazman_ApplicationAttributeUpdate")]
		[return: Parameter(DbType="Int")]
		public int ApplicationAttributeUpdate([Parameter(Name="ApplicationId", DbType="Int")] System.Nullable<int> applicationId, [Parameter(Name="AttributeKey", DbType="NVarChar(255)")] string attributeKey, [Parameter(Name="AttributeValue", DbType="NVarChar(4000)")] string attributeValue, [Parameter(Name="Original_ApplicationAttributeId", DbType="Int")] System.Nullable<int> original_ApplicationAttributeId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), applicationId, attributeKey, attributeValue, original_ApplicationAttributeId);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.netsqlazman_ApplicationDelete")]
		[return: Parameter(DbType="Int")]
		public int ApplicationDelete([Parameter(Name="StoreId", DbType="Int")] System.Nullable<int> storeId, [Parameter(Name="ApplicationId", DbType="Int")] System.Nullable<int> applicationId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), storeId, applicationId);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.netsqlazman_ApplicationGroupDelete")]
		[return: Parameter(DbType="Int")]
		public int ApplicationGroupDelete([Parameter(Name="ApplicationGroupId", DbType="Int")] System.Nullable<int> applicationGroupId, [Parameter(Name="ApplicationId", DbType="Int")] System.Nullable<int> applicationId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), applicationGroupId, applicationId);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.netsqlazman_ApplicationGroupInsert")]
		[return: Parameter(DbType="Int")]
		public int ApplicationGroupInsert([Parameter(Name="ApplicationId", DbType="Int")] System.Nullable<int> applicationId, [Parameter(DbType="VarBinary(85)")] System.Data.Linq.Binary objectSid, [Parameter(Name="Name", DbType="NVarChar(255)")] string name, [Parameter(Name="Description", DbType="NVarChar(1024)")] string description, [Parameter(Name="LDapQuery", DbType="NVarChar(4000)")] string lDapQuery, [Parameter(Name="GroupType", DbType="TinyInt")] System.Nullable<byte> groupType)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), applicationId, objectSid, name, description, lDapQuery, groupType);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.netsqlazman_ApplicationGroupMemberDelete")]
		[return: Parameter(DbType="Int")]
		public int ApplicationGroupMemberDelete([Parameter(Name="ApplicationGroupMemberId", DbType="Int")] System.Nullable<int> applicationGroupMemberId, [Parameter(Name="ApplicationId", DbType="Int")] System.Nullable<int> applicationId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), applicationGroupMemberId, applicationId);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.netsqlazman_ApplicationGroupMemberInsert")]
		[return: Parameter(DbType="Int")]
		public int ApplicationGroupMemberInsert([Parameter(Name="ApplicationGroupId", DbType="Int")] System.Nullable<int> applicationGroupId, [Parameter(DbType="VarBinary(85)")] System.Data.Linq.Binary objectSid, [Parameter(Name="WhereDefined", DbType="TinyInt")] System.Nullable<byte> whereDefined, [Parameter(Name="IsMember", DbType="Bit")] System.Nullable<bool> isMember, [Parameter(Name="ApplicationId", DbType="Int")] System.Nullable<int> applicationId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), applicationGroupId, objectSid, whereDefined, isMember, applicationId);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.netsqlazman_ApplicationGroupMembers", IsComposable=true)]
		public IQueryable<ApplicationGroupMembersResult> ApplicationGroupMembers()
		{
			return this.CreateMethodCallQuery<ApplicationGroupMembersResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
		}
		
		[Function(Name="dbo.netsqlazman_ApplicationGroupMemberUpdate")]
		[return: Parameter(DbType="Int")]
		public int ApplicationGroupMemberUpdate([Parameter(Name="ApplicationGroupId", DbType="Int")] System.Nullable<int> applicationGroupId, [Parameter(DbType="VarBinary(85)")] System.Data.Linq.Binary objectSid, [Parameter(Name="WhereDefined", DbType="TinyInt")] System.Nullable<byte> whereDefined, [Parameter(Name="IsMember", DbType="Bit")] System.Nullable<bool> isMember, [Parameter(Name="Original_ApplicationGroupMemberId", DbType="Int")] System.Nullable<int> original_ApplicationGroupMemberId, [Parameter(Name="ApplicationId", DbType="Int")] System.Nullable<int> applicationId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), applicationGroupId, objectSid, whereDefined, isMember, original_ApplicationGroupMemberId, applicationId);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.netsqlazman_ApplicationGroups", IsComposable=true)]
		public IQueryable<ApplicationGroupsResult> ApplicationGroups()
		{
			return this.CreateMethodCallQuery<ApplicationGroupsResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
		}
		
		[Function(Name="dbo.netsqlazman_ApplicationGroupUpdate")]
		[return: Parameter(DbType="Int")]
		public int ApplicationGroupUpdate([Parameter(DbType="VarBinary(85)")] System.Data.Linq.Binary objectSid, [Parameter(Name="Name", DbType="NVarChar(255)")] string name, [Parameter(Name="Description", DbType="NVarChar(1024)")] string description, [Parameter(Name="LDapQuery", DbType="NVarChar(4000)")] string lDapQuery, [Parameter(Name="GroupType", DbType="TinyInt")] System.Nullable<byte> groupType, [Parameter(Name="Original_ApplicationGroupId", DbType="Int")] System.Nullable<int> original_ApplicationGroupId, [Parameter(Name="ApplicationId", DbType="Int")] System.Nullable<int> applicationId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), objectSid, name, description, lDapQuery, groupType, original_ApplicationGroupId, applicationId);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.netsqlazman_ApplicationInsert")]
		[return: Parameter(DbType="Int")]
		public int ApplicationInsert([Parameter(Name="StoreId", DbType="Int")] System.Nullable<int> storeId, [Parameter(Name="Name", DbType="NVarChar(255)")] string name, [Parameter(Name="Description", DbType="NVarChar(1024)")] string description)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), storeId, name, description);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.netsqlazman_ApplicationPermissionDelete")]
		[return: Parameter(DbType="Int")]
		public int ApplicationPermissionDelete([Parameter(Name="ApplicationPermissionId", DbType="Int")] System.Nullable<int> applicationPermissionId, [Parameter(Name="ApplicationId", DbType="Int")] System.Nullable<int> applicationId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), applicationPermissionId, applicationId);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.netsqlazman_ApplicationPermissionInsert")]
		[return: Parameter(DbType="Int")]
		public int ApplicationPermissionInsert([Parameter(Name="ApplicationId", DbType="Int")] System.Nullable<int> applicationId, [Parameter(Name="SqlUserOrRole", DbType="NVarChar(128)")] string sqlUserOrRole, [Parameter(Name="IsSqlRole", DbType="Bit")] System.Nullable<bool> isSqlRole, [Parameter(Name="NetSqlAzManFixedServerRole", DbType="TinyInt")] System.Nullable<byte> netSqlAzManFixedServerRole)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), applicationId, sqlUserOrRole, isSqlRole, netSqlAzManFixedServerRole);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.netsqlazman_ApplicationPermissions", IsComposable=true)]
		public IQueryable<ApplicationPermissionsResult> ApplicationPermissions()
		{
			return this.CreateMethodCallQuery<ApplicationPermissionsResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
		}
		
		[Function(Name="dbo.netsqlazman_Applications", IsComposable=true)]
		public IQueryable<ApplicationsResult> Applications()
		{
			return this.CreateMethodCallQuery<ApplicationsResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
		}
		
		[Function(Name="dbo.netsqlazman_ApplicationUpdate")]
		[return: Parameter(DbType="Int")]
		public int ApplicationUpdate([Parameter(Name="Name", DbType="NVarChar(255)")] string name, [Parameter(Name="Description", DbType="NVarChar(1024)")] string description, [Parameter(Name="Original_ApplicationId", DbType="Int")] System.Nullable<int> original_ApplicationId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), name, description, original_ApplicationId);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.netsqlazman_AuthorizationAttributeDelete")]
		[return: Parameter(DbType="Int")]
		public int AuthorizationAttributeDelete([Parameter(Name="AuthorizationAttributeId", DbType="Int")] System.Nullable<int> authorizationAttributeId, [Parameter(Name="ApplicationId", DbType="Int")] System.Nullable<int> applicationId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), authorizationAttributeId, applicationId);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.netsqlazman_AuthorizationAttributeInsert")]
		[return: Parameter(DbType="Int")]
		public int AuthorizationAttributeInsert([Parameter(Name="AuthorizationId", DbType="Int")] System.Nullable<int> authorizationId, [Parameter(Name="AttributeKey", DbType="NVarChar(255)")] string attributeKey, [Parameter(Name="AttributeValue", DbType="NVarChar(4000)")] string attributeValue, [Parameter(Name="ApplicationId", DbType="Int")] System.Nullable<int> applicationId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), authorizationId, attributeKey, attributeValue, applicationId);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.netsqlazman_AuthorizationAttributes", IsComposable=true)]
		public IQueryable<AuthorizationAttributesResult> AuthorizationAttributes()
		{
			return this.CreateMethodCallQuery<AuthorizationAttributesResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
		}
		
		[Function(Name="dbo.netsqlazman_AuthorizationAttributeUpdate")]
		[return: Parameter(DbType="Int")]
		public int AuthorizationAttributeUpdate([Parameter(Name="AttributeKey", DbType="NVarChar(255)")] string attributeKey, [Parameter(Name="AttributeValue", DbType="NVarChar(4000)")] string attributeValue, [Parameter(Name="Original_AuthorizationAttributeId", DbType="Int")] System.Nullable<int> original_AuthorizationAttributeId, [Parameter(Name="ApplicationId", DbType="Int")] System.Nullable<int> applicationId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), attributeKey, attributeValue, original_AuthorizationAttributeId, applicationId);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.netsqlazman_AuthorizationDelete")]
		[return: Parameter(DbType="Int")]
		public int AuthorizationDelete([Parameter(Name="AuthorizationId", DbType="Int")] System.Nullable<int> authorizationId, [Parameter(Name="ApplicationId", DbType="Int")] System.Nullable<int> applicationId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), authorizationId, applicationId);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.netsqlazman_AuthorizationInsert")]
		[return: Parameter(DbType="Int")]
		public int AuthorizationInsert([Parameter(Name="ItemId", DbType="Int")] System.Nullable<int> itemId, [Parameter(DbType="VarBinary(85)")] System.Data.Linq.Binary ownerSid, [Parameter(DbType="TinyInt")] System.Nullable<byte> ownerSidWhereDefined, [Parameter(DbType="VarBinary(85)")] System.Data.Linq.Binary objectSid, [Parameter(DbType="TinyInt")] System.Nullable<byte> objectSidWhereDefined, [Parameter(Name="AuthorizationType", DbType="TinyInt")] System.Nullable<byte> authorizationType, [Parameter(Name="ValidFrom", DbType="DateTime")] System.Nullable<System.DateTime> validFrom, [Parameter(Name="ValidTo", DbType="DateTime")] System.Nullable<System.DateTime> validTo, [Parameter(Name="ApplicationId", DbType="Int")] System.Nullable<int> applicationId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), itemId, ownerSid, ownerSidWhereDefined, objectSid, objectSidWhereDefined, authorizationType, validFrom, validTo, applicationId);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.netsqlazman_Authorizations", IsComposable=true)]
		public IQueryable<AuthorizationsResult> Authorizations()
		{
			return this.CreateMethodCallQuery<AuthorizationsResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
		}
		
		[Function(Name="dbo.netsqlazman_AuthorizationUpdate")]
		[return: Parameter(DbType="Int")]
		public int AuthorizationUpdate([Parameter(Name="ItemId", DbType="Int")] System.Nullable<int> itemId, [Parameter(DbType="VarBinary(85)")] System.Data.Linq.Binary ownerSid, [Parameter(DbType="TinyInt")] System.Nullable<byte> ownerSidWhereDefined, [Parameter(DbType="VarBinary(85)")] System.Data.Linq.Binary objectSid, [Parameter(DbType="TinyInt")] System.Nullable<byte> objectSidWhereDefined, [Parameter(Name="AuthorizationType", DbType="TinyInt")] System.Nullable<byte> authorizationType, [Parameter(Name="ValidFrom", DbType="DateTime")] System.Nullable<System.DateTime> validFrom, [Parameter(Name="ValidTo", DbType="DateTime")] System.Nullable<System.DateTime> validTo, [Parameter(Name="Original_AuthorizationId", DbType="Int")] System.Nullable<int> original_AuthorizationId, [Parameter(Name="ApplicationId", DbType="Int")] System.Nullable<int> applicationId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), itemId, ownerSid, ownerSidWhereDefined, objectSid, objectSidWhereDefined, authorizationType, validFrom, validTo, original_AuthorizationId, applicationId);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.netsqlazman_BizRuleDelete")]
		[return: Parameter(DbType="Int")]
		public int BizRuleDelete([Parameter(Name="BizRuleId", DbType="Int")] System.Nullable<int> bizRuleId, [Parameter(Name="ApplicationId", DbType="Int")] System.Nullable<int> applicationId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), bizRuleId, applicationId);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.netsqlazman_BizRuleInsert")]
		[return: Parameter(DbType="Int")]
		public int BizRuleInsert([Parameter(Name="BizRuleSource", DbType="Text")] string bizRuleSource, [Parameter(Name="BizRuleLanguage", DbType="TinyInt")] System.Nullable<byte> bizRuleLanguage, [Parameter(Name="CompiledAssembly", DbType="Image")] System.Data.Linq.Binary compiledAssembly)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), bizRuleSource, bizRuleLanguage, compiledAssembly);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.netsqlazman_BizRules", IsComposable=true)]
		public IQueryable<BizRulesResult> BizRules()
		{
			return this.CreateMethodCallQuery<BizRulesResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
		}
		
		[Function(Name="dbo.netsqlazman_BizRuleUpdate")]
		[return: Parameter(DbType="Int")]
		public int BizRuleUpdate([Parameter(Name="BizRuleSource", DbType="Text")] string bizRuleSource, [Parameter(Name="BizRuleLanguage", DbType="TinyInt")] System.Nullable<byte> bizRuleLanguage, [Parameter(Name="CompiledAssembly", DbType="Image")] System.Data.Linq.Binary compiledAssembly, [Parameter(Name="Original_BizRuleId", DbType="Int")] System.Nullable<int> original_BizRuleId, [Parameter(Name="ApplicationId", DbType="Int")] System.Nullable<int> applicationId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), bizRuleSource, bizRuleLanguage, compiledAssembly, original_BizRuleId, applicationId);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.netsqlazman_BuildUserPermissionCache")]
		[ResultType(typeof(BuildUserPermissionCacheResult1))]
		[ResultType(typeof(BuildUserPermissionCacheResult2))]
		public IMultipleResults BuildUserPermissionCache([Parameter(Name="STORENAME", DbType="NVarChar(255)")] string sTORENAME, [Parameter(Name="APPLICATIONNAME", DbType="NVarChar(255)")] string aPPLICATIONNAME)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), sTORENAME, aPPLICATIONNAME);
			return ((IMultipleResults)(result.ReturnValue));
		}
		
		[Function(Name="dbo.netsqlazman_CheckApplicationPermissions", IsComposable=true)]
		[return: Parameter(DbType="Bit")]
		public System.Nullable<bool> CheckApplicationPermissions([Parameter(Name="APPLICATIONID", DbType="Int")] System.Nullable<int> aPPLICATIONID, [Parameter(Name="ROLEID", DbType="TinyInt")] System.Nullable<byte> rOLEID)
		{
			return ((System.Nullable<bool>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), aPPLICATIONID, rOLEID).ReturnValue));
		}
		
		[Function(Name="dbo.netsqlazman_CheckStorePermissions", IsComposable=true)]
		[return: Parameter(DbType="Bit")]
		public System.Nullable<bool> CheckStorePermissions([Parameter(Name="STOREID", DbType="Int")] System.Nullable<int> sTOREID, [Parameter(Name="ROLEID", DbType="TinyInt")] System.Nullable<byte> rOLEID)
		{
			return ((System.Nullable<bool>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), sTOREID, rOLEID).ReturnValue));
		}
		
		[Function(Name="dbo.netsqlazman_ClearBizRule")]
		[return: Parameter(DbType="Int")]
		public int ClearBizRule([Parameter(Name="ItemId", DbType="Int")] System.Nullable<int> itemId, [Parameter(Name="ApplicationId", DbType="Int")] System.Nullable<int> applicationId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), itemId, applicationId);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.netsqlazman_CreateDelegate")]
		[return: Parameter(DbType="Int")]
		public int CreateDelegate([Parameter(Name="ITEMID", DbType="Int")] System.Nullable<int> iTEMID, [Parameter(Name="OWNERSID", DbType="VarBinary(85)")] System.Data.Linq.Binary oWNERSID, [Parameter(Name="OWNERSIDWHEREDEFINED", DbType="TinyInt")] System.Nullable<byte> oWNERSIDWHEREDEFINED, [Parameter(Name="DELEGATEDUSERSID", DbType="VarBinary(85)")] System.Data.Linq.Binary dELEGATEDUSERSID, [Parameter(Name="SIDWHEREDEFINED", DbType="TinyInt")] System.Nullable<byte> sIDWHEREDEFINED, [Parameter(Name="AUTHORIZATIONTYPE", DbType="TinyInt")] System.Nullable<byte> aUTHORIZATIONTYPE, [Parameter(Name="VALIDFROM", DbType="DateTime")] System.Nullable<System.DateTime> vALIDFROM, [Parameter(Name="VALIDTO", DbType="DateTime")] System.Nullable<System.DateTime> vALIDTO, [Parameter(Name="AUTHORIZATIONID", DbType="Int")] ref System.Nullable<int> aUTHORIZATIONID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iTEMID, oWNERSID, oWNERSIDWHEREDEFINED, dELEGATEDUSERSID, sIDWHEREDEFINED, aUTHORIZATIONTYPE, vALIDFROM, vALIDTO, aUTHORIZATIONID);
			aUTHORIZATIONID = ((System.Nullable<int>)(result.GetParameterValue(8)));
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.netsqlazman_DeleteDelegate")]
		[return: Parameter(DbType="Int")]
		public int DeleteDelegate([Parameter(Name="AUTHORIZATIONID", DbType="Int")] System.Nullable<int> aUTHORIZATIONID, [Parameter(Name="OWNERSID", DbType="VarBinary(85)")] System.Data.Linq.Binary oWNERSID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), aUTHORIZATIONID, oWNERSID);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.netsqlazman_DirectCheckAccess")]
		[return: Parameter(DbType="Int")]
		public int DirectCheckAccess([Parameter(Name="STORENAME", DbType="NVarChar(255)")] string sTORENAME, [Parameter(Name="APPLICATIONNAME", DbType="NVarChar(255)")] string aPPLICATIONNAME, [Parameter(Name="ITEMNAME", DbType="NVarChar(255)")] string iTEMNAME, [Parameter(Name="OPERATIONSONLY", DbType="Bit")] System.Nullable<bool> oPERATIONSONLY, [Parameter(Name="TOKEN", DbType="Image")] System.Data.Linq.Binary tOKEN, [Parameter(Name="USERGROUPSCOUNT", DbType="Int")] System.Nullable<int> uSERGROUPSCOUNT, [Parameter(Name="VALIDFOR", DbType="DateTime")] System.Nullable<System.DateTime> vALIDFOR, [Parameter(Name="LDAPPATH", DbType="NVarChar(4000)")] string lDAPPATH, [Parameter(Name="AUTHORIZATION_TYPE", DbType="TinyInt")] ref System.Nullable<byte> aUTHORIZATION_TYPE, [Parameter(Name="RETRIEVEATTRIBUTES", DbType="Bit")] System.Nullable<bool> rETRIEVEATTRIBUTES)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), sTORENAME, aPPLICATIONNAME, iTEMNAME, oPERATIONSONLY, tOKEN, uSERGROUPSCOUNT, vALIDFOR, lDAPPATH, aUTHORIZATION_TYPE, rETRIEVEATTRIBUTES);
			aUTHORIZATION_TYPE = ((System.Nullable<byte>)(result.GetParameterValue(8)));
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.netsqlazman_GetDBUsers", IsComposable=true)]
		public IQueryable<GetDBUsersResult> GetDBUsers([Parameter(Name="StoreName", DbType="NVarChar(255)")] string storeName, [Parameter(Name="ApplicationName", DbType="NVarChar(255)")] string applicationName, [Parameter(Name="DBUserSid", DbType="VarBinary(85)")] System.Data.Linq.Binary dBUserSid, [Parameter(Name="DBUserName", DbType="NVarChar(255)")] string dBUserName)
		{
			return this.CreateMethodCallQuery<GetDBUsersResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), storeName, applicationName, dBUserSid, dBUserName);
		}
		
		[Function(Name="dbo.netsqlazman_GetNameFromSid", IsComposable=true)]
		[return: Parameter(DbType="NVarChar(255)")]
		public string GetNameFromSid([Parameter(Name="StoreName", DbType="NVarChar(255)")] string storeName, [Parameter(Name="ApplicationName", DbType="NVarChar(255)")] string applicationName, [Parameter(Name="Sid", DbType="VarBinary(85)")] System.Data.Linq.Binary sid, [Parameter(Name="SidWhereDefined", DbType="TinyInt")] System.Nullable<byte> sidWhereDefined)
		{
			return ((string)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), storeName, applicationName, sid, sidWhereDefined).ReturnValue));
		}
		
		[Function(Name="dbo.netsqlazman_GrantApplicationAccess")]
		[return: Parameter(DbType="Int")]
		public int GrantApplicationAccess([Parameter(Name="ApplicationId", DbType="Int")] System.Nullable<int> applicationId, [Parameter(Name="SqlUserOrRole", DbType="NVarChar(128)")] string sqlUserOrRole, [Parameter(Name="NetSqlAzManFixedServerRole", DbType="TinyInt")] System.Nullable<byte> netSqlAzManFixedServerRole)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), applicationId, sqlUserOrRole, netSqlAzManFixedServerRole);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.netsqlazman_GrantStoreAccess")]
		[return: Parameter(DbType="Int")]
		public int GrantStoreAccess([Parameter(Name="StoreId", DbType="Int")] System.Nullable<int> storeId, [Parameter(Name="SqlUserOrRole", DbType="NVarChar(128)")] string sqlUserOrRole, [Parameter(Name="NetSqlAzManFixedServerRole", DbType="TinyInt")] System.Nullable<byte> netSqlAzManFixedServerRole)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), storeId, sqlUserOrRole, netSqlAzManFixedServerRole);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.netsqlazman_IAmAdmin", IsComposable=true)]
		[return: Parameter(DbType="Bit")]
		public System.Nullable<bool> IAmAdmin()
		{
			return ((System.Nullable<bool>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod()))).ReturnValue));
		}
		
		[Function(Name="dbo.netsqlazman_ItemAttributeDelete")]
		[return: Parameter(DbType="Int")]
		public int ItemAttributeDelete([Parameter(Name="ItemAttributeId", DbType="Int")] System.Nullable<int> itemAttributeId, [Parameter(Name="ApplicationId", DbType="Int")] System.Nullable<int> applicationId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), itemAttributeId, applicationId);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.netsqlazman_ItemAttributeInsert")]
		[return: Parameter(DbType="Int")]
		public int ItemAttributeInsert([Parameter(Name="ItemId", DbType="Int")] System.Nullable<int> itemId, [Parameter(Name="AttributeKey", DbType="NVarChar(255)")] string attributeKey, [Parameter(Name="AttributeValue", DbType="NVarChar(4000)")] string attributeValue, [Parameter(Name="ApplicationId", DbType="Int")] System.Nullable<int> applicationId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), itemId, attributeKey, attributeValue, applicationId);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.netsqlazman_ItemAttributes", IsComposable=true)]
		public IQueryable<ItemAttributesResult> ItemAttributes()
		{
			return this.CreateMethodCallQuery<ItemAttributesResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
		}
		
		[Function(Name="dbo.netsqlazman_ItemAttributeUpdate")]
		[return: Parameter(DbType="Int")]
		public int ItemAttributeUpdate([Parameter(Name="AttributeKey", DbType="NVarChar(255)")] string attributeKey, [Parameter(Name="AttributeValue", DbType="NVarChar(4000)")] string attributeValue, [Parameter(Name="Original_ItemAttributeId", DbType="Int")] System.Nullable<int> original_ItemAttributeId, [Parameter(Name="ApplicationId", DbType="Int")] System.Nullable<int> applicationId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), attributeKey, attributeValue, original_ItemAttributeId, applicationId);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.netsqlazman_ItemDelete")]
		[return: Parameter(DbType="Int")]
		public int ItemDelete([Parameter(Name="ItemId", DbType="Int")] System.Nullable<int> itemId, [Parameter(Name="ApplicationId", DbType="Int")] System.Nullable<int> applicationId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), itemId, applicationId);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.netsqlazman_ItemInsert")]
		[return: Parameter(DbType="Int")]
		public int ItemInsert([Parameter(Name="Name", DbType="NVarChar(255)")] string name, [Parameter(Name="Description", DbType="NVarChar(1024)")] string description, [Parameter(Name="ItemType", DbType="TinyInt")] System.Nullable<byte> itemType, [Parameter(Name="BizRuleId", DbType="Int")] System.Nullable<int> bizRuleId, [Parameter(Name="ApplicationId", DbType="Int")] System.Nullable<int> applicationId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), name, description, itemType, bizRuleId, applicationId);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.netsqlazman_Items", IsComposable=true)]
		public IQueryable<ItemsResult> Items()
		{
			return this.CreateMethodCallQuery<ItemsResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
		}
		
		[Function(Name="dbo.netsqlazman_ItemsHierarchy", IsComposable=true)]
		public IQueryable<ItemsHierarchyResult> ItemsHierarchy()
		{
			return this.CreateMethodCallQuery<ItemsHierarchyResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
		}
		
		[Function(Name="dbo.netsqlazman_ItemsHierarchyDelete")]
		[return: Parameter(DbType="Int")]
		public int ItemsHierarchyDelete([Parameter(Name="ItemId", DbType="Int")] System.Nullable<int> itemId, [Parameter(Name="MemberOfItemId", DbType="Int")] System.Nullable<int> memberOfItemId, [Parameter(Name="ApplicationId", DbType="Int")] System.Nullable<int> applicationId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), itemId, memberOfItemId, applicationId);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.netsqlazman_ItemsHierarchyInsert")]
		[return: Parameter(DbType="Int")]
		public int ItemsHierarchyInsert([Parameter(Name="ItemId", DbType="Int")] System.Nullable<int> itemId, [Parameter(Name="MemberOfItemId", DbType="Int")] System.Nullable<int> memberOfItemId, [Parameter(Name="ApplicationId", DbType="Int")] System.Nullable<int> applicationId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), itemId, memberOfItemId, applicationId);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.netsqlazman_ItemUpdate")]
		[return: Parameter(DbType="Int")]
		public int ItemUpdate([Parameter(Name="Name", DbType="NVarChar(255)")] string name, [Parameter(Name="Description", DbType="NVarChar(1024)")] string description, [Parameter(Name="ItemType", DbType="TinyInt")] System.Nullable<byte> itemType, [Parameter(Name="Original_ItemId", DbType="Int")] System.Nullable<int> original_ItemId, [Parameter(Name="ApplicationId", DbType="Int")] System.Nullable<int> applicationId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), name, description, itemType, original_ItemId, applicationId);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.netsqlazman_MergeAuthorizations", IsComposable=true)]
		[return: Parameter(DbType="TinyInt")]
		public System.Nullable<byte> MergeAuthorizations([Parameter(Name="AUTH1", DbType="TinyInt")] System.Nullable<byte> aUTH1, [Parameter(Name="AUTH2", DbType="TinyInt")] System.Nullable<byte> aUTH2)
		{
			return ((System.Nullable<byte>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), aUTH1, aUTH2).ReturnValue));
		}
		
		[Function(Name="dbo.netsqlazman_DBVersion", IsComposable=true)]
		[return: Parameter(DbType="NVarChar(200)")]
		public string NetSqlAzMan_DBVersion()
		{
			return ((string)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod()))).ReturnValue));
		}
		
		[Function(Name="dbo.netsqlazman_ReloadBizRule")]
		[return: Parameter(DbType="Int")]
		public int ReloadBizRule([Parameter(Name="ItemId", DbType="Int")] System.Nullable<int> itemId, [Parameter(Name="BizRuleId", DbType="Int")] System.Nullable<int> bizRuleId, [Parameter(Name="ApplicationId", DbType="Int")] System.Nullable<int> applicationId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), itemId, bizRuleId, applicationId);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.netsqlazman_RevokeApplicationAccess")]
		[return: Parameter(DbType="Int")]
		public int RevokeApplicationAccess([Parameter(Name="ApplicationId", DbType="Int")] System.Nullable<int> applicationId, [Parameter(Name="SqlUserOrRole", DbType="NVarChar(128)")] string sqlUserOrRole, [Parameter(Name="NetSqlAzManFixedServerRole", DbType="TinyInt")] System.Nullable<byte> netSqlAzManFixedServerRole)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), applicationId, sqlUserOrRole, netSqlAzManFixedServerRole);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.netsqlazman_RevokeStoreAccess")]
		[return: Parameter(DbType="Int")]
		public int RevokeStoreAccess([Parameter(Name="StoreId", DbType="Int")] System.Nullable<int> storeId, [Parameter(Name="SqlUserOrRole", DbType="NVarChar(128)")] string sqlUserOrRole, [Parameter(Name="NetSqlAzManFixedServerRole", DbType="TinyInt")] System.Nullable<byte> netSqlAzManFixedServerRole)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), storeId, sqlUserOrRole, netSqlAzManFixedServerRole);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.netsqlazman_StoreAttributeDelete")]
		[return: Parameter(DbType="Int")]
		public int StoreAttributeDelete([Parameter(Name="StoreId", DbType="Int")] System.Nullable<int> storeId, [Parameter(Name="StoreAttributeId", DbType="Int")] System.Nullable<int> storeAttributeId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), storeId, storeAttributeId);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.netsqlazman_StoreAttributeInsert")]
		[return: Parameter(DbType="Int")]
		public int StoreAttributeInsert([Parameter(Name="StoreId", DbType="Int")] System.Nullable<int> storeId, [Parameter(Name="AttributeKey", DbType="NVarChar(255)")] string attributeKey, [Parameter(Name="AttributeValue", DbType="NVarChar(4000)")] string attributeValue)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), storeId, attributeKey, attributeValue);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.netsqlazman_StoreAttributes", IsComposable=true)]
		public IQueryable<StoreAttributesResult> StoreAttributes()
		{
			return this.CreateMethodCallQuery<StoreAttributesResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
		}
		
		[Function(Name="dbo.netsqlazman_StoreAttributeUpdate")]
		[return: Parameter(DbType="Int")]
		public int StoreAttributeUpdate([Parameter(Name="StoreId", DbType="Int")] System.Nullable<int> storeId, [Parameter(Name="AttributeKey", DbType="NVarChar(255)")] string attributeKey, [Parameter(Name="AttributeValue", DbType="NVarChar(4000)")] string attributeValue, [Parameter(Name="Original_StoreAttributeId", DbType="Int")] System.Nullable<int> original_StoreAttributeId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), storeId, attributeKey, attributeValue, original_StoreAttributeId);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.netsqlazman_StoreDelete")]
		[return: Parameter(DbType="Int")]
		public int StoreDelete([Parameter(Name="Original_StoreId", DbType="Int")] System.Nullable<int> original_StoreId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), original_StoreId);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.netsqlazman_StoreGroupDelete")]
		[return: Parameter(DbType="Int")]
		public int StoreGroupDelete([Parameter(Name="Original_StoreGroupId", DbType="Int")] System.Nullable<int> original_StoreGroupId, [Parameter(Name="StoreId", DbType="Int")] System.Nullable<int> storeId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), original_StoreGroupId, storeId);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.netsqlazman_StoreGroupInsert")]
		[return: Parameter(DbType="Int")]
		public int StoreGroupInsert([Parameter(Name="StoreId", DbType="Int")] System.Nullable<int> storeId, [Parameter(DbType="VarBinary(85)")] System.Data.Linq.Binary objectSid, [Parameter(Name="Name", DbType="NVarChar(255)")] string name, [Parameter(Name="Description", DbType="NVarChar(1024)")] string description, [Parameter(Name="LDapQuery", DbType="NVarChar(4000)")] string lDapQuery, [Parameter(Name="GroupType", DbType="TinyInt")] System.Nullable<byte> groupType)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), storeId, objectSid, name, description, lDapQuery, groupType);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.netsqlazman_StoreGroupMemberDelete")]
		[return: Parameter(DbType="Int")]
		public int StoreGroupMemberDelete([Parameter(Name="StoreId", DbType="Int")] System.Nullable<int> storeId, [Parameter(Name="StoreGroupMemberId", DbType="Int")] System.Nullable<int> storeGroupMemberId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), storeId, storeGroupMemberId);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.netsqlazman_StoreGroupMemberInsert")]
		[return: Parameter(DbType="Int")]
		public int StoreGroupMemberInsert([Parameter(Name="StoreId", DbType="Int")] System.Nullable<int> storeId, [Parameter(Name="StoreGroupId", DbType="Int")] System.Nullable<int> storeGroupId, [Parameter(DbType="VarBinary(85)")] System.Data.Linq.Binary objectSid, [Parameter(Name="WhereDefined", DbType="TinyInt")] System.Nullable<byte> whereDefined, [Parameter(Name="IsMember", DbType="Bit")] System.Nullable<bool> isMember)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), storeId, storeGroupId, objectSid, whereDefined, isMember);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.netsqlazman_StoreGroupMembers", IsComposable=true)]
		public IQueryable<StoreGroupMembersResult> StoreGroupMembers()
		{
			return this.CreateMethodCallQuery<StoreGroupMembersResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
		}
		
		[Function(Name="dbo.netsqlazman_StoreGroupMemberUpdate")]
		[return: Parameter(DbType="Int")]
		public int StoreGroupMemberUpdate([Parameter(Name="StoreId", DbType="Int")] System.Nullable<int> storeId, [Parameter(Name="StoreGroupId", DbType="Int")] System.Nullable<int> storeGroupId, [Parameter(DbType="VarBinary(85)")] System.Data.Linq.Binary objectSid, [Parameter(Name="WhereDefined", DbType="TinyInt")] System.Nullable<byte> whereDefined, [Parameter(Name="IsMember", DbType="Bit")] System.Nullable<bool> isMember, [Parameter(Name="Original_StoreGroupMemberId", DbType="Int")] System.Nullable<int> original_StoreGroupMemberId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), storeId, storeGroupId, objectSid, whereDefined, isMember, original_StoreGroupMemberId);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.netsqlazman_StoreGroups", IsComposable=true)]
		public IQueryable<StoreGroupsResult> StoreGroups()
		{
			return this.CreateMethodCallQuery<StoreGroupsResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
		}
		
		[Function(Name="dbo.netsqlazman_StoreGroupUpdate")]
		[return: Parameter(DbType="Int")]
		public int StoreGroupUpdate([Parameter(Name="StoreId", DbType="Int")] System.Nullable<int> storeId, [Parameter(DbType="VarBinary(85)")] System.Data.Linq.Binary objectSid, [Parameter(Name="Name", DbType="NVarChar(255)")] string name, [Parameter(Name="Description", DbType="NVarChar(1024)")] string description, [Parameter(Name="LDapQuery", DbType="NVarChar(4000)")] string lDapQuery, [Parameter(Name="GroupType", DbType="TinyInt")] System.Nullable<byte> groupType, [Parameter(Name="Original_StoreGroupId", DbType="Int")] System.Nullable<int> original_StoreGroupId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), storeId, objectSid, name, description, lDapQuery, groupType, original_StoreGroupId);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.netsqlazman_StoreInsert")]
		[return: Parameter(DbType="Int")]
		public int StoreInsert([Parameter(Name="Name", DbType="NVarChar(255)")] string name, [Parameter(Name="Description", DbType="NVarChar(1024)")] string description)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), name, description);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.netsqlazman_StorePermissionDelete")]
		[return: Parameter(DbType="Int")]
		public int StorePermissionDelete([Parameter(Name="StorePermissionId", DbType="Int")] System.Nullable<int> storePermissionId, [Parameter(Name="StoreId", DbType="Int")] System.Nullable<int> storeId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), storePermissionId, storeId);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.netsqlazman_StorePermissionInsert")]
		[return: Parameter(DbType="Int")]
		public int StorePermissionInsert([Parameter(Name="StoreId", DbType="Int")] System.Nullable<int> storeId, [Parameter(Name="SqlUserOrRole", DbType="NVarChar(128)")] string sqlUserOrRole, [Parameter(Name="IsSqlRole", DbType="Bit")] System.Nullable<bool> isSqlRole, [Parameter(Name="NetSqlAzManFixedServerRole", DbType="TinyInt")] System.Nullable<byte> netSqlAzManFixedServerRole)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), storeId, sqlUserOrRole, isSqlRole, netSqlAzManFixedServerRole);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.netsqlazman_StorePermissions", IsComposable=true)]
		public IQueryable<StorePermissionsResult> StorePermissions()
		{
			return this.CreateMethodCallQuery<StorePermissionsResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
		}
		
		[Function(Name="dbo.netsqlazman_Stores", IsComposable=true)]
		public IQueryable<StoresResult> Stores()
		{
			return this.CreateMethodCallQuery<StoresResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
		}
		
		[Function(Name="dbo.netsqlazman_StoreUpdate")]
		[return: Parameter(DbType="Int")]
		public int StoreUpdate([Parameter(Name="Name", DbType="NVarChar(255)")] string name, [Parameter(Name="Description", DbType="NVarChar(1024)")] string description, [Parameter(Name="Original_StoreId", DbType="Int")] System.Nullable<int> original_StoreId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), name, description, original_StoreId);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.netsqlazman_CheckAccess")]
		public int CheckAccess([Parameter(Name="ITEMID", DbType="Int")] System.Nullable<int> iTEMID, [Parameter(Name="USERSID", DbType="VarBinary(85)")] System.Data.Linq.Binary uSERSID, [Parameter(Name="VALIDFOR", DbType="DateTime")] System.Nullable<System.DateTime> vALIDFOR, [Parameter(Name="LDAPPATH", DbType="NVarChar(4000)")] string lDAPPATH, [Parameter(Name="AUTHORIZATION_TYPE", DbType="TinyInt")] ref System.Nullable<byte> aUTHORIZATION_TYPE, [Parameter(Name="NETSQLAZMANMODE", DbType="Bit")] System.Nullable<bool> nETSQLAZMANMODE, [Parameter(Name="RETRIEVEATTRIBUTES", DbType="Bit")] System.Nullable<bool> rETRIEVEATTRIBUTES)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iTEMID, uSERSID, vALIDFOR, lDAPPATH, aUTHORIZATION_TYPE, nETSQLAZMANMODE, rETRIEVEATTRIBUTES);
			aUTHORIZATION_TYPE = ((System.Nullable<byte>)(result.GetParameterValue(4)));
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.netsqlazman_helplogins")]
		public int helplogins([Parameter(DbType="NVarChar(128)")] string rolename)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), rolename);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.netsqlazman_ExecuteLDAPQuery")]
		public int ExecuteLDAPQuery([Parameter(Name="LDAPPATH", DbType="NVarChar(4000)")] string lDAPPATH, [Parameter(Name="LDAPQUERY", DbType="NVarChar(4000)")] string lDAPQUERY, [Parameter(DbType="Int")] ref System.Nullable<int> members_cur)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), lDAPPATH, lDAPQUERY, members_cur);
			members_cur = ((System.Nullable<int>)(result.GetParameterValue(2)));
			return ((int)(result.ReturnValue));
		}
	}
	
	[Table(Name="dbo.netsqlazman_ApplicationAttributesTable")]
	public partial class ApplicationAttributesTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ApplicationAttributeId;
		
		private int _ApplicationId;
		
		private string _AttributeKey;
		
		private string _AttributeValue;
		
		private EntityRef<ApplicationsTable> _ApplicationsTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApplicationAttributeIdChanging(int value);
    partial void OnApplicationAttributeIdChanged();
    partial void OnApplicationIdChanging(int value);
    partial void OnApplicationIdChanged();
    partial void OnAttributeKeyChanging(string value);
    partial void OnAttributeKeyChanged();
    partial void OnAttributeValueChanging(string value);
    partial void OnAttributeValueChanged();
    #endregion
		
		public ApplicationAttributesTable()
		{
			this._ApplicationsTable = default(EntityRef<ApplicationsTable>);
			OnCreated();
		}
		
		[Column(Storage="_ApplicationAttributeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ApplicationAttributeId
		{
			get
			{
				return this._ApplicationAttributeId;
			}
			set
			{
				if ((this._ApplicationAttributeId != value))
				{
					this.OnApplicationAttributeIdChanging(value);
					this.SendPropertyChanging();
					this._ApplicationAttributeId = value;
					this.SendPropertyChanged("ApplicationAttributeId");
					this.OnApplicationAttributeIdChanged();
				}
			}
		}
		
		[Column(Storage="_ApplicationId", DbType="Int NOT NULL")]
		public int ApplicationId
		{
			get
			{
				return this._ApplicationId;
			}
			set
			{
				if ((this._ApplicationId != value))
				{
					if (this._ApplicationsTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApplicationIdChanging(value);
					this.SendPropertyChanging();
					this._ApplicationId = value;
					this.SendPropertyChanged("ApplicationId");
					this.OnApplicationIdChanged();
				}
			}
		}
		
		[Column(Storage="_AttributeKey", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string AttributeKey
		{
			get
			{
				return this._AttributeKey;
			}
			set
			{
				if ((this._AttributeKey != value))
				{
					this.OnAttributeKeyChanging(value);
					this.SendPropertyChanging();
					this._AttributeKey = value;
					this.SendPropertyChanged("AttributeKey");
					this.OnAttributeKeyChanged();
				}
			}
		}
		
		[Column(Storage="_AttributeValue", DbType="NVarChar(4000) NOT NULL", CanBeNull=false)]
		public string AttributeValue
		{
			get
			{
				return this._AttributeValue;
			}
			set
			{
				if ((this._AttributeValue != value))
				{
					this.OnAttributeValueChanging(value);
					this.SendPropertyChanging();
					this._AttributeValue = value;
					this.SendPropertyChanged("AttributeValue");
					this.OnAttributeValueChanged();
				}
			}
		}
		
		[Association(Name="ApplicationsTable_ApplicationAttributesTable", Storage="_ApplicationsTable", ThisKey="ApplicationId", OtherKey="ApplicationId", IsForeignKey=true, DeleteOnNull=true)]
		public ApplicationsTable ApplicationsTable
		{
			get
			{
				return this._ApplicationsTable.Entity;
			}
			set
			{
				ApplicationsTable previousValue = this._ApplicationsTable.Entity;
				if (((previousValue != value) 
							|| (this._ApplicationsTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ApplicationsTable.Entity = null;
						previousValue.ApplicationAttributesTable.Remove(this);
					}
					this._ApplicationsTable.Entity = value;
					if ((value != null))
					{
						value.ApplicationAttributesTable.Add(this);
						this._ApplicationId = value.ApplicationId;
					}
					else
					{
						this._ApplicationId = default(int);
					}
					this.SendPropertyChanged("ApplicationsTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.netsqlazman_ApplicationAttributesView")]
	public partial class ApplicationAttributesView
	{
		
		private int _ApplicationId;
		
		private int _StoreId;
		
		private string _Name;
		
		private string _Description;
		
		private int _ApplicationAttributeId;
		
		private string _AttributeKey;
		
		private string _AttributeValue;
		
		public ApplicationAttributesView()
		{
		}
		
		[Column(Storage="_ApplicationId", DbType="Int NOT NULL IDENTITY")]
		public int ApplicationId
		{
			get
			{
				return this._ApplicationId;
			}
			set
			{
				if ((this._ApplicationId != value))
				{
					this._ApplicationId = value;
				}
			}
		}
		
		[Column(Storage="_StoreId", DbType="Int NOT NULL")]
		public int StoreId
		{
			get
			{
				return this._StoreId;
			}
			set
			{
				if ((this._StoreId != value))
				{
					this._StoreId = value;
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(1024) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this._Description = value;
				}
			}
		}
		
		[Column(Storage="_ApplicationAttributeId", DbType="Int NOT NULL IDENTITY")]
		public int ApplicationAttributeId
		{
			get
			{
				return this._ApplicationAttributeId;
			}
			set
			{
				if ((this._ApplicationAttributeId != value))
				{
					this._ApplicationAttributeId = value;
				}
			}
		}
		
		[Column(Storage="_AttributeKey", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string AttributeKey
		{
			get
			{
				return this._AttributeKey;
			}
			set
			{
				if ((this._AttributeKey != value))
				{
					this._AttributeKey = value;
				}
			}
		}
		
		[Column(Storage="_AttributeValue", DbType="NVarChar(4000) NOT NULL", CanBeNull=false)]
		public string AttributeValue
		{
			get
			{
				return this._AttributeValue;
			}
			set
			{
				if ((this._AttributeValue != value))
				{
					this._AttributeValue = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.netsqlazman_ApplicationGroupMembersTable")]
	public partial class ApplicationGroupMembersTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ApplicationGroupMemberId;
		
		private int _ApplicationGroupId;
		
		private System.Data.Linq.Binary _ObjectSid;
		
		private byte _WhereDefined;
		
		private bool _IsMember;
		
		private EntityRef<ApplicationGroupsTable> _ApplicationGroupsTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApplicationGroupMemberIdChanging(int value);
    partial void OnApplicationGroupMemberIdChanged();
    partial void OnApplicationGroupIdChanging(int value);
    partial void OnApplicationGroupIdChanged();
    partial void OnObjectSidChanging(System.Data.Linq.Binary value);
    partial void OnObjectSidChanged();
    partial void OnWhereDefinedChanging(byte value);
    partial void OnWhereDefinedChanged();
    partial void OnIsMemberChanging(bool value);
    partial void OnIsMemberChanged();
    #endregion
		
		public ApplicationGroupMembersTable()
		{
			this._ApplicationGroupsTable = default(EntityRef<ApplicationGroupsTable>);
			OnCreated();
		}
		
		[Column(Storage="_ApplicationGroupMemberId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ApplicationGroupMemberId
		{
			get
			{
				return this._ApplicationGroupMemberId;
			}
			set
			{
				if ((this._ApplicationGroupMemberId != value))
				{
					this.OnApplicationGroupMemberIdChanging(value);
					this.SendPropertyChanging();
					this._ApplicationGroupMemberId = value;
					this.SendPropertyChanged("ApplicationGroupMemberId");
					this.OnApplicationGroupMemberIdChanged();
				}
			}
		}
		
		[Column(Storage="_ApplicationGroupId", DbType="Int NOT NULL")]
		public int ApplicationGroupId
		{
			get
			{
				return this._ApplicationGroupId;
			}
			set
			{
				if ((this._ApplicationGroupId != value))
				{
					if (this._ApplicationGroupsTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApplicationGroupIdChanging(value);
					this.SendPropertyChanging();
					this._ApplicationGroupId = value;
					this.SendPropertyChanged("ApplicationGroupId");
					this.OnApplicationGroupIdChanged();
				}
			}
		}
		
		[Column(Name="objectSid", Storage="_ObjectSid", DbType="VarBinary(85) NOT NULL", CanBeNull=false)]
		public System.Data.Linq.Binary ObjectSid
		{
			get
			{
				return this._ObjectSid;
			}
			set
			{
				if ((this._ObjectSid != value))
				{
					this.OnObjectSidChanging(value);
					this.SendPropertyChanging();
					this._ObjectSid = value;
					this.SendPropertyChanged("ObjectSid");
					this.OnObjectSidChanged();
				}
			}
		}
		
		[Column(Storage="_WhereDefined", DbType="TinyInt NOT NULL")]
		public byte WhereDefined
		{
			get
			{
				return this._WhereDefined;
			}
			set
			{
				if ((this._WhereDefined != value))
				{
					this.OnWhereDefinedChanging(value);
					this.SendPropertyChanging();
					this._WhereDefined = value;
					this.SendPropertyChanged("WhereDefined");
					this.OnWhereDefinedChanged();
				}
			}
		}
		
		[Column(Storage="_IsMember", DbType="Bit NOT NULL")]
		public bool IsMember
		{
			get
			{
				return this._IsMember;
			}
			set
			{
				if ((this._IsMember != value))
				{
					this.OnIsMemberChanging(value);
					this.SendPropertyChanging();
					this._IsMember = value;
					this.SendPropertyChanged("IsMember");
					this.OnIsMemberChanged();
				}
			}
		}
		
		[Association(Name="ApplicationGroupsTable_ApplicationGroupMembersTable", Storage="_ApplicationGroupsTable", ThisKey="ApplicationGroupId", OtherKey="ApplicationGroupId", IsForeignKey=true, DeleteOnNull=true)]
		public ApplicationGroupsTable ApplicationGroupsTable
		{
			get
			{
				return this._ApplicationGroupsTable.Entity;
			}
			set
			{
				ApplicationGroupsTable previousValue = this._ApplicationGroupsTable.Entity;
				if (((previousValue != value) 
							|| (this._ApplicationGroupsTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ApplicationGroupsTable.Entity = null;
						previousValue.ApplicationGroupMembersTable.Remove(this);
					}
					this._ApplicationGroupsTable.Entity = value;
					if ((value != null))
					{
						value.ApplicationGroupMembersTable.Add(this);
						this._ApplicationGroupId = value.ApplicationGroupId;
					}
					else
					{
						this._ApplicationGroupId = default(int);
					}
					this.SendPropertyChanged("ApplicationGroupsTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.netsqlazman_ApplicationGroupMembersView")]
	public partial class ApplicationGroupMembersView
	{
		
		private int _StoreId;
		
		private int _ApplicationId;
		
		private int _ApplicationGroupMemberId;
		
		private int _ApplicationGroupId;
		
		private string _ApplicationGroup;
		
		private string _Name;
		
		private System.Data.Linq.Binary _ObjectSid;
		
		private string _WhereDefined;
		
		private string _MemberType;
		
		public ApplicationGroupMembersView()
		{
		}
		
		[Column(Storage="_StoreId", DbType="Int NOT NULL IDENTITY")]
		public int StoreId
		{
			get
			{
				return this._StoreId;
			}
			set
			{
				if ((this._StoreId != value))
				{
					this._StoreId = value;
				}
			}
		}
		
		[Column(Storage="_ApplicationId", DbType="Int NOT NULL IDENTITY")]
		public int ApplicationId
		{
			get
			{
				return this._ApplicationId;
			}
			set
			{
				if ((this._ApplicationId != value))
				{
					this._ApplicationId = value;
				}
			}
		}
		
		[Column(Storage="_ApplicationGroupMemberId", DbType="Int NOT NULL IDENTITY")]
		public int ApplicationGroupMemberId
		{
			get
			{
				return this._ApplicationGroupMemberId;
			}
			set
			{
				if ((this._ApplicationGroupMemberId != value))
				{
					this._ApplicationGroupMemberId = value;
				}
			}
		}
		
		[Column(Storage="_ApplicationGroupId", DbType="Int NOT NULL")]
		public int ApplicationGroupId
		{
			get
			{
				return this._ApplicationGroupId;
			}
			set
			{
				if ((this._ApplicationGroupId != value))
				{
					this._ApplicationGroupId = value;
				}
			}
		}
		
		[Column(Storage="_ApplicationGroup", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string ApplicationGroup
		{
			get
			{
				return this._ApplicationGroup;
			}
			set
			{
				if ((this._ApplicationGroup != value))
				{
					this._ApplicationGroup = value;
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(255)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[Column(Name="objectSid", Storage="_ObjectSid", DbType="VarBinary(85) NOT NULL", CanBeNull=false)]
		public System.Data.Linq.Binary ObjectSid
		{
			get
			{
				return this._ObjectSid;
			}
			set
			{
				if ((this._ObjectSid != value))
				{
					this._ObjectSid = value;
				}
			}
		}
		
		[Column(Storage="_WhereDefined", DbType="VarChar(11)")]
		public string WhereDefined
		{
			get
			{
				return this._WhereDefined;
			}
			set
			{
				if ((this._WhereDefined != value))
				{
					this._WhereDefined = value;
				}
			}
		}
		
		[Column(Storage="_MemberType", DbType="VarChar(10)")]
		public string MemberType
		{
			get
			{
				return this._MemberType;
			}
			set
			{
				if ((this._MemberType != value))
				{
					this._MemberType = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.netsqlazman_ApplicationGroupsTable")]
	public partial class ApplicationGroupsTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ApplicationGroupId;
		
		private int _ApplicationId;
		
		private System.Data.Linq.Binary _ObjectSid;
		
		private string _Name;
		
		private string _Description;
		
		private string _LDapQuery;
		
		private byte _GroupType;
		
		private EntitySet<ApplicationGroupMembersTable> _ApplicationGroupMembersTable;
		
		private EntityRef<ApplicationsTable> _ApplicationsTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApplicationGroupIdChanging(int value);
    partial void OnApplicationGroupIdChanged();
    partial void OnApplicationIdChanging(int value);
    partial void OnApplicationIdChanged();
    partial void OnObjectSidChanging(System.Data.Linq.Binary value);
    partial void OnObjectSidChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnLDapQueryChanging(string value);
    partial void OnLDapQueryChanged();
    partial void OnGroupTypeChanging(byte value);
    partial void OnGroupTypeChanged();
    #endregion
		
		public ApplicationGroupsTable()
		{
			this._ApplicationGroupMembersTable = new EntitySet<ApplicationGroupMembersTable>(new Action<ApplicationGroupMembersTable>(this.attach_ApplicationGroupMembersTable), new Action<ApplicationGroupMembersTable>(this.detach_ApplicationGroupMembersTable));
			this._ApplicationsTable = default(EntityRef<ApplicationsTable>);
			OnCreated();
		}
		
		[Column(Storage="_ApplicationGroupId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ApplicationGroupId
		{
			get
			{
				return this._ApplicationGroupId;
			}
			set
			{
				if ((this._ApplicationGroupId != value))
				{
					this.OnApplicationGroupIdChanging(value);
					this.SendPropertyChanging();
					this._ApplicationGroupId = value;
					this.SendPropertyChanged("ApplicationGroupId");
					this.OnApplicationGroupIdChanged();
				}
			}
		}
		
		[Column(Storage="_ApplicationId", DbType="Int NOT NULL")]
		public int ApplicationId
		{
			get
			{
				return this._ApplicationId;
			}
			set
			{
				if ((this._ApplicationId != value))
				{
					if (this._ApplicationsTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApplicationIdChanging(value);
					this.SendPropertyChanging();
					this._ApplicationId = value;
					this.SendPropertyChanged("ApplicationId");
					this.OnApplicationIdChanged();
				}
			}
		}
		
		[Column(Name="objectSid", Storage="_ObjectSid", DbType="VarBinary(85) NOT NULL", CanBeNull=false)]
		public System.Data.Linq.Binary ObjectSid
		{
			get
			{
				return this._ObjectSid;
			}
			set
			{
				if ((this._ObjectSid != value))
				{
					this.OnObjectSidChanging(value);
					this.SendPropertyChanging();
					this._ObjectSid = value;
					this.SendPropertyChanged("ObjectSid");
					this.OnObjectSidChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(1024) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_LDapQuery", DbType="NVarChar(4000)")]
		public string LDapQuery
		{
			get
			{
				return this._LDapQuery;
			}
			set
			{
				if ((this._LDapQuery != value))
				{
					this.OnLDapQueryChanging(value);
					this.SendPropertyChanging();
					this._LDapQuery = value;
					this.SendPropertyChanged("LDapQuery");
					this.OnLDapQueryChanged();
				}
			}
		}
		
		[Column(Storage="_GroupType", DbType="TinyInt NOT NULL")]
		public byte GroupType
		{
			get
			{
				return this._GroupType;
			}
			set
			{
				if ((this._GroupType != value))
				{
					this.OnGroupTypeChanging(value);
					this.SendPropertyChanging();
					this._GroupType = value;
					this.SendPropertyChanged("GroupType");
					this.OnGroupTypeChanged();
				}
			}
		}
		
		[Association(Name="ApplicationGroupsTable_ApplicationGroupMembersTable", Storage="_ApplicationGroupMembersTable", ThisKey="ApplicationGroupId", OtherKey="ApplicationGroupId")]
		public EntitySet<ApplicationGroupMembersTable> ApplicationGroupMembersTable
		{
			get
			{
				return this._ApplicationGroupMembersTable;
			}
			set
			{
				this._ApplicationGroupMembersTable.Assign(value);
			}
		}
		
		[Association(Name="ApplicationsTable_ApplicationGroupsTable", Storage="_ApplicationsTable", ThisKey="ApplicationId", OtherKey="ApplicationId", IsForeignKey=true, DeleteOnNull=true)]
		public ApplicationsTable ApplicationsTable
		{
			get
			{
				return this._ApplicationsTable.Entity;
			}
			set
			{
				ApplicationsTable previousValue = this._ApplicationsTable.Entity;
				if (((previousValue != value) 
							|| (this._ApplicationsTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ApplicationsTable.Entity = null;
						previousValue.ApplicationGroupsTable.Remove(this);
					}
					this._ApplicationsTable.Entity = value;
					if ((value != null))
					{
						value.ApplicationGroupsTable.Add(this);
						this._ApplicationId = value.ApplicationId;
					}
					else
					{
						this._ApplicationId = default(int);
					}
					this.SendPropertyChanged("ApplicationsTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ApplicationGroupMembersTable(ApplicationGroupMembersTable entity)
		{
			this.SendPropertyChanging();
			entity.ApplicationGroupsTable = this;
		}
		
		private void detach_ApplicationGroupMembersTable(ApplicationGroupMembersTable entity)
		{
			this.SendPropertyChanging();
			entity.ApplicationGroupsTable = null;
		}
	}
	
	[Table(Name="dbo.netsqlazman_ApplicationPermissionsTable")]
	public partial class ApplicationPermissionsTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ApplicationPermissionId;
		
		private int _ApplicationId;
		
		private string _SqlUserOrRole;
		
		private bool _IsSqlRole;
		
		private byte _NetSqlAzManFixedServerRole;
		
		private EntityRef<ApplicationsTable> _ApplicationsTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApplicationPermissionIdChanging(int value);
    partial void OnApplicationPermissionIdChanged();
    partial void OnApplicationIdChanging(int value);
    partial void OnApplicationIdChanged();
    partial void OnSqlUserOrRoleChanging(string value);
    partial void OnSqlUserOrRoleChanged();
    partial void OnIsSqlRoleChanging(bool value);
    partial void OnIsSqlRoleChanged();
    partial void OnNetSqlAzManFixedServerRoleChanging(byte value);
    partial void OnNetSqlAzManFixedServerRoleChanged();
    #endregion
		
		public ApplicationPermissionsTable()
		{
			this._ApplicationsTable = default(EntityRef<ApplicationsTable>);
			OnCreated();
		}
		
		[Column(Storage="_ApplicationPermissionId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ApplicationPermissionId
		{
			get
			{
				return this._ApplicationPermissionId;
			}
			set
			{
				if ((this._ApplicationPermissionId != value))
				{
					this.OnApplicationPermissionIdChanging(value);
					this.SendPropertyChanging();
					this._ApplicationPermissionId = value;
					this.SendPropertyChanged("ApplicationPermissionId");
					this.OnApplicationPermissionIdChanged();
				}
			}
		}
		
		[Column(Storage="_ApplicationId", DbType="Int NOT NULL")]
		public int ApplicationId
		{
			get
			{
				return this._ApplicationId;
			}
			set
			{
				if ((this._ApplicationId != value))
				{
					if (this._ApplicationsTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApplicationIdChanging(value);
					this.SendPropertyChanging();
					this._ApplicationId = value;
					this.SendPropertyChanged("ApplicationId");
					this.OnApplicationIdChanged();
				}
			}
		}
		
		[Column(Storage="_SqlUserOrRole", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string SqlUserOrRole
		{
			get
			{
				return this._SqlUserOrRole;
			}
			set
			{
				if ((this._SqlUserOrRole != value))
				{
					this.OnSqlUserOrRoleChanging(value);
					this.SendPropertyChanging();
					this._SqlUserOrRole = value;
					this.SendPropertyChanged("SqlUserOrRole");
					this.OnSqlUserOrRoleChanged();
				}
			}
		}
		
		[Column(Storage="_IsSqlRole", DbType="Bit NOT NULL")]
		public bool IsSqlRole
		{
			get
			{
				return this._IsSqlRole;
			}
			set
			{
				if ((this._IsSqlRole != value))
				{
					this.OnIsSqlRoleChanging(value);
					this.SendPropertyChanging();
					this._IsSqlRole = value;
					this.SendPropertyChanged("IsSqlRole");
					this.OnIsSqlRoleChanged();
				}
			}
		}
		
		[Column(Storage="_NetSqlAzManFixedServerRole", DbType="TinyInt NOT NULL")]
		public byte NetSqlAzManFixedServerRole
		{
			get
			{
				return this._NetSqlAzManFixedServerRole;
			}
			set
			{
				if ((this._NetSqlAzManFixedServerRole != value))
				{
					this.OnNetSqlAzManFixedServerRoleChanging(value);
					this.SendPropertyChanging();
					this._NetSqlAzManFixedServerRole = value;
					this.SendPropertyChanged("NetSqlAzManFixedServerRole");
					this.OnNetSqlAzManFixedServerRoleChanged();
				}
			}
		}
		
		[Association(Name="ApplicationsTable_ApplicationPermissionsTable", Storage="_ApplicationsTable", ThisKey="ApplicationId", OtherKey="ApplicationId", IsForeignKey=true, DeleteOnNull=true)]
		public ApplicationsTable ApplicationsTable
		{
			get
			{
				return this._ApplicationsTable.Entity;
			}
			set
			{
				ApplicationsTable previousValue = this._ApplicationsTable.Entity;
				if (((previousValue != value) 
							|| (this._ApplicationsTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ApplicationsTable.Entity = null;
						previousValue.ApplicationPermissionsTable.Remove(this);
					}
					this._ApplicationsTable.Entity = value;
					if ((value != null))
					{
						value.ApplicationPermissionsTable.Add(this);
						this._ApplicationId = value.ApplicationId;
					}
					else
					{
						this._ApplicationId = default(int);
					}
					this.SendPropertyChanged("ApplicationsTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.netsqlazman_ApplicationsTable")]
	public partial class ApplicationsTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ApplicationId;
		
		private int _StoreId;
		
		private string _Name;
		
		private string _Description;
		
		private EntitySet<ApplicationAttributesTable> _ApplicationAttributesTable;
		
		private EntitySet<ApplicationGroupsTable> _ApplicationGroupsTable;
		
		private EntitySet<ApplicationPermissionsTable> _ApplicationPermissionsTable;
		
		private EntitySet<ItemsTable> _ItemsTable;
		
		private EntityRef<StoresTable> _StoresTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApplicationIdChanging(int value);
    partial void OnApplicationIdChanged();
    partial void OnStoreIdChanging(int value);
    partial void OnStoreIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public ApplicationsTable()
		{
			this._ApplicationAttributesTable = new EntitySet<ApplicationAttributesTable>(new Action<ApplicationAttributesTable>(this.attach_ApplicationAttributesTable), new Action<ApplicationAttributesTable>(this.detach_ApplicationAttributesTable));
			this._ApplicationGroupsTable = new EntitySet<ApplicationGroupsTable>(new Action<ApplicationGroupsTable>(this.attach_ApplicationGroupsTable), new Action<ApplicationGroupsTable>(this.detach_ApplicationGroupsTable));
			this._ApplicationPermissionsTable = new EntitySet<ApplicationPermissionsTable>(new Action<ApplicationPermissionsTable>(this.attach_ApplicationPermissionsTable), new Action<ApplicationPermissionsTable>(this.detach_ApplicationPermissionsTable));
			this._ItemsTable = new EntitySet<ItemsTable>(new Action<ItemsTable>(this.attach_ItemsTable), new Action<ItemsTable>(this.detach_ItemsTable));
			this._StoresTable = default(EntityRef<StoresTable>);
			OnCreated();
		}
		
		[Column(Storage="_ApplicationId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ApplicationId
		{
			get
			{
				return this._ApplicationId;
			}
			set
			{
				if ((this._ApplicationId != value))
				{
					this.OnApplicationIdChanging(value);
					this.SendPropertyChanging();
					this._ApplicationId = value;
					this.SendPropertyChanged("ApplicationId");
					this.OnApplicationIdChanged();
				}
			}
		}
		
		[Column(Storage="_StoreId", DbType="Int NOT NULL")]
		public int StoreId
		{
			get
			{
				return this._StoreId;
			}
			set
			{
				if ((this._StoreId != value))
				{
					if (this._StoresTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStoreIdChanging(value);
					this.SendPropertyChanging();
					this._StoreId = value;
					this.SendPropertyChanged("StoreId");
					this.OnStoreIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(1024) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="ApplicationsTable_ApplicationAttributesTable", Storage="_ApplicationAttributesTable", ThisKey="ApplicationId", OtherKey="ApplicationId")]
		public EntitySet<ApplicationAttributesTable> ApplicationAttributesTable
		{
			get
			{
				return this._ApplicationAttributesTable;
			}
			set
			{
				this._ApplicationAttributesTable.Assign(value);
			}
		}
		
		[Association(Name="ApplicationsTable_ApplicationGroupsTable", Storage="_ApplicationGroupsTable", ThisKey="ApplicationId", OtherKey="ApplicationId")]
		public EntitySet<ApplicationGroupsTable> ApplicationGroupsTable
		{
			get
			{
				return this._ApplicationGroupsTable;
			}
			set
			{
				this._ApplicationGroupsTable.Assign(value);
			}
		}
		
		[Association(Name="ApplicationsTable_ApplicationPermissionsTable", Storage="_ApplicationPermissionsTable", ThisKey="ApplicationId", OtherKey="ApplicationId")]
		public EntitySet<ApplicationPermissionsTable> ApplicationPermissionsTable
		{
			get
			{
				return this._ApplicationPermissionsTable;
			}
			set
			{
				this._ApplicationPermissionsTable.Assign(value);
			}
		}
		
		[Association(Name="ApplicationsTable_ItemsTable", Storage="_ItemsTable", ThisKey="ApplicationId", OtherKey="ApplicationId")]
		public EntitySet<ItemsTable> ItemsTable
		{
			get
			{
				return this._ItemsTable;
			}
			set
			{
				this._ItemsTable.Assign(value);
			}
		}
		
		[Association(Name="StoresTable_ApplicationsTable", Storage="_StoresTable", ThisKey="StoreId", OtherKey="StoreId", IsForeignKey=true, DeleteOnNull=true)]
		public StoresTable StoresTable
		{
			get
			{
				return this._StoresTable.Entity;
			}
			set
			{
				StoresTable previousValue = this._StoresTable.Entity;
				if (((previousValue != value) 
							|| (this._StoresTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StoresTable.Entity = null;
						previousValue.ApplicationsTable.Remove(this);
					}
					this._StoresTable.Entity = value;
					if ((value != null))
					{
						value.ApplicationsTable.Add(this);
						this._StoreId = value.StoreId;
					}
					else
					{
						this._StoreId = default(int);
					}
					this.SendPropertyChanged("StoresTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ApplicationAttributesTable(ApplicationAttributesTable entity)
		{
			this.SendPropertyChanging();
			entity.ApplicationsTable = this;
		}
		
		private void detach_ApplicationAttributesTable(ApplicationAttributesTable entity)
		{
			this.SendPropertyChanging();
			entity.ApplicationsTable = null;
		}
		
		private void attach_ApplicationGroupsTable(ApplicationGroupsTable entity)
		{
			this.SendPropertyChanging();
			entity.ApplicationsTable = this;
		}
		
		private void detach_ApplicationGroupsTable(ApplicationGroupsTable entity)
		{
			this.SendPropertyChanging();
			entity.ApplicationsTable = null;
		}
		
		private void attach_ApplicationPermissionsTable(ApplicationPermissionsTable entity)
		{
			this.SendPropertyChanging();
			entity.ApplicationsTable = this;
		}
		
		private void detach_ApplicationPermissionsTable(ApplicationPermissionsTable entity)
		{
			this.SendPropertyChanging();
			entity.ApplicationsTable = null;
		}
		
		private void attach_ItemsTable(ItemsTable entity)
		{
			this.SendPropertyChanging();
			entity.ApplicationsTable = this;
		}
		
		private void detach_ItemsTable(ItemsTable entity)
		{
			this.SendPropertyChanging();
			entity.ApplicationsTable = null;
		}
	}
	
	[Table(Name="dbo.netsqlazman_ApplicationsView")]
	public partial class ApplicationsView
	{
		
		private int _StoreId;
		
		private string _StoreName;
		
		private string _StoreDescription;
		
		private int _ApplicationId;
		
		private string _ApplicationName;
		
		private string _ApplicationDescription;
		
		public ApplicationsView()
		{
		}
		
		[Column(Storage="_StoreId", DbType="Int NOT NULL IDENTITY")]
		public int StoreId
		{
			get
			{
				return this._StoreId;
			}
			set
			{
				if ((this._StoreId != value))
				{
					this._StoreId = value;
				}
			}
		}
		
		[Column(Storage="_StoreName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string StoreName
		{
			get
			{
				return this._StoreName;
			}
			set
			{
				if ((this._StoreName != value))
				{
					this._StoreName = value;
				}
			}
		}
		
		[Column(Storage="_StoreDescription", DbType="NVarChar(1024) NOT NULL", CanBeNull=false)]
		public string StoreDescription
		{
			get
			{
				return this._StoreDescription;
			}
			set
			{
				if ((this._StoreDescription != value))
				{
					this._StoreDescription = value;
				}
			}
		}
		
		[Column(Storage="_ApplicationId", DbType="Int NOT NULL IDENTITY")]
		public int ApplicationId
		{
			get
			{
				return this._ApplicationId;
			}
			set
			{
				if ((this._ApplicationId != value))
				{
					this._ApplicationId = value;
				}
			}
		}
		
		[Column(Storage="_ApplicationName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string ApplicationName
		{
			get
			{
				return this._ApplicationName;
			}
			set
			{
				if ((this._ApplicationName != value))
				{
					this._ApplicationName = value;
				}
			}
		}
		
		[Column(Storage="_ApplicationDescription", DbType="NVarChar(1024) NOT NULL", CanBeNull=false)]
		public string ApplicationDescription
		{
			get
			{
				return this._ApplicationDescription;
			}
			set
			{
				if ((this._ApplicationDescription != value))
				{
					this._ApplicationDescription = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.netsqlazman_AuthorizationAttributesTable")]
	public partial class AuthorizationAttributesTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AuthorizationAttributeId;
		
		private int _AuthorizationId;
		
		private string _AttributeKey;
		
		private string _AttributeValue;
		
		private EntityRef<AuthorizationsTable> _AuthorizationsTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAuthorizationAttributeIdChanging(int value);
    partial void OnAuthorizationAttributeIdChanged();
    partial void OnAuthorizationIdChanging(int value);
    partial void OnAuthorizationIdChanged();
    partial void OnAttributeKeyChanging(string value);
    partial void OnAttributeKeyChanged();
    partial void OnAttributeValueChanging(string value);
    partial void OnAttributeValueChanged();
    #endregion
		
		public AuthorizationAttributesTable()
		{
			this._AuthorizationsTable = default(EntityRef<AuthorizationsTable>);
			OnCreated();
		}
		
		[Column(Storage="_AuthorizationAttributeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AuthorizationAttributeId
		{
			get
			{
				return this._AuthorizationAttributeId;
			}
			set
			{
				if ((this._AuthorizationAttributeId != value))
				{
					this.OnAuthorizationAttributeIdChanging(value);
					this.SendPropertyChanging();
					this._AuthorizationAttributeId = value;
					this.SendPropertyChanged("AuthorizationAttributeId");
					this.OnAuthorizationAttributeIdChanged();
				}
			}
		}
		
		[Column(Storage="_AuthorizationId", DbType="Int NOT NULL")]
		public int AuthorizationId
		{
			get
			{
				return this._AuthorizationId;
			}
			set
			{
				if ((this._AuthorizationId != value))
				{
					if (this._AuthorizationsTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAuthorizationIdChanging(value);
					this.SendPropertyChanging();
					this._AuthorizationId = value;
					this.SendPropertyChanged("AuthorizationId");
					this.OnAuthorizationIdChanged();
				}
			}
		}
		
		[Column(Storage="_AttributeKey", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string AttributeKey
		{
			get
			{
				return this._AttributeKey;
			}
			set
			{
				if ((this._AttributeKey != value))
				{
					this.OnAttributeKeyChanging(value);
					this.SendPropertyChanging();
					this._AttributeKey = value;
					this.SendPropertyChanged("AttributeKey");
					this.OnAttributeKeyChanged();
				}
			}
		}
		
		[Column(Storage="_AttributeValue", DbType="NVarChar(4000) NOT NULL", CanBeNull=false)]
		public string AttributeValue
		{
			get
			{
				return this._AttributeValue;
			}
			set
			{
				if ((this._AttributeValue != value))
				{
					this.OnAttributeValueChanging(value);
					this.SendPropertyChanging();
					this._AttributeValue = value;
					this.SendPropertyChanged("AttributeValue");
					this.OnAttributeValueChanged();
				}
			}
		}
		
		[Association(Name="AuthorizationsTable_AuthorizationAttributesTable", Storage="_AuthorizationsTable", ThisKey="AuthorizationId", OtherKey="AuthorizationId", IsForeignKey=true, DeleteOnNull=true)]
		public AuthorizationsTable AuthorizationsTable
		{
			get
			{
				return this._AuthorizationsTable.Entity;
			}
			set
			{
				AuthorizationsTable previousValue = this._AuthorizationsTable.Entity;
				if (((previousValue != value) 
							|| (this._AuthorizationsTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AuthorizationsTable.Entity = null;
						previousValue.AuthorizationAttributesTable.Remove(this);
					}
					this._AuthorizationsTable.Entity = value;
					if ((value != null))
					{
						value.AuthorizationAttributesTable.Add(this);
						this._AuthorizationId = value.AuthorizationId;
					}
					else
					{
						this._AuthorizationId = default(int);
					}
					this.SendPropertyChanged("AuthorizationsTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.netsqlazman_AuthorizationAttributesView")]
	public partial class AuthorizationAttributesView
	{
		
		private int _AuthorizationId;
		
		private int _ItemId;
		
		private string _Owner;
		
		private string _Name;
		
		private System.Data.Linq.Binary _ObjectSid;
		
		private string _SidWhereDefined;
		
		private string _AuthorizationType;
		
		private System.Nullable<System.DateTime> _ValidFrom;
		
		private System.Nullable<System.DateTime> _ValidTo;
		
		private int _AuthorizationAttributeId;
		
		private string _AttributeKey;
		
		private string _AttributeValue;
		
		public AuthorizationAttributesView()
		{
		}
		
		[Column(Storage="_AuthorizationId", DbType="Int NOT NULL IDENTITY")]
		public int AuthorizationId
		{
			get
			{
				return this._AuthorizationId;
			}
			set
			{
				if ((this._AuthorizationId != value))
				{
					this._AuthorizationId = value;
				}
			}
		}
		
		[Column(Storage="_ItemId", DbType="Int NOT NULL")]
		public int ItemId
		{
			get
			{
				return this._ItemId;
			}
			set
			{
				if ((this._ItemId != value))
				{
					this._ItemId = value;
				}
			}
		}
		
		[Column(Storage="_Owner", DbType="NVarChar(255)")]
		public string Owner
		{
			get
			{
				return this._Owner;
			}
			set
			{
				if ((this._Owner != value))
				{
					this._Owner = value;
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(255)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[Column(Name="objectSid", Storage="_ObjectSid", DbType="VarBinary(85) NOT NULL", CanBeNull=false)]
		public System.Data.Linq.Binary ObjectSid
		{
			get
			{
				return this._ObjectSid;
			}
			set
			{
				if ((this._ObjectSid != value))
				{
					this._ObjectSid = value;
				}
			}
		}
		
		[Column(Storage="_SidWhereDefined", DbType="VarChar(11)")]
		public string SidWhereDefined
		{
			get
			{
				return this._SidWhereDefined;
			}
			set
			{
				if ((this._SidWhereDefined != value))
				{
					this._SidWhereDefined = value;
				}
			}
		}
		
		[Column(Storage="_AuthorizationType", DbType="VarChar(19)")]
		public string AuthorizationType
		{
			get
			{
				return this._AuthorizationType;
			}
			set
			{
				if ((this._AuthorizationType != value))
				{
					this._AuthorizationType = value;
				}
			}
		}
		
		[Column(Storage="_ValidFrom", DbType="DateTime")]
		public System.Nullable<System.DateTime> ValidFrom
		{
			get
			{
				return this._ValidFrom;
			}
			set
			{
				if ((this._ValidFrom != value))
				{
					this._ValidFrom = value;
				}
			}
		}
		
		[Column(Storage="_ValidTo", DbType="DateTime")]
		public System.Nullable<System.DateTime> ValidTo
		{
			get
			{
				return this._ValidTo;
			}
			set
			{
				if ((this._ValidTo != value))
				{
					this._ValidTo = value;
				}
			}
		}
		
		[Column(Storage="_AuthorizationAttributeId", DbType="Int NOT NULL IDENTITY")]
		public int AuthorizationAttributeId
		{
			get
			{
				return this._AuthorizationAttributeId;
			}
			set
			{
				if ((this._AuthorizationAttributeId != value))
				{
					this._AuthorizationAttributeId = value;
				}
			}
		}
		
		[Column(Storage="_AttributeKey", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string AttributeKey
		{
			get
			{
				return this._AttributeKey;
			}
			set
			{
				if ((this._AttributeKey != value))
				{
					this._AttributeKey = value;
				}
			}
		}
		
		[Column(Storage="_AttributeValue", DbType="NVarChar(4000) NOT NULL", CanBeNull=false)]
		public string AttributeValue
		{
			get
			{
				return this._AttributeValue;
			}
			set
			{
				if ((this._AttributeValue != value))
				{
					this._AttributeValue = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.netsqlazman_AuthorizationsTable")]
	public partial class AuthorizationsTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AuthorizationId;
		
		private int _ItemId;
		
		private System.Data.Linq.Binary _OwnerSid;
		
		private byte _OwnerSidWhereDefined;
		
		private System.Data.Linq.Binary _ObjectSid;
		
		private byte _ObjectSidWhereDefined;
		
		private byte _AuthorizationType;
		
		private System.Nullable<System.DateTime> _ValidFrom;
		
		private System.Nullable<System.DateTime> _ValidTo;
		
		private EntitySet<AuthorizationAttributesTable> _AuthorizationAttributesTable;
		
		private EntityRef<ItemsTable> _ItemsTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAuthorizationIdChanging(int value);
    partial void OnAuthorizationIdChanged();
    partial void OnItemIdChanging(int value);
    partial void OnItemIdChanged();
    partial void OnOwnerSidChanging(System.Data.Linq.Binary value);
    partial void OnOwnerSidChanged();
    partial void OnOwnerSidWhereDefinedChanging(byte value);
    partial void OnOwnerSidWhereDefinedChanged();
    partial void OnObjectSidChanging(System.Data.Linq.Binary value);
    partial void OnObjectSidChanged();
    partial void OnObjectSidWhereDefinedChanging(byte value);
    partial void OnObjectSidWhereDefinedChanged();
    partial void OnAuthorizationTypeChanging(byte value);
    partial void OnAuthorizationTypeChanged();
    partial void OnValidFromChanging(System.Nullable<System.DateTime> value);
    partial void OnValidFromChanged();
    partial void OnValidToChanging(System.Nullable<System.DateTime> value);
    partial void OnValidToChanged();
    #endregion
		
		public AuthorizationsTable()
		{
			this._AuthorizationAttributesTable = new EntitySet<AuthorizationAttributesTable>(new Action<AuthorizationAttributesTable>(this.attach_AuthorizationAttributesTable), new Action<AuthorizationAttributesTable>(this.detach_AuthorizationAttributesTable));
			this._ItemsTable = default(EntityRef<ItemsTable>);
			OnCreated();
		}
		
		[Column(Storage="_AuthorizationId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AuthorizationId
		{
			get
			{
				return this._AuthorizationId;
			}
			set
			{
				if ((this._AuthorizationId != value))
				{
					this.OnAuthorizationIdChanging(value);
					this.SendPropertyChanging();
					this._AuthorizationId = value;
					this.SendPropertyChanged("AuthorizationId");
					this.OnAuthorizationIdChanged();
				}
			}
		}
		
		[Column(Storage="_ItemId", DbType="Int NOT NULL")]
		public int ItemId
		{
			get
			{
				return this._ItemId;
			}
			set
			{
				if ((this._ItemId != value))
				{
					if (this._ItemsTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnItemIdChanging(value);
					this.SendPropertyChanging();
					this._ItemId = value;
					this.SendPropertyChanged("ItemId");
					this.OnItemIdChanged();
				}
			}
		}
		
		[Column(Name="ownerSid", Storage="_OwnerSid", DbType="VarBinary(85) NOT NULL", CanBeNull=false)]
		public System.Data.Linq.Binary OwnerSid
		{
			get
			{
				return this._OwnerSid;
			}
			set
			{
				if ((this._OwnerSid != value))
				{
					this.OnOwnerSidChanging(value);
					this.SendPropertyChanging();
					this._OwnerSid = value;
					this.SendPropertyChanged("OwnerSid");
					this.OnOwnerSidChanged();
				}
			}
		}
		
		[Column(Name="ownerSidWhereDefined", Storage="_OwnerSidWhereDefined", DbType="TinyInt NOT NULL")]
		public byte OwnerSidWhereDefined
		{
			get
			{
				return this._OwnerSidWhereDefined;
			}
			set
			{
				if ((this._OwnerSidWhereDefined != value))
				{
					this.OnOwnerSidWhereDefinedChanging(value);
					this.SendPropertyChanging();
					this._OwnerSidWhereDefined = value;
					this.SendPropertyChanged("OwnerSidWhereDefined");
					this.OnOwnerSidWhereDefinedChanged();
				}
			}
		}
		
		[Column(Name="objectSid", Storage="_ObjectSid", DbType="VarBinary(85) NOT NULL", CanBeNull=false)]
		public System.Data.Linq.Binary ObjectSid
		{
			get
			{
				return this._ObjectSid;
			}
			set
			{
				if ((this._ObjectSid != value))
				{
					this.OnObjectSidChanging(value);
					this.SendPropertyChanging();
					this._ObjectSid = value;
					this.SendPropertyChanged("ObjectSid");
					this.OnObjectSidChanged();
				}
			}
		}
		
		[Column(Name="objectSidWhereDefined", Storage="_ObjectSidWhereDefined", DbType="TinyInt NOT NULL")]
		public byte ObjectSidWhereDefined
		{
			get
			{
				return this._ObjectSidWhereDefined;
			}
			set
			{
				if ((this._ObjectSidWhereDefined != value))
				{
					this.OnObjectSidWhereDefinedChanging(value);
					this.SendPropertyChanging();
					this._ObjectSidWhereDefined = value;
					this.SendPropertyChanged("ObjectSidWhereDefined");
					this.OnObjectSidWhereDefinedChanged();
				}
			}
		}
		
		[Column(Storage="_AuthorizationType", DbType="TinyInt NOT NULL")]
		public byte AuthorizationType
		{
			get
			{
				return this._AuthorizationType;
			}
			set
			{
				if ((this._AuthorizationType != value))
				{
					this.OnAuthorizationTypeChanging(value);
					this.SendPropertyChanging();
					this._AuthorizationType = value;
					this.SendPropertyChanged("AuthorizationType");
					this.OnAuthorizationTypeChanged();
				}
			}
		}
		
		[Column(Storage="_ValidFrom", DbType="DateTime")]
		public System.Nullable<System.DateTime> ValidFrom
		{
			get
			{
				return this._ValidFrom;
			}
			set
			{
				if ((this._ValidFrom != value))
				{
					this.OnValidFromChanging(value);
					this.SendPropertyChanging();
					this._ValidFrom = value;
					this.SendPropertyChanged("ValidFrom");
					this.OnValidFromChanged();
				}
			}
		}
		
		[Column(Storage="_ValidTo", DbType="DateTime")]
		public System.Nullable<System.DateTime> ValidTo
		{
			get
			{
				return this._ValidTo;
			}
			set
			{
				if ((this._ValidTo != value))
				{
					this.OnValidToChanging(value);
					this.SendPropertyChanging();
					this._ValidTo = value;
					this.SendPropertyChanged("ValidTo");
					this.OnValidToChanged();
				}
			}
		}
		
		[Association(Name="AuthorizationsTable_AuthorizationAttributesTable", Storage="_AuthorizationAttributesTable", ThisKey="AuthorizationId", OtherKey="AuthorizationId")]
		public EntitySet<AuthorizationAttributesTable> AuthorizationAttributesTable
		{
			get
			{
				return this._AuthorizationAttributesTable;
			}
			set
			{
				this._AuthorizationAttributesTable.Assign(value);
			}
		}
		
		[Association(Name="ItemsTable_AuthorizationsTable", Storage="_ItemsTable", ThisKey="ItemId", OtherKey="ItemId", IsForeignKey=true, DeleteOnNull=true)]
		public ItemsTable ItemsTable
		{
			get
			{
				return this._ItemsTable.Entity;
			}
			set
			{
				ItemsTable previousValue = this._ItemsTable.Entity;
				if (((previousValue != value) 
							|| (this._ItemsTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ItemsTable.Entity = null;
						previousValue.AuthorizationsTable.Remove(this);
					}
					this._ItemsTable.Entity = value;
					if ((value != null))
					{
						value.AuthorizationsTable.Add(this);
						this._ItemId = value.ItemId;
					}
					else
					{
						this._ItemId = default(int);
					}
					this.SendPropertyChanged("ItemsTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AuthorizationAttributesTable(AuthorizationAttributesTable entity)
		{
			this.SendPropertyChanging();
			entity.AuthorizationsTable = this;
		}
		
		private void detach_AuthorizationAttributesTable(AuthorizationAttributesTable entity)
		{
			this.SendPropertyChanging();
			entity.AuthorizationsTable = null;
		}
	}
	
	[Table(Name="dbo.netsqlazman_AuthorizationView")]
	public partial class AuthorizationView
	{
		
		private int _AuthorizationId;
		
		private int _ItemId;
		
		private string _Owner;
		
		private string _Name;
		
		private System.Data.Linq.Binary _ObjectSid;
		
		private string _SidWhereDefined;
		
		private string _AuthorizationType;
		
		private System.Nullable<System.DateTime> _ValidFrom;
		
		private System.Nullable<System.DateTime> _ValidTo;
		
		public AuthorizationView()
		{
		}
		
		[Column(Storage="_AuthorizationId", DbType="Int NOT NULL IDENTITY")]
		public int AuthorizationId
		{
			get
			{
				return this._AuthorizationId;
			}
			set
			{
				if ((this._AuthorizationId != value))
				{
					this._AuthorizationId = value;
				}
			}
		}
		
		[Column(Storage="_ItemId", DbType="Int NOT NULL")]
		public int ItemId
		{
			get
			{
				return this._ItemId;
			}
			set
			{
				if ((this._ItemId != value))
				{
					this._ItemId = value;
				}
			}
		}
		
		[Column(Storage="_Owner", DbType="NVarChar(255)")]
		public string Owner
		{
			get
			{
				return this._Owner;
			}
			set
			{
				if ((this._Owner != value))
				{
					this._Owner = value;
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(255)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[Column(Name="objectSid", Storage="_ObjectSid", DbType="VarBinary(85) NOT NULL", CanBeNull=false)]
		public System.Data.Linq.Binary ObjectSid
		{
			get
			{
				return this._ObjectSid;
			}
			set
			{
				if ((this._ObjectSid != value))
				{
					this._ObjectSid = value;
				}
			}
		}
		
		[Column(Storage="_SidWhereDefined", DbType="VarChar(11)")]
		public string SidWhereDefined
		{
			get
			{
				return this._SidWhereDefined;
			}
			set
			{
				if ((this._SidWhereDefined != value))
				{
					this._SidWhereDefined = value;
				}
			}
		}
		
		[Column(Storage="_AuthorizationType", DbType="VarChar(19)")]
		public string AuthorizationType
		{
			get
			{
				return this._AuthorizationType;
			}
			set
			{
				if ((this._AuthorizationType != value))
				{
					this._AuthorizationType = value;
				}
			}
		}
		
		[Column(Storage="_ValidFrom", DbType="DateTime")]
		public System.Nullable<System.DateTime> ValidFrom
		{
			get
			{
				return this._ValidFrom;
			}
			set
			{
				if ((this._ValidFrom != value))
				{
					this._ValidFrom = value;
				}
			}
		}
		
		[Column(Storage="_ValidTo", DbType="DateTime")]
		public System.Nullable<System.DateTime> ValidTo
		{
			get
			{
				return this._ValidTo;
			}
			set
			{
				if ((this._ValidTo != value))
				{
					this._ValidTo = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.netsqlazman_BizRulesTable")]
	public partial class BizRulesTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BizRuleId;
		
		private string _BizRuleSource;
		
		private byte _BizRuleLanguage;
		
		private System.Data.Linq.Binary _CompiledAssembly;
		
		private EntitySet<ItemsTable> _ItemsTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBizRuleIdChanging(int value);
    partial void OnBizRuleIdChanged();
    partial void OnBizRuleSourceChanging(string value);
    partial void OnBizRuleSourceChanged();
    partial void OnBizRuleLanguageChanging(byte value);
    partial void OnBizRuleLanguageChanged();
    partial void OnCompiledAssemblyChanging(System.Data.Linq.Binary value);
    partial void OnCompiledAssemblyChanged();
    #endregion
		
		public BizRulesTable()
		{
			this._ItemsTable = new EntitySet<ItemsTable>(new Action<ItemsTable>(this.attach_ItemsTable), new Action<ItemsTable>(this.detach_ItemsTable));
			OnCreated();
		}
		
		[Column(Storage="_BizRuleId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BizRuleId
		{
			get
			{
				return this._BizRuleId;
			}
			set
			{
				if ((this._BizRuleId != value))
				{
					this.OnBizRuleIdChanging(value);
					this.SendPropertyChanging();
					this._BizRuleId = value;
					this.SendPropertyChanged("BizRuleId");
					this.OnBizRuleIdChanged();
				}
			}
		}
		
		[Column(Storage="_BizRuleSource", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string BizRuleSource
		{
			get
			{
				return this._BizRuleSource;
			}
			set
			{
				if ((this._BizRuleSource != value))
				{
					this.OnBizRuleSourceChanging(value);
					this.SendPropertyChanging();
					this._BizRuleSource = value;
					this.SendPropertyChanged("BizRuleSource");
					this.OnBizRuleSourceChanged();
				}
			}
		}
		
		[Column(Storage="_BizRuleLanguage", DbType="TinyInt NOT NULL")]
		public byte BizRuleLanguage
		{
			get
			{
				return this._BizRuleLanguage;
			}
			set
			{
				if ((this._BizRuleLanguage != value))
				{
					this.OnBizRuleLanguageChanging(value);
					this.SendPropertyChanging();
					this._BizRuleLanguage = value;
					this.SendPropertyChanged("BizRuleLanguage");
					this.OnBizRuleLanguageChanged();
				}
			}
		}
		
		[Column(Storage="_CompiledAssembly", DbType="Image NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary CompiledAssembly
		{
			get
			{
				return this._CompiledAssembly;
			}
			set
			{
				if ((this._CompiledAssembly != value))
				{
					this.OnCompiledAssemblyChanging(value);
					this.SendPropertyChanging();
					this._CompiledAssembly = value;
					this.SendPropertyChanged("CompiledAssembly");
					this.OnCompiledAssemblyChanged();
				}
			}
		}
		
		[Association(Name="BizRulesTable_ItemsTable", Storage="_ItemsTable", ThisKey="BizRuleId", OtherKey="BizRuleId")]
		public EntitySet<ItemsTable> ItemsTable
		{
			get
			{
				return this._ItemsTable;
			}
			set
			{
				this._ItemsTable.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ItemsTable(ItemsTable entity)
		{
			this.SendPropertyChanging();
			entity.BizRulesTable = this;
		}
		
		private void detach_ItemsTable(ItemsTable entity)
		{
			this.SendPropertyChanging();
			entity.BizRulesTable = null;
		}
	}
	
	[Table(Name="dbo.netsqlazman_BizRuleView")]
	public partial class BizRuleView
	{
		
		private int _ItemId;
		
		private int _ApplicationId;
		
		private string _Name;
		
		private string _Description;
		
		private byte _ItemType;
		
		private string _BizRuleSource;
		
		private byte _BizRuleLanguage;
		
		private System.Data.Linq.Binary _CompiledAssembly;
		
		public BizRuleView()
		{
		}
		
		[Column(Storage="_ItemId", DbType="Int NOT NULL IDENTITY")]
		public int ItemId
		{
			get
			{
				return this._ItemId;
			}
			set
			{
				if ((this._ItemId != value))
				{
					this._ItemId = value;
				}
			}
		}
		
		[Column(Storage="_ApplicationId", DbType="Int NOT NULL")]
		public int ApplicationId
		{
			get
			{
				return this._ApplicationId;
			}
			set
			{
				if ((this._ApplicationId != value))
				{
					this._ApplicationId = value;
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(1024) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this._Description = value;
				}
			}
		}
		
		[Column(Storage="_ItemType", DbType="TinyInt NOT NULL")]
		public byte ItemType
		{
			get
			{
				return this._ItemType;
			}
			set
			{
				if ((this._ItemType != value))
				{
					this._ItemType = value;
				}
			}
		}
		
		[Column(Storage="_BizRuleSource", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string BizRuleSource
		{
			get
			{
				return this._BizRuleSource;
			}
			set
			{
				if ((this._BizRuleSource != value))
				{
					this._BizRuleSource = value;
				}
			}
		}
		
		[Column(Storage="_BizRuleLanguage", DbType="TinyInt NOT NULL")]
		public byte BizRuleLanguage
		{
			get
			{
				return this._BizRuleLanguage;
			}
			set
			{
				if ((this._BizRuleLanguage != value))
				{
					this._BizRuleLanguage = value;
				}
			}
		}
		
		[Column(Storage="_CompiledAssembly", DbType="Image NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary CompiledAssembly
		{
			get
			{
				return this._CompiledAssembly;
			}
			set
			{
				if ((this._CompiledAssembly != value))
				{
					this._CompiledAssembly = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.netsqlazman_DatabaseUsers")]
	public partial class DatabaseUsers
	{
		
		private System.Data.Linq.Binary _DBUserSid;
		
		private string _DBUserName;
		
		public DatabaseUsers()
		{
		}
		
		[Column(Storage="_DBUserSid", DbType="VarBinary(85)", CanBeNull=true)]
		public System.Data.Linq.Binary DBUserSid
		{
			get
			{
				return this._DBUserSid;
			}
			set
			{
				if ((this._DBUserSid != value))
				{
					this._DBUserSid = value;
				}
			}
		}
		
		[Column(Storage="_DBUserName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string DBUserName
		{
			get
			{
				return this._DBUserName;
			}
			set
			{
				if ((this._DBUserName != value))
				{
					this._DBUserName = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.netsqlazman_ItemAttributesTable")]
	public partial class ItemAttributesTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ItemAttributeId;
		
		private int _ItemId;
		
		private string _AttributeKey;
		
		private string _AttributeValue;
		
		private EntityRef<ItemsTable> _ItemsTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnItemAttributeIdChanging(int value);
    partial void OnItemAttributeIdChanged();
    partial void OnItemIdChanging(int value);
    partial void OnItemIdChanged();
    partial void OnAttributeKeyChanging(string value);
    partial void OnAttributeKeyChanged();
    partial void OnAttributeValueChanging(string value);
    partial void OnAttributeValueChanged();
    #endregion
		
		public ItemAttributesTable()
		{
			this._ItemsTable = default(EntityRef<ItemsTable>);
			OnCreated();
		}
		
		[Column(Storage="_ItemAttributeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ItemAttributeId
		{
			get
			{
				return this._ItemAttributeId;
			}
			set
			{
				if ((this._ItemAttributeId != value))
				{
					this.OnItemAttributeIdChanging(value);
					this.SendPropertyChanging();
					this._ItemAttributeId = value;
					this.SendPropertyChanged("ItemAttributeId");
					this.OnItemAttributeIdChanged();
				}
			}
		}
		
		[Column(Storage="_ItemId", DbType="Int NOT NULL")]
		public int ItemId
		{
			get
			{
				return this._ItemId;
			}
			set
			{
				if ((this._ItemId != value))
				{
					if (this._ItemsTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnItemIdChanging(value);
					this.SendPropertyChanging();
					this._ItemId = value;
					this.SendPropertyChanged("ItemId");
					this.OnItemIdChanged();
				}
			}
		}
		
		[Column(Storage="_AttributeKey", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string AttributeKey
		{
			get
			{
				return this._AttributeKey;
			}
			set
			{
				if ((this._AttributeKey != value))
				{
					this.OnAttributeKeyChanging(value);
					this.SendPropertyChanging();
					this._AttributeKey = value;
					this.SendPropertyChanged("AttributeKey");
					this.OnAttributeKeyChanged();
				}
			}
		}
		
		[Column(Storage="_AttributeValue", DbType="NVarChar(4000) NOT NULL", CanBeNull=false)]
		public string AttributeValue
		{
			get
			{
				return this._AttributeValue;
			}
			set
			{
				if ((this._AttributeValue != value))
				{
					this.OnAttributeValueChanging(value);
					this.SendPropertyChanging();
					this._AttributeValue = value;
					this.SendPropertyChanged("AttributeValue");
					this.OnAttributeValueChanged();
				}
			}
		}
		
		[Association(Name="ItemsTable_ItemAttributesTable", Storage="_ItemsTable", ThisKey="ItemId", OtherKey="ItemId", IsForeignKey=true, DeleteOnNull=true)]
		public ItemsTable ItemsTable
		{
			get
			{
				return this._ItemsTable.Entity;
			}
			set
			{
				ItemsTable previousValue = this._ItemsTable.Entity;
				if (((previousValue != value) 
							|| (this._ItemsTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ItemsTable.Entity = null;
						previousValue.ItemAttributesTable.Remove(this);
					}
					this._ItemsTable.Entity = value;
					if ((value != null))
					{
						value.ItemAttributesTable.Add(this);
						this._ItemId = value.ItemId;
					}
					else
					{
						this._ItemId = default(int);
					}
					this.SendPropertyChanged("ItemsTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.netsqlazman_ItemAttributesView")]
	public partial class ItemAttributesView
	{
		
		private int _ItemId;
		
		private int _ApplicationId;
		
		private string _Name;
		
		private string _Description;
		
		private string _ItemType;
		
		private int _ItemAttributeId;
		
		private string _AttributeKey;
		
		private string _AttributeValue;
		
		public ItemAttributesView()
		{
		}
		
		[Column(Storage="_ItemId", DbType="Int NOT NULL IDENTITY")]
		public int ItemId
		{
			get
			{
				return this._ItemId;
			}
			set
			{
				if ((this._ItemId != value))
				{
					this._ItemId = value;
				}
			}
		}
		
		[Column(Storage="_ApplicationId", DbType="Int NOT NULL")]
		public int ApplicationId
		{
			get
			{
				return this._ApplicationId;
			}
			set
			{
				if ((this._ApplicationId != value))
				{
					this._ApplicationId = value;
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(1024) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this._Description = value;
				}
			}
		}
		
		[Column(Storage="_ItemType", DbType="VarChar(9)")]
		public string ItemType
		{
			get
			{
				return this._ItemType;
			}
			set
			{
				if ((this._ItemType != value))
				{
					this._ItemType = value;
				}
			}
		}
		
		[Column(Storage="_ItemAttributeId", DbType="Int NOT NULL IDENTITY")]
		public int ItemAttributeId
		{
			get
			{
				return this._ItemAttributeId;
			}
			set
			{
				if ((this._ItemAttributeId != value))
				{
					this._ItemAttributeId = value;
				}
			}
		}
		
		[Column(Storage="_AttributeKey", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string AttributeKey
		{
			get
			{
				return this._AttributeKey;
			}
			set
			{
				if ((this._AttributeKey != value))
				{
					this._AttributeKey = value;
				}
			}
		}
		
		[Column(Storage="_AttributeValue", DbType="NVarChar(4000) NOT NULL", CanBeNull=false)]
		public string AttributeValue
		{
			get
			{
				return this._AttributeValue;
			}
			set
			{
				if ((this._AttributeValue != value))
				{
					this._AttributeValue = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.netsqlazman_ItemsHierarchyTable")]
	public partial class ItemsHierarchyTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ItemId;
		
		private int _MemberOfItemId;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnItemIdChanging(int value);
    partial void OnItemIdChanged();
    partial void OnMemberOfItemIdChanging(int value);
    partial void OnMemberOfItemIdChanged();
    #endregion
		
		public ItemsHierarchyTable()
		{
			OnCreated();
		}
		
		[Column(Storage="_ItemId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ItemId
		{
			get
			{
				return this._ItemId;
			}
			set
			{
				if ((this._ItemId != value))
				{
					this.OnItemIdChanging(value);
					this.SendPropertyChanging();
					this._ItemId = value;
					this.SendPropertyChanged("ItemId");
					this.OnItemIdChanged();
				}
			}
		}
		
		[Column(Storage="_MemberOfItemId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int MemberOfItemId
		{
			get
			{
				return this._MemberOfItemId;
			}
			set
			{
				if ((this._MemberOfItemId != value))
				{
					this.OnMemberOfItemIdChanging(value);
					this.SendPropertyChanging();
					this._MemberOfItemId = value;
					this.SendPropertyChanged("MemberOfItemId");
					this.OnMemberOfItemIdChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.netsqlazman_ItemsHierarchyView")]
	public partial class ItemsHierarchyView
	{
		
		private int _ItemId;
		
		private int _ApplicationId;
		
		private string _Name;
		
		private string _Description;
		
		private string _ItemType;
		
		private int _MemberItemId;
		
		private int _MemberApplicationId;
		
		private string _MemberName;
		
		private string _MemberDescription;
		
		private string _MemberType;
		
		public ItemsHierarchyView()
		{
		}
		
		[Column(Storage="_ItemId", DbType="Int NOT NULL IDENTITY")]
		public int ItemId
		{
			get
			{
				return this._ItemId;
			}
			set
			{
				if ((this._ItemId != value))
				{
					this._ItemId = value;
				}
			}
		}
		
		[Column(Storage="_ApplicationId", DbType="Int NOT NULL")]
		public int ApplicationId
		{
			get
			{
				return this._ApplicationId;
			}
			set
			{
				if ((this._ApplicationId != value))
				{
					this._ApplicationId = value;
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(1024) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this._Description = value;
				}
			}
		}
		
		[Column(Storage="_ItemType", DbType="VarChar(9)")]
		public string ItemType
		{
			get
			{
				return this._ItemType;
			}
			set
			{
				if ((this._ItemType != value))
				{
					this._ItemType = value;
				}
			}
		}
		
		[Column(Storage="_MemberItemId", DbType="Int NOT NULL IDENTITY")]
		public int MemberItemId
		{
			get
			{
				return this._MemberItemId;
			}
			set
			{
				if ((this._MemberItemId != value))
				{
					this._MemberItemId = value;
				}
			}
		}
		
		[Column(Storage="_MemberApplicationId", DbType="Int NOT NULL")]
		public int MemberApplicationId
		{
			get
			{
				return this._MemberApplicationId;
			}
			set
			{
				if ((this._MemberApplicationId != value))
				{
					this._MemberApplicationId = value;
				}
			}
		}
		
		[Column(Storage="_MemberName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string MemberName
		{
			get
			{
				return this._MemberName;
			}
			set
			{
				if ((this._MemberName != value))
				{
					this._MemberName = value;
				}
			}
		}
		
		[Column(Storage="_MemberDescription", DbType="NVarChar(1024) NOT NULL", CanBeNull=false)]
		public string MemberDescription
		{
			get
			{
				return this._MemberDescription;
			}
			set
			{
				if ((this._MemberDescription != value))
				{
					this._MemberDescription = value;
				}
			}
		}
		
		[Column(Storage="_MemberType", DbType="VarChar(9)")]
		public string MemberType
		{
			get
			{
				return this._MemberType;
			}
			set
			{
				if ((this._MemberType != value))
				{
					this._MemberType = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.netsqlazman_ItemsTable")]
	public partial class ItemsTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ItemId;
		
		private int _ApplicationId;
		
		private string _Name;
		
		private string _Description;
		
		private byte _ItemType;
		
		private System.Nullable<int> _BizRuleId;
		
		private EntitySet<AuthorizationsTable> _AuthorizationsTable;
		
		private EntitySet<ItemAttributesTable> _ItemAttributesTable;
		
		private EntityRef<ApplicationsTable> _ApplicationsTable;
		
		private EntityRef<BizRulesTable> _BizRulesTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnItemIdChanging(int value);
    partial void OnItemIdChanged();
    partial void OnApplicationIdChanging(int value);
    partial void OnApplicationIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnItemTypeChanging(byte value);
    partial void OnItemTypeChanged();
    partial void OnBizRuleIdChanging(System.Nullable<int> value);
    partial void OnBizRuleIdChanged();
    #endregion
		
		public ItemsTable()
		{
			this._AuthorizationsTable = new EntitySet<AuthorizationsTable>(new Action<AuthorizationsTable>(this.attach_AuthorizationsTable), new Action<AuthorizationsTable>(this.detach_AuthorizationsTable));
			this._ItemAttributesTable = new EntitySet<ItemAttributesTable>(new Action<ItemAttributesTable>(this.attach_ItemAttributesTable), new Action<ItemAttributesTable>(this.detach_ItemAttributesTable));
			this._ApplicationsTable = default(EntityRef<ApplicationsTable>);
			this._BizRulesTable = default(EntityRef<BizRulesTable>);
			OnCreated();
		}
		
		[Column(Storage="_ItemId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ItemId
		{
			get
			{
				return this._ItemId;
			}
			set
			{
				if ((this._ItemId != value))
				{
					this.OnItemIdChanging(value);
					this.SendPropertyChanging();
					this._ItemId = value;
					this.SendPropertyChanged("ItemId");
					this.OnItemIdChanged();
				}
			}
		}
		
		[Column(Storage="_ApplicationId", DbType="Int NOT NULL")]
		public int ApplicationId
		{
			get
			{
				return this._ApplicationId;
			}
			set
			{
				if ((this._ApplicationId != value))
				{
					if (this._ApplicationsTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApplicationIdChanging(value);
					this.SendPropertyChanging();
					this._ApplicationId = value;
					this.SendPropertyChanged("ApplicationId");
					this.OnApplicationIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(1024) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_ItemType", DbType="TinyInt NOT NULL")]
		public byte ItemType
		{
			get
			{
				return this._ItemType;
			}
			set
			{
				if ((this._ItemType != value))
				{
					this.OnItemTypeChanging(value);
					this.SendPropertyChanging();
					this._ItemType = value;
					this.SendPropertyChanged("ItemType");
					this.OnItemTypeChanged();
				}
			}
		}
		
		[Column(Storage="_BizRuleId", DbType="Int")]
		public System.Nullable<int> BizRuleId
		{
			get
			{
				return this._BizRuleId;
			}
			set
			{
				if ((this._BizRuleId != value))
				{
					if (this._BizRulesTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBizRuleIdChanging(value);
					this.SendPropertyChanging();
					this._BizRuleId = value;
					this.SendPropertyChanged("BizRuleId");
					this.OnBizRuleIdChanged();
				}
			}
		}
		
		[Association(Name="ItemsTable_AuthorizationsTable", Storage="_AuthorizationsTable", ThisKey="ItemId", OtherKey="ItemId")]
		public EntitySet<AuthorizationsTable> AuthorizationsTable
		{
			get
			{
				return this._AuthorizationsTable;
			}
			set
			{
				this._AuthorizationsTable.Assign(value);
			}
		}
		
		[Association(Name="ItemsTable_ItemAttributesTable", Storage="_ItemAttributesTable", ThisKey="ItemId", OtherKey="ItemId")]
		public EntitySet<ItemAttributesTable> ItemAttributesTable
		{
			get
			{
				return this._ItemAttributesTable;
			}
			set
			{
				this._ItemAttributesTable.Assign(value);
			}
		}
		
		[Association(Name="ApplicationsTable_ItemsTable", Storage="_ApplicationsTable", ThisKey="ApplicationId", OtherKey="ApplicationId", IsForeignKey=true, DeleteOnNull=true)]
		public ApplicationsTable ApplicationsTable
		{
			get
			{
				return this._ApplicationsTable.Entity;
			}
			set
			{
				ApplicationsTable previousValue = this._ApplicationsTable.Entity;
				if (((previousValue != value) 
							|| (this._ApplicationsTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ApplicationsTable.Entity = null;
						previousValue.ItemsTable.Remove(this);
					}
					this._ApplicationsTable.Entity = value;
					if ((value != null))
					{
						value.ItemsTable.Add(this);
						this._ApplicationId = value.ApplicationId;
					}
					else
					{
						this._ApplicationId = default(int);
					}
					this.SendPropertyChanged("ApplicationsTable");
				}
			}
		}
		
		[Association(Name="BizRulesTable_ItemsTable", Storage="_BizRulesTable", ThisKey="BizRuleId", OtherKey="BizRuleId", IsForeignKey=true)]
		public BizRulesTable BizRulesTable
		{
			get
			{
				return this._BizRulesTable.Entity;
			}
			set
			{
				BizRulesTable previousValue = this._BizRulesTable.Entity;
				if (((previousValue != value) 
							|| (this._BizRulesTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BizRulesTable.Entity = null;
						previousValue.ItemsTable.Remove(this);
					}
					this._BizRulesTable.Entity = value;
					if ((value != null))
					{
						value.ItemsTable.Add(this);
						this._BizRuleId = value.BizRuleId;
					}
					else
					{
						this._BizRuleId = default(Nullable<int>);
					}
					this.SendPropertyChanged("BizRulesTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AuthorizationsTable(AuthorizationsTable entity)
		{
			this.SendPropertyChanging();
			entity.ItemsTable = this;
		}
		
		private void detach_AuthorizationsTable(AuthorizationsTable entity)
		{
			this.SendPropertyChanging();
			entity.ItemsTable = null;
		}
		
		private void attach_ItemAttributesTable(ItemAttributesTable entity)
		{
			this.SendPropertyChanging();
			entity.ItemsTable = this;
		}
		
		private void detach_ItemAttributesTable(ItemAttributesTable entity)
		{
			this.SendPropertyChanging();
			entity.ItemsTable = null;
		}
	}
	
	[Table(Name="dbo.netsqlazman_LogTable")]
	public partial class LogTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LogId;
		
		private System.DateTime _LogDateTime;
		
		private string _WindowsIdentity;
		
		private string _SqlIdentity;
		
		private string _MachineName;
		
		private System.Guid _InstanceGuid;
		
		private System.Nullable<System.Guid> _TransactionGuid;
		
		private int _OperationCounter;
		
		private string _ENSType;
		
		private string _ENSDescription;
		
		private string _LogType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLogIdChanging(int value);
    partial void OnLogIdChanged();
    partial void OnLogDateTimeChanging(System.DateTime value);
    partial void OnLogDateTimeChanged();
    partial void OnWindowsIdentityChanging(string value);
    partial void OnWindowsIdentityChanged();
    partial void OnSqlIdentityChanging(string value);
    partial void OnSqlIdentityChanged();
    partial void OnMachineNameChanging(string value);
    partial void OnMachineNameChanged();
    partial void OnInstanceGuidChanging(System.Guid value);
    partial void OnInstanceGuidChanged();
    partial void OnTransactionGuidChanging(System.Nullable<System.Guid> value);
    partial void OnTransactionGuidChanged();
    partial void OnOperationCounterChanging(int value);
    partial void OnOperationCounterChanged();
    partial void OnENSTypeChanging(string value);
    partial void OnENSTypeChanged();
    partial void OnENSDescriptionChanging(string value);
    partial void OnENSDescriptionChanged();
    partial void OnLogTypeChanging(string value);
    partial void OnLogTypeChanged();
    #endregion
		
		public LogTable()
		{
			OnCreated();
		}
		
		[Column(Storage="_LogId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LogId
		{
			get
			{
				return this._LogId;
			}
			set
			{
				if ((this._LogId != value))
				{
					this.OnLogIdChanging(value);
					this.SendPropertyChanging();
					this._LogId = value;
					this.SendPropertyChanged("LogId");
					this.OnLogIdChanged();
				}
			}
		}
		
		[Column(Storage="_LogDateTime", DbType="DateTime NOT NULL")]
		public System.DateTime LogDateTime
		{
			get
			{
				return this._LogDateTime;
			}
			set
			{
				if ((this._LogDateTime != value))
				{
					this.OnLogDateTimeChanging(value);
					this.SendPropertyChanging();
					this._LogDateTime = value;
					this.SendPropertyChanged("LogDateTime");
					this.OnLogDateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_WindowsIdentity", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string WindowsIdentity
		{
			get
			{
				return this._WindowsIdentity;
			}
			set
			{
				if ((this._WindowsIdentity != value))
				{
					this.OnWindowsIdentityChanging(value);
					this.SendPropertyChanging();
					this._WindowsIdentity = value;
					this.SendPropertyChanged("WindowsIdentity");
					this.OnWindowsIdentityChanged();
				}
			}
		}
		
		[Column(Storage="_SqlIdentity", DbType="NVarChar(128)")]
		public string SqlIdentity
		{
			get
			{
				return this._SqlIdentity;
			}
			set
			{
				if ((this._SqlIdentity != value))
				{
					this.OnSqlIdentityChanging(value);
					this.SendPropertyChanging();
					this._SqlIdentity = value;
					this.SendPropertyChanged("SqlIdentity");
					this.OnSqlIdentityChanged();
				}
			}
		}
		
		[Column(Storage="_MachineName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string MachineName
		{
			get
			{
				return this._MachineName;
			}
			set
			{
				if ((this._MachineName != value))
				{
					this.OnMachineNameChanging(value);
					this.SendPropertyChanging();
					this._MachineName = value;
					this.SendPropertyChanged("MachineName");
					this.OnMachineNameChanged();
				}
			}
		}
		
		[Column(Storage="_InstanceGuid", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid InstanceGuid
		{
			get
			{
				return this._InstanceGuid;
			}
			set
			{
				if ((this._InstanceGuid != value))
				{
					this.OnInstanceGuidChanging(value);
					this.SendPropertyChanging();
					this._InstanceGuid = value;
					this.SendPropertyChanged("InstanceGuid");
					this.OnInstanceGuidChanged();
				}
			}
		}
		
		[Column(Storage="_TransactionGuid", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> TransactionGuid
		{
			get
			{
				return this._TransactionGuid;
			}
			set
			{
				if ((this._TransactionGuid != value))
				{
					this.OnTransactionGuidChanging(value);
					this.SendPropertyChanging();
					this._TransactionGuid = value;
					this.SendPropertyChanged("TransactionGuid");
					this.OnTransactionGuidChanged();
				}
			}
		}
		
		[Column(Storage="_OperationCounter", DbType="Int NOT NULL")]
		public int OperationCounter
		{
			get
			{
				return this._OperationCounter;
			}
			set
			{
				if ((this._OperationCounter != value))
				{
					this.OnOperationCounterChanging(value);
					this.SendPropertyChanging();
					this._OperationCounter = value;
					this.SendPropertyChanged("OperationCounter");
					this.OnOperationCounterChanged();
				}
			}
		}
		
		[Column(Storage="_ENSType", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string ENSType
		{
			get
			{
				return this._ENSType;
			}
			set
			{
				if ((this._ENSType != value))
				{
					this.OnENSTypeChanging(value);
					this.SendPropertyChanging();
					this._ENSType = value;
					this.SendPropertyChanged("ENSType");
					this.OnENSTypeChanged();
				}
			}
		}
		
		[Column(Storage="_ENSDescription", DbType="NVarChar(4000) NOT NULL", CanBeNull=false)]
		public string ENSDescription
		{
			get
			{
				return this._ENSDescription;
			}
			set
			{
				if ((this._ENSDescription != value))
				{
					this.OnENSDescriptionChanging(value);
					this.SendPropertyChanging();
					this._ENSDescription = value;
					this.SendPropertyChanged("ENSDescription");
					this.OnENSDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_LogType", DbType="Char(1) NOT NULL", CanBeNull=false)]
		public string LogType
		{
			get
			{
				return this._LogType;
			}
			set
			{
				if ((this._LogType != value))
				{
					this.OnLogTypeChanging(value);
					this.SendPropertyChanging();
					this._LogType = value;
					this.SendPropertyChanged("LogType");
					this.OnLogTypeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.netsqlazman_Settings")]
	public partial class Settings : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _SettingName;
		
		private string _SettingValue;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSettingNameChanging(string value);
    partial void OnSettingNameChanged();
    partial void OnSettingValueChanging(string value);
    partial void OnSettingValueChanged();
    #endregion
		
		public Settings()
		{
			OnCreated();
		}
		
		[Column(Storage="_SettingName", DbType="NVarChar(255) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string SettingName
		{
			get
			{
				return this._SettingName;
			}
			set
			{
				if ((this._SettingName != value))
				{
					this.OnSettingNameChanging(value);
					this.SendPropertyChanging();
					this._SettingName = value;
					this.SendPropertyChanged("SettingName");
					this.OnSettingNameChanged();
				}
			}
		}
		
		[Column(Storage="_SettingValue", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string SettingValue
		{
			get
			{
				return this._SettingValue;
			}
			set
			{
				if ((this._SettingValue != value))
				{
					this.OnSettingValueChanging(value);
					this.SendPropertyChanging();
					this._SettingValue = value;
					this.SendPropertyChanged("SettingValue");
					this.OnSettingValueChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.netsqlazman_StoreAttributesTable")]
	public partial class StoreAttributesTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StoreAttributeId;
		
		private int _StoreId;
		
		private string _AttributeKey;
		
		private string _AttributeValue;
		
		private EntityRef<StoresTable> _StoresTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStoreAttributeIdChanging(int value);
    partial void OnStoreAttributeIdChanged();
    partial void OnStoreIdChanging(int value);
    partial void OnStoreIdChanged();
    partial void OnAttributeKeyChanging(string value);
    partial void OnAttributeKeyChanged();
    partial void OnAttributeValueChanging(string value);
    partial void OnAttributeValueChanged();
    #endregion
		
		public StoreAttributesTable()
		{
			this._StoresTable = default(EntityRef<StoresTable>);
			OnCreated();
		}
		
		[Column(Storage="_StoreAttributeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StoreAttributeId
		{
			get
			{
				return this._StoreAttributeId;
			}
			set
			{
				if ((this._StoreAttributeId != value))
				{
					this.OnStoreAttributeIdChanging(value);
					this.SendPropertyChanging();
					this._StoreAttributeId = value;
					this.SendPropertyChanged("StoreAttributeId");
					this.OnStoreAttributeIdChanged();
				}
			}
		}
		
		[Column(Storage="_StoreId", DbType="Int NOT NULL")]
		public int StoreId
		{
			get
			{
				return this._StoreId;
			}
			set
			{
				if ((this._StoreId != value))
				{
					if (this._StoresTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStoreIdChanging(value);
					this.SendPropertyChanging();
					this._StoreId = value;
					this.SendPropertyChanged("StoreId");
					this.OnStoreIdChanged();
				}
			}
		}
		
		[Column(Storage="_AttributeKey", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string AttributeKey
		{
			get
			{
				return this._AttributeKey;
			}
			set
			{
				if ((this._AttributeKey != value))
				{
					this.OnAttributeKeyChanging(value);
					this.SendPropertyChanging();
					this._AttributeKey = value;
					this.SendPropertyChanged("AttributeKey");
					this.OnAttributeKeyChanged();
				}
			}
		}
		
		[Column(Storage="_AttributeValue", DbType="NVarChar(4000) NOT NULL", CanBeNull=false)]
		public string AttributeValue
		{
			get
			{
				return this._AttributeValue;
			}
			set
			{
				if ((this._AttributeValue != value))
				{
					this.OnAttributeValueChanging(value);
					this.SendPropertyChanging();
					this._AttributeValue = value;
					this.SendPropertyChanged("AttributeValue");
					this.OnAttributeValueChanged();
				}
			}
		}
		
		[Association(Name="StoresTable_StoreAttributesTable", Storage="_StoresTable", ThisKey="StoreId", OtherKey="StoreId", IsForeignKey=true, DeleteOnNull=true)]
		public StoresTable StoresTable
		{
			get
			{
				return this._StoresTable.Entity;
			}
			set
			{
				StoresTable previousValue = this._StoresTable.Entity;
				if (((previousValue != value) 
							|| (this._StoresTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StoresTable.Entity = null;
						previousValue.StoreAttributesTable.Remove(this);
					}
					this._StoresTable.Entity = value;
					if ((value != null))
					{
						value.StoreAttributesTable.Add(this);
						this._StoreId = value.StoreId;
					}
					else
					{
						this._StoreId = default(int);
					}
					this.SendPropertyChanged("StoresTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.netsqlazman_StoreAttributesView")]
	public partial class StoreAttributesView
	{
		
		private int _StoreId;
		
		private string _Name;
		
		private string _Description;
		
		private int _StoreAttributeId;
		
		private string _AttributeKey;
		
		private string _AttributeValue;
		
		public StoreAttributesView()
		{
		}
		
		[Column(Storage="_StoreId", DbType="Int NOT NULL IDENTITY")]
		public int StoreId
		{
			get
			{
				return this._StoreId;
			}
			set
			{
				if ((this._StoreId != value))
				{
					this._StoreId = value;
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(1024) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this._Description = value;
				}
			}
		}
		
		[Column(Storage="_StoreAttributeId", DbType="Int NOT NULL IDENTITY")]
		public int StoreAttributeId
		{
			get
			{
				return this._StoreAttributeId;
			}
			set
			{
				if ((this._StoreAttributeId != value))
				{
					this._StoreAttributeId = value;
				}
			}
		}
		
		[Column(Storage="_AttributeKey", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string AttributeKey
		{
			get
			{
				return this._AttributeKey;
			}
			set
			{
				if ((this._AttributeKey != value))
				{
					this._AttributeKey = value;
				}
			}
		}
		
		[Column(Storage="_AttributeValue", DbType="NVarChar(4000) NOT NULL", CanBeNull=false)]
		public string AttributeValue
		{
			get
			{
				return this._AttributeValue;
			}
			set
			{
				if ((this._AttributeValue != value))
				{
					this._AttributeValue = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.netsqlazman_StoreGroupMembersTable")]
	public partial class StoreGroupMembersTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StoreGroupMemberId;
		
		private int _StoreGroupId;
		
		private System.Data.Linq.Binary _ObjectSid;
		
		private byte _WhereDefined;
		
		private bool _IsMember;
		
		private EntityRef<StoreGroupsTable> _StoreGroupsTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStoreGroupMemberIdChanging(int value);
    partial void OnStoreGroupMemberIdChanged();
    partial void OnStoreGroupIdChanging(int value);
    partial void OnStoreGroupIdChanged();
    partial void OnObjectSidChanging(System.Data.Linq.Binary value);
    partial void OnObjectSidChanged();
    partial void OnWhereDefinedChanging(byte value);
    partial void OnWhereDefinedChanged();
    partial void OnIsMemberChanging(bool value);
    partial void OnIsMemberChanged();
    #endregion
		
		public StoreGroupMembersTable()
		{
			this._StoreGroupsTable = default(EntityRef<StoreGroupsTable>);
			OnCreated();
		}
		
		[Column(Storage="_StoreGroupMemberId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StoreGroupMemberId
		{
			get
			{
				return this._StoreGroupMemberId;
			}
			set
			{
				if ((this._StoreGroupMemberId != value))
				{
					this.OnStoreGroupMemberIdChanging(value);
					this.SendPropertyChanging();
					this._StoreGroupMemberId = value;
					this.SendPropertyChanged("StoreGroupMemberId");
					this.OnStoreGroupMemberIdChanged();
				}
			}
		}
		
		[Column(Storage="_StoreGroupId", DbType="Int NOT NULL")]
		public int StoreGroupId
		{
			get
			{
				return this._StoreGroupId;
			}
			set
			{
				if ((this._StoreGroupId != value))
				{
					if (this._StoreGroupsTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStoreGroupIdChanging(value);
					this.SendPropertyChanging();
					this._StoreGroupId = value;
					this.SendPropertyChanged("StoreGroupId");
					this.OnStoreGroupIdChanged();
				}
			}
		}
		
		[Column(Name="objectSid", Storage="_ObjectSid", DbType="VarBinary(85) NOT NULL", CanBeNull=false)]
		public System.Data.Linq.Binary ObjectSid
		{
			get
			{
				return this._ObjectSid;
			}
			set
			{
				if ((this._ObjectSid != value))
				{
					this.OnObjectSidChanging(value);
					this.SendPropertyChanging();
					this._ObjectSid = value;
					this.SendPropertyChanged("ObjectSid");
					this.OnObjectSidChanged();
				}
			}
		}
		
		[Column(Storage="_WhereDefined", DbType="TinyInt NOT NULL")]
		public byte WhereDefined
		{
			get
			{
				return this._WhereDefined;
			}
			set
			{
				if ((this._WhereDefined != value))
				{
					this.OnWhereDefinedChanging(value);
					this.SendPropertyChanging();
					this._WhereDefined = value;
					this.SendPropertyChanged("WhereDefined");
					this.OnWhereDefinedChanged();
				}
			}
		}
		
		[Column(Storage="_IsMember", DbType="Bit NOT NULL")]
		public bool IsMember
		{
			get
			{
				return this._IsMember;
			}
			set
			{
				if ((this._IsMember != value))
				{
					this.OnIsMemberChanging(value);
					this.SendPropertyChanging();
					this._IsMember = value;
					this.SendPropertyChanged("IsMember");
					this.OnIsMemberChanged();
				}
			}
		}
		
		[Association(Name="StoreGroupsTable_StoreGroupMembersTable", Storage="_StoreGroupsTable", ThisKey="StoreGroupId", OtherKey="StoreGroupId", IsForeignKey=true, DeleteOnNull=true)]
		public StoreGroupsTable StoreGroupsTable
		{
			get
			{
				return this._StoreGroupsTable.Entity;
			}
			set
			{
				StoreGroupsTable previousValue = this._StoreGroupsTable.Entity;
				if (((previousValue != value) 
							|| (this._StoreGroupsTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StoreGroupsTable.Entity = null;
						previousValue.StoreGroupMembersTable.Remove(this);
					}
					this._StoreGroupsTable.Entity = value;
					if ((value != null))
					{
						value.StoreGroupMembersTable.Add(this);
						this._StoreGroupId = value.StoreGroupId;
					}
					else
					{
						this._StoreGroupId = default(int);
					}
					this.SendPropertyChanged("StoreGroupsTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.netsqlazman_StoreGroupMembersView")]
	public partial class StoreGroupMembersView
	{
		
		private int _StoreGroupMemberId;
		
		private int _StoreGroupId;
		
		private string _StoreGroup;
		
		private string _Name;
		
		private System.Data.Linq.Binary _ObjectSid;
		
		private string _WhereDefined;
		
		private string _MemberType;
		
		public StoreGroupMembersView()
		{
		}
		
		[Column(Storage="_StoreGroupMemberId", DbType="Int NOT NULL IDENTITY")]
		public int StoreGroupMemberId
		{
			get
			{
				return this._StoreGroupMemberId;
			}
			set
			{
				if ((this._StoreGroupMemberId != value))
				{
					this._StoreGroupMemberId = value;
				}
			}
		}
		
		[Column(Storage="_StoreGroupId", DbType="Int NOT NULL")]
		public int StoreGroupId
		{
			get
			{
				return this._StoreGroupId;
			}
			set
			{
				if ((this._StoreGroupId != value))
				{
					this._StoreGroupId = value;
				}
			}
		}
		
		[Column(Storage="_StoreGroup", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string StoreGroup
		{
			get
			{
				return this._StoreGroup;
			}
			set
			{
				if ((this._StoreGroup != value))
				{
					this._StoreGroup = value;
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(255)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[Column(Name="objectSid", Storage="_ObjectSid", DbType="VarBinary(85) NOT NULL", CanBeNull=false)]
		public System.Data.Linq.Binary ObjectSid
		{
			get
			{
				return this._ObjectSid;
			}
			set
			{
				if ((this._ObjectSid != value))
				{
					this._ObjectSid = value;
				}
			}
		}
		
		[Column(Storage="_WhereDefined", DbType="VarChar(11)")]
		public string WhereDefined
		{
			get
			{
				return this._WhereDefined;
			}
			set
			{
				if ((this._WhereDefined != value))
				{
					this._WhereDefined = value;
				}
			}
		}
		
		[Column(Storage="_MemberType", DbType="VarChar(10)")]
		public string MemberType
		{
			get
			{
				return this._MemberType;
			}
			set
			{
				if ((this._MemberType != value))
				{
					this._MemberType = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.netsqlazman_StoreGroupsTable")]
	public partial class StoreGroupsTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StoreGroupId;
		
		private int _StoreId;
		
		private System.Data.Linq.Binary _ObjectSid;
		
		private string _Name;
		
		private string _Description;
		
		private string _LDapQuery;
		
		private byte _GroupType;
		
		private EntitySet<StoreGroupMembersTable> _StoreGroupMembersTable;
		
		private EntityRef<StoresTable> _StoresTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStoreGroupIdChanging(int value);
    partial void OnStoreGroupIdChanged();
    partial void OnStoreIdChanging(int value);
    partial void OnStoreIdChanged();
    partial void OnObjectSidChanging(System.Data.Linq.Binary value);
    partial void OnObjectSidChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnLDapQueryChanging(string value);
    partial void OnLDapQueryChanged();
    partial void OnGroupTypeChanging(byte value);
    partial void OnGroupTypeChanged();
    #endregion
		
		public StoreGroupsTable()
		{
			this._StoreGroupMembersTable = new EntitySet<StoreGroupMembersTable>(new Action<StoreGroupMembersTable>(this.attach_StoreGroupMembersTable), new Action<StoreGroupMembersTable>(this.detach_StoreGroupMembersTable));
			this._StoresTable = default(EntityRef<StoresTable>);
			OnCreated();
		}
		
		[Column(Storage="_StoreGroupId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StoreGroupId
		{
			get
			{
				return this._StoreGroupId;
			}
			set
			{
				if ((this._StoreGroupId != value))
				{
					this.OnStoreGroupIdChanging(value);
					this.SendPropertyChanging();
					this._StoreGroupId = value;
					this.SendPropertyChanged("StoreGroupId");
					this.OnStoreGroupIdChanged();
				}
			}
		}
		
		[Column(Storage="_StoreId", DbType="Int NOT NULL")]
		public int StoreId
		{
			get
			{
				return this._StoreId;
			}
			set
			{
				if ((this._StoreId != value))
				{
					if (this._StoresTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStoreIdChanging(value);
					this.SendPropertyChanging();
					this._StoreId = value;
					this.SendPropertyChanged("StoreId");
					this.OnStoreIdChanged();
				}
			}
		}
		
		[Column(Name="objectSid", Storage="_ObjectSid", DbType="VarBinary(85) NOT NULL", CanBeNull=false)]
		public System.Data.Linq.Binary ObjectSid
		{
			get
			{
				return this._ObjectSid;
			}
			set
			{
				if ((this._ObjectSid != value))
				{
					this.OnObjectSidChanging(value);
					this.SendPropertyChanging();
					this._ObjectSid = value;
					this.SendPropertyChanged("ObjectSid");
					this.OnObjectSidChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(1024) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_LDapQuery", DbType="NVarChar(4000)")]
		public string LDapQuery
		{
			get
			{
				return this._LDapQuery;
			}
			set
			{
				if ((this._LDapQuery != value))
				{
					this.OnLDapQueryChanging(value);
					this.SendPropertyChanging();
					this._LDapQuery = value;
					this.SendPropertyChanged("LDapQuery");
					this.OnLDapQueryChanged();
				}
			}
		}
		
		[Column(Storage="_GroupType", DbType="TinyInt NOT NULL")]
		public byte GroupType
		{
			get
			{
				return this._GroupType;
			}
			set
			{
				if ((this._GroupType != value))
				{
					this.OnGroupTypeChanging(value);
					this.SendPropertyChanging();
					this._GroupType = value;
					this.SendPropertyChanged("GroupType");
					this.OnGroupTypeChanged();
				}
			}
		}
		
		[Association(Name="StoreGroupsTable_StoreGroupMembersTable", Storage="_StoreGroupMembersTable", ThisKey="StoreGroupId", OtherKey="StoreGroupId")]
		public EntitySet<StoreGroupMembersTable> StoreGroupMembersTable
		{
			get
			{
				return this._StoreGroupMembersTable;
			}
			set
			{
				this._StoreGroupMembersTable.Assign(value);
			}
		}
		
		[Association(Name="StoresTable_StoreGroupsTable", Storage="_StoresTable", ThisKey="StoreId", OtherKey="StoreId", IsForeignKey=true, DeleteOnNull=true)]
		public StoresTable StoresTable
		{
			get
			{
				return this._StoresTable.Entity;
			}
			set
			{
				StoresTable previousValue = this._StoresTable.Entity;
				if (((previousValue != value) 
							|| (this._StoresTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StoresTable.Entity = null;
						previousValue.StoreGroupsTable.Remove(this);
					}
					this._StoresTable.Entity = value;
					if ((value != null))
					{
						value.StoreGroupsTable.Add(this);
						this._StoreId = value.StoreId;
					}
					else
					{
						this._StoreId = default(int);
					}
					this.SendPropertyChanged("StoresTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_StoreGroupMembersTable(StoreGroupMembersTable entity)
		{
			this.SendPropertyChanging();
			entity.StoreGroupsTable = this;
		}
		
		private void detach_StoreGroupMembersTable(StoreGroupMembersTable entity)
		{
			this.SendPropertyChanging();
			entity.StoreGroupsTable = null;
		}
	}
	
	[Table(Name="dbo.netsqlazman_StorePermissionsTable")]
	public partial class StorePermissionsTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StorePermissionId;
		
		private int _StoreId;
		
		private string _SqlUserOrRole;
		
		private bool _IsSqlRole;
		
		private byte _NetSqlAzManFixedServerRole;
		
		private EntityRef<StoresTable> _StoresTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStorePermissionIdChanging(int value);
    partial void OnStorePermissionIdChanged();
    partial void OnStoreIdChanging(int value);
    partial void OnStoreIdChanged();
    partial void OnSqlUserOrRoleChanging(string value);
    partial void OnSqlUserOrRoleChanged();
    partial void OnIsSqlRoleChanging(bool value);
    partial void OnIsSqlRoleChanged();
    partial void OnNetSqlAzManFixedServerRoleChanging(byte value);
    partial void OnNetSqlAzManFixedServerRoleChanged();
    #endregion
		
		public StorePermissionsTable()
		{
			this._StoresTable = default(EntityRef<StoresTable>);
			OnCreated();
		}
		
		[Column(Storage="_StorePermissionId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StorePermissionId
		{
			get
			{
				return this._StorePermissionId;
			}
			set
			{
				if ((this._StorePermissionId != value))
				{
					this.OnStorePermissionIdChanging(value);
					this.SendPropertyChanging();
					this._StorePermissionId = value;
					this.SendPropertyChanged("StorePermissionId");
					this.OnStorePermissionIdChanged();
				}
			}
		}
		
		[Column(Storage="_StoreId", DbType="Int NOT NULL")]
		public int StoreId
		{
			get
			{
				return this._StoreId;
			}
			set
			{
				if ((this._StoreId != value))
				{
					if (this._StoresTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStoreIdChanging(value);
					this.SendPropertyChanging();
					this._StoreId = value;
					this.SendPropertyChanged("StoreId");
					this.OnStoreIdChanged();
				}
			}
		}
		
		[Column(Storage="_SqlUserOrRole", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string SqlUserOrRole
		{
			get
			{
				return this._SqlUserOrRole;
			}
			set
			{
				if ((this._SqlUserOrRole != value))
				{
					this.OnSqlUserOrRoleChanging(value);
					this.SendPropertyChanging();
					this._SqlUserOrRole = value;
					this.SendPropertyChanged("SqlUserOrRole");
					this.OnSqlUserOrRoleChanged();
				}
			}
		}
		
		[Column(Storage="_IsSqlRole", DbType="Bit NOT NULL")]
		public bool IsSqlRole
		{
			get
			{
				return this._IsSqlRole;
			}
			set
			{
				if ((this._IsSqlRole != value))
				{
					this.OnIsSqlRoleChanging(value);
					this.SendPropertyChanging();
					this._IsSqlRole = value;
					this.SendPropertyChanged("IsSqlRole");
					this.OnIsSqlRoleChanged();
				}
			}
		}
		
		[Column(Storage="_NetSqlAzManFixedServerRole", DbType="TinyInt NOT NULL")]
		public byte NetSqlAzManFixedServerRole
		{
			get
			{
				return this._NetSqlAzManFixedServerRole;
			}
			set
			{
				if ((this._NetSqlAzManFixedServerRole != value))
				{
					this.OnNetSqlAzManFixedServerRoleChanging(value);
					this.SendPropertyChanging();
					this._NetSqlAzManFixedServerRole = value;
					this.SendPropertyChanged("NetSqlAzManFixedServerRole");
					this.OnNetSqlAzManFixedServerRoleChanged();
				}
			}
		}
		
		[Association(Name="StoresTable_StorePermissionsTable", Storage="_StoresTable", ThisKey="StoreId", OtherKey="StoreId", IsForeignKey=true, DeleteOnNull=true)]
		public StoresTable StoresTable
		{
			get
			{
				return this._StoresTable.Entity;
			}
			set
			{
				StoresTable previousValue = this._StoresTable.Entity;
				if (((previousValue != value) 
							|| (this._StoresTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StoresTable.Entity = null;
						previousValue.StorePermissionsTable.Remove(this);
					}
					this._StoresTable.Entity = value;
					if ((value != null))
					{
						value.StorePermissionsTable.Add(this);
						this._StoreId = value.StoreId;
					}
					else
					{
						this._StoreId = default(int);
					}
					this.SendPropertyChanged("StoresTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.netsqlazman_StoresTable")]
	public partial class StoresTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StoreId;
		
		private string _Name;
		
		private string _Description;
		
		private EntitySet<ApplicationsTable> _ApplicationsTable;
		
		private EntitySet<StoreAttributesTable> _StoreAttributesTable;
		
		private EntitySet<StoreGroupsTable> _StoreGroupsTable;
		
		private EntitySet<StorePermissionsTable> _StorePermissionsTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStoreIdChanging(int value);
    partial void OnStoreIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public StoresTable()
		{
			this._ApplicationsTable = new EntitySet<ApplicationsTable>(new Action<ApplicationsTable>(this.attach_ApplicationsTable), new Action<ApplicationsTable>(this.detach_ApplicationsTable));
			this._StoreAttributesTable = new EntitySet<StoreAttributesTable>(new Action<StoreAttributesTable>(this.attach_StoreAttributesTable), new Action<StoreAttributesTable>(this.detach_StoreAttributesTable));
			this._StoreGroupsTable = new EntitySet<StoreGroupsTable>(new Action<StoreGroupsTable>(this.attach_StoreGroupsTable), new Action<StoreGroupsTable>(this.detach_StoreGroupsTable));
			this._StorePermissionsTable = new EntitySet<StorePermissionsTable>(new Action<StorePermissionsTable>(this.attach_StorePermissionsTable), new Action<StorePermissionsTable>(this.detach_StorePermissionsTable));
			OnCreated();
		}
		
		[Column(Storage="_StoreId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StoreId
		{
			get
			{
				return this._StoreId;
			}
			set
			{
				if ((this._StoreId != value))
				{
					this.OnStoreIdChanging(value);
					this.SendPropertyChanging();
					this._StoreId = value;
					this.SendPropertyChanged("StoreId");
					this.OnStoreIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(1024) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="StoresTable_ApplicationsTable", Storage="_ApplicationsTable", ThisKey="StoreId", OtherKey="StoreId")]
		public EntitySet<ApplicationsTable> ApplicationsTable
		{
			get
			{
				return this._ApplicationsTable;
			}
			set
			{
				this._ApplicationsTable.Assign(value);
			}
		}
		
		[Association(Name="StoresTable_StoreAttributesTable", Storage="_StoreAttributesTable", ThisKey="StoreId", OtherKey="StoreId")]
		public EntitySet<StoreAttributesTable> StoreAttributesTable
		{
			get
			{
				return this._StoreAttributesTable;
			}
			set
			{
				this._StoreAttributesTable.Assign(value);
			}
		}
		
		[Association(Name="StoresTable_StoreGroupsTable", Storage="_StoreGroupsTable", ThisKey="StoreId", OtherKey="StoreId")]
		public EntitySet<StoreGroupsTable> StoreGroupsTable
		{
			get
			{
				return this._StoreGroupsTable;
			}
			set
			{
				this._StoreGroupsTable.Assign(value);
			}
		}
		
		[Association(Name="StoresTable_StorePermissionsTable", Storage="_StorePermissionsTable", ThisKey="StoreId", OtherKey="StoreId")]
		public EntitySet<StorePermissionsTable> StorePermissionsTable
		{
			get
			{
				return this._StorePermissionsTable;
			}
			set
			{
				this._StorePermissionsTable.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ApplicationsTable(ApplicationsTable entity)
		{
			this.SendPropertyChanging();
			entity.StoresTable = this;
		}
		
		private void detach_ApplicationsTable(ApplicationsTable entity)
		{
			this.SendPropertyChanging();
			entity.StoresTable = null;
		}
		
		private void attach_StoreAttributesTable(StoreAttributesTable entity)
		{
			this.SendPropertyChanging();
			entity.StoresTable = this;
		}
		
		private void detach_StoreAttributesTable(StoreAttributesTable entity)
		{
			this.SendPropertyChanging();
			entity.StoresTable = null;
		}
		
		private void attach_StoreGroupsTable(StoreGroupsTable entity)
		{
			this.SendPropertyChanging();
			entity.StoresTable = this;
		}
		
		private void detach_StoreGroupsTable(StoreGroupsTable entity)
		{
			this.SendPropertyChanging();
			entity.StoresTable = null;
		}
		
		private void attach_StorePermissionsTable(StorePermissionsTable entity)
		{
			this.SendPropertyChanging();
			entity.StoresTable = this;
		}
		
		private void detach_StorePermissionsTable(StorePermissionsTable entity)
		{
			this.SendPropertyChanging();
			entity.StoresTable = null;
		}
	}
	
	[Table(Name="dbo.netsqlazman_UsersDemo")]
	public partial class UsersDemo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserID;
		
		private string _UserName;
		
		private System.Data.Linq.Binary _Password;
		
		private string _FullName;
		
		private string _OtherFields;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPasswordChanging(System.Data.Linq.Binary value);
    partial void OnPasswordChanged();
    partial void OnFullNameChanging(string value);
    partial void OnFullNameChanged();
    partial void OnOtherFieldsChanging(string value);
    partial void OnOtherFieldsChanged();
    #endregion
		
		public UsersDemo()
		{
			OnCreated();
		}
		
		[Column(Storage="_UserID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_UserName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[Column(Storage="_Password", DbType="VarBinary(50)", CanBeNull=true)]
		public System.Data.Linq.Binary Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[Column(Storage="_FullName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this.OnFullNameChanging(value);
					this.SendPropertyChanging();
					this._FullName = value;
					this.SendPropertyChanged("FullName");
					this.OnFullNameChanged();
				}
			}
		}
		
		[Column(Storage="_OtherFields", DbType="NVarChar(255)")]
		public string OtherFields
		{
			get
			{
				return this._OtherFields;
			}
			set
			{
				if ((this._OtherFields != value))
				{
					this.OnOtherFieldsChanging(value);
					this.SendPropertyChanging();
					this._OtherFields = value;
					this.SendPropertyChanged("OtherFields");
					this.OnOtherFieldsChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	public partial class ApplicationAttributesResult
	{
		
		private System.Nullable<int> _ApplicationAttributeId;
		
		private System.Nullable<int> _ApplicationId;
		
		private string _AttributeKey;
		
		private string _AttributeValue;
		
		public ApplicationAttributesResult()
		{
		}
		
		[Column(Storage="_ApplicationAttributeId", DbType="Int")]
		public System.Nullable<int> ApplicationAttributeId
		{
			get
			{
				return this._ApplicationAttributeId;
			}
			set
			{
				if ((this._ApplicationAttributeId != value))
				{
					this._ApplicationAttributeId = value;
				}
			}
		}
		
		[Column(Storage="_ApplicationId", DbType="Int")]
		public System.Nullable<int> ApplicationId
		{
			get
			{
				return this._ApplicationId;
			}
			set
			{
				if ((this._ApplicationId != value))
				{
					this._ApplicationId = value;
				}
			}
		}
		
		[Column(Storage="_AttributeKey", DbType="NVarChar(255)")]
		public string AttributeKey
		{
			get
			{
				return this._AttributeKey;
			}
			set
			{
				if ((this._AttributeKey != value))
				{
					this._AttributeKey = value;
				}
			}
		}
		
		[Column(Storage="_AttributeValue", DbType="NVarChar(4000)")]
		public string AttributeValue
		{
			get
			{
				return this._AttributeValue;
			}
			set
			{
				if ((this._AttributeValue != value))
				{
					this._AttributeValue = value;
				}
			}
		}
	}
	
	public partial class ApplicationGroupMembersResult
	{
		
		private System.Nullable<int> _ApplicationGroupMemberId;
		
		private System.Nullable<int> _ApplicationGroupId;
		
		private System.Data.Linq.Binary _ObjectSid;
		
		private System.Nullable<byte> _WhereDefined;
		
		private System.Nullable<bool> _IsMember;
		
		public ApplicationGroupMembersResult()
		{
		}
		
		[Column(Storage="_ApplicationGroupMemberId", DbType="Int")]
		public System.Nullable<int> ApplicationGroupMemberId
		{
			get
			{
				return this._ApplicationGroupMemberId;
			}
			set
			{
				if ((this._ApplicationGroupMemberId != value))
				{
					this._ApplicationGroupMemberId = value;
				}
			}
		}
		
		[Column(Storage="_ApplicationGroupId", DbType="Int")]
		public System.Nullable<int> ApplicationGroupId
		{
			get
			{
				return this._ApplicationGroupId;
			}
			set
			{
				if ((this._ApplicationGroupId != value))
				{
					this._ApplicationGroupId = value;
				}
			}
		}
		
		[Column(Name="objectSid", Storage="_ObjectSid", DbType="VarBinary(85)", CanBeNull=true)]
		public System.Data.Linq.Binary ObjectSid
		{
			get
			{
				return this._ObjectSid;
			}
			set
			{
				if ((this._ObjectSid != value))
				{
					this._ObjectSid = value;
				}
			}
		}
		
		[Column(Storage="_WhereDefined", DbType="TinyInt")]
		public System.Nullable<byte> WhereDefined
		{
			get
			{
				return this._WhereDefined;
			}
			set
			{
				if ((this._WhereDefined != value))
				{
					this._WhereDefined = value;
				}
			}
		}
		
		[Column(Storage="_IsMember", DbType="Bit")]
		public System.Nullable<bool> IsMember
		{
			get
			{
				return this._IsMember;
			}
			set
			{
				if ((this._IsMember != value))
				{
					this._IsMember = value;
				}
			}
		}
	}
	
	public partial class ApplicationGroupsResult
	{
		
		private System.Nullable<int> _ApplicationGroupId;
		
		private System.Nullable<int> _ApplicationId;
		
		private System.Data.Linq.Binary _ObjectSid;
		
		private string _Name;
		
		private string _Description;
		
		private string _LDapQuery;
		
		private System.Nullable<byte> _GroupType;
		
		public ApplicationGroupsResult()
		{
		}
		
		[Column(Storage="_ApplicationGroupId", DbType="Int")]
		public System.Nullable<int> ApplicationGroupId
		{
			get
			{
				return this._ApplicationGroupId;
			}
			set
			{
				if ((this._ApplicationGroupId != value))
				{
					this._ApplicationGroupId = value;
				}
			}
		}
		
		[Column(Storage="_ApplicationId", DbType="Int")]
		public System.Nullable<int> ApplicationId
		{
			get
			{
				return this._ApplicationId;
			}
			set
			{
				if ((this._ApplicationId != value))
				{
					this._ApplicationId = value;
				}
			}
		}
		
		[Column(Name="objectSid", Storage="_ObjectSid", DbType="VarBinary(85)", CanBeNull=true)]
		public System.Data.Linq.Binary ObjectSid
		{
			get
			{
				return this._ObjectSid;
			}
			set
			{
				if ((this._ObjectSid != value))
				{
					this._ObjectSid = value;
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(255)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(1024)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this._Description = value;
				}
			}
		}
		
		[Column(Storage="_LDapQuery", DbType="NVarChar(4000)")]
		public string LDapQuery
		{
			get
			{
				return this._LDapQuery;
			}
			set
			{
				if ((this._LDapQuery != value))
				{
					this._LDapQuery = value;
				}
			}
		}
		
		[Column(Storage="_GroupType", DbType="TinyInt")]
		public System.Nullable<byte> GroupType
		{
			get
			{
				return this._GroupType;
			}
			set
			{
				if ((this._GroupType != value))
				{
					this._GroupType = value;
				}
			}
		}
	}
	
	public partial class ApplicationPermissionsResult
	{
		
		private System.Nullable<int> _ApplicationPermissionId;
		
		private System.Nullable<int> _ApplicationId;
		
		private string _SqlUserOrRole;
		
		private System.Nullable<bool> _IsSqlRole;
		
		private System.Nullable<byte> _NetSqlAzManFixedServerRole;
		
		public ApplicationPermissionsResult()
		{
		}
		
		[Column(Storage="_ApplicationPermissionId", DbType="Int")]
		public System.Nullable<int> ApplicationPermissionId
		{
			get
			{
				return this._ApplicationPermissionId;
			}
			set
			{
				if ((this._ApplicationPermissionId != value))
				{
					this._ApplicationPermissionId = value;
				}
			}
		}
		
		[Column(Storage="_ApplicationId", DbType="Int")]
		public System.Nullable<int> ApplicationId
		{
			get
			{
				return this._ApplicationId;
			}
			set
			{
				if ((this._ApplicationId != value))
				{
					this._ApplicationId = value;
				}
			}
		}
		
		[Column(Storage="_SqlUserOrRole", DbType="NVarChar(128)")]
		public string SqlUserOrRole
		{
			get
			{
				return this._SqlUserOrRole;
			}
			set
			{
				if ((this._SqlUserOrRole != value))
				{
					this._SqlUserOrRole = value;
				}
			}
		}
		
		[Column(Storage="_IsSqlRole", DbType="Bit")]
		public System.Nullable<bool> IsSqlRole
		{
			get
			{
				return this._IsSqlRole;
			}
			set
			{
				if ((this._IsSqlRole != value))
				{
					this._IsSqlRole = value;
				}
			}
		}
		
		[Column(Storage="_NetSqlAzManFixedServerRole", DbType="TinyInt")]
		public System.Nullable<byte> NetSqlAzManFixedServerRole
		{
			get
			{
				return this._NetSqlAzManFixedServerRole;
			}
			set
			{
				if ((this._NetSqlAzManFixedServerRole != value))
				{
					this._NetSqlAzManFixedServerRole = value;
				}
			}
		}
	}
	
	public partial class ApplicationsResult
	{
		
		private System.Nullable<int> _ApplicationId;
		
		private System.Nullable<int> _StoreId;
		
		private string _Name;
		
		private string _Description;
		
		public ApplicationsResult()
		{
		}
		
		[Column(Storage="_ApplicationId", DbType="Int")]
		public System.Nullable<int> ApplicationId
		{
			get
			{
				return this._ApplicationId;
			}
			set
			{
				if ((this._ApplicationId != value))
				{
					this._ApplicationId = value;
				}
			}
		}
		
		[Column(Storage="_StoreId", DbType="Int")]
		public System.Nullable<int> StoreId
		{
			get
			{
				return this._StoreId;
			}
			set
			{
				if ((this._StoreId != value))
				{
					this._StoreId = value;
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(255)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(1024)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this._Description = value;
				}
			}
		}
	}
	
	public partial class AuthorizationAttributesResult
	{
		
		private System.Nullable<int> _AuthorizationAttributeId;
		
		private System.Nullable<int> _AuthorizationId;
		
		private string _AttributeKey;
		
		private string _AttributeValue;
		
		public AuthorizationAttributesResult()
		{
		}
		
		[Column(Storage="_AuthorizationAttributeId", DbType="Int")]
		public System.Nullable<int> AuthorizationAttributeId
		{
			get
			{
				return this._AuthorizationAttributeId;
			}
			set
			{
				if ((this._AuthorizationAttributeId != value))
				{
					this._AuthorizationAttributeId = value;
				}
			}
		}
		
		[Column(Storage="_AuthorizationId", DbType="Int")]
		public System.Nullable<int> AuthorizationId
		{
			get
			{
				return this._AuthorizationId;
			}
			set
			{
				if ((this._AuthorizationId != value))
				{
					this._AuthorizationId = value;
				}
			}
		}
		
		[Column(Storage="_AttributeKey", DbType="NVarChar(255)")]
		public string AttributeKey
		{
			get
			{
				return this._AttributeKey;
			}
			set
			{
				if ((this._AttributeKey != value))
				{
					this._AttributeKey = value;
				}
			}
		}
		
		[Column(Storage="_AttributeValue", DbType="NVarChar(4000)")]
		public string AttributeValue
		{
			get
			{
				return this._AttributeValue;
			}
			set
			{
				if ((this._AttributeValue != value))
				{
					this._AttributeValue = value;
				}
			}
		}
	}
	
	public partial class AuthorizationsResult
	{
		
		private System.Nullable<int> _AuthorizationId;
		
		private System.Nullable<int> _ItemId;
		
		private System.Data.Linq.Binary _OwnerSid;
		
		private System.Nullable<byte> _OwnerSidWhereDefined;
		
		private System.Data.Linq.Binary _ObjectSid;
		
		private System.Nullable<byte> _ObjectSidWhereDefined;
		
		private System.Nullable<byte> _AuthorizationType;
		
		private System.Nullable<System.DateTime> _ValidFrom;
		
		private System.Nullable<System.DateTime> _ValidTo;
		
		public AuthorizationsResult()
		{
		}
		
		[Column(Storage="_AuthorizationId", DbType="Int")]
		public System.Nullable<int> AuthorizationId
		{
			get
			{
				return this._AuthorizationId;
			}
			set
			{
				if ((this._AuthorizationId != value))
				{
					this._AuthorizationId = value;
				}
			}
		}
		
		[Column(Storage="_ItemId", DbType="Int")]
		public System.Nullable<int> ItemId
		{
			get
			{
				return this._ItemId;
			}
			set
			{
				if ((this._ItemId != value))
				{
					this._ItemId = value;
				}
			}
		}
		
		[Column(Name="ownerSid", Storage="_OwnerSid", DbType="VarBinary(85)", CanBeNull=true)]
		public System.Data.Linq.Binary OwnerSid
		{
			get
			{
				return this._OwnerSid;
			}
			set
			{
				if ((this._OwnerSid != value))
				{
					this._OwnerSid = value;
				}
			}
		}
		
		[Column(Name="ownerSidWhereDefined", Storage="_OwnerSidWhereDefined", DbType="TinyInt")]
		public System.Nullable<byte> OwnerSidWhereDefined
		{
			get
			{
				return this._OwnerSidWhereDefined;
			}
			set
			{
				if ((this._OwnerSidWhereDefined != value))
				{
					this._OwnerSidWhereDefined = value;
				}
			}
		}
		
		[Column(Name="objectSid", Storage="_ObjectSid", DbType="VarBinary(85)", CanBeNull=true)]
		public System.Data.Linq.Binary ObjectSid
		{
			get
			{
				return this._ObjectSid;
			}
			set
			{
				if ((this._ObjectSid != value))
				{
					this._ObjectSid = value;
				}
			}
		}
		
		[Column(Name="objectSidWhereDefined", Storage="_ObjectSidWhereDefined", DbType="TinyInt")]
		public System.Nullable<byte> ObjectSidWhereDefined
		{
			get
			{
				return this._ObjectSidWhereDefined;
			}
			set
			{
				if ((this._ObjectSidWhereDefined != value))
				{
					this._ObjectSidWhereDefined = value;
				}
			}
		}
		
		[Column(Storage="_AuthorizationType", DbType="TinyInt")]
		public System.Nullable<byte> AuthorizationType
		{
			get
			{
				return this._AuthorizationType;
			}
			set
			{
				if ((this._AuthorizationType != value))
				{
					this._AuthorizationType = value;
				}
			}
		}
		
		[Column(Storage="_ValidFrom", DbType="DateTime")]
		public System.Nullable<System.DateTime> ValidFrom
		{
			get
			{
				return this._ValidFrom;
			}
			set
			{
				if ((this._ValidFrom != value))
				{
					this._ValidFrom = value;
				}
			}
		}
		
		[Column(Storage="_ValidTo", DbType="DateTime")]
		public System.Nullable<System.DateTime> ValidTo
		{
			get
			{
				return this._ValidTo;
			}
			set
			{
				if ((this._ValidTo != value))
				{
					this._ValidTo = value;
				}
			}
		}
	}
	
	public partial class BizRulesResult
	{
		
		private System.Nullable<int> _BizRuleId;
		
		private string _BizRuleSource;
		
		private System.Nullable<byte> _BizRuleLanguage;
		
		private System.Data.Linq.Binary _CompiledAssembly;
		
		public BizRulesResult()
		{
		}
		
		[Column(Storage="_BizRuleId", DbType="Int")]
		public System.Nullable<int> BizRuleId
		{
			get
			{
				return this._BizRuleId;
			}
			set
			{
				if ((this._BizRuleId != value))
				{
					this._BizRuleId = value;
				}
			}
		}
		
		[Column(Storage="_BizRuleSource", DbType="Text")]
		public string BizRuleSource
		{
			get
			{
				return this._BizRuleSource;
			}
			set
			{
				if ((this._BizRuleSource != value))
				{
					this._BizRuleSource = value;
				}
			}
		}
		
		[Column(Storage="_BizRuleLanguage", DbType="TinyInt")]
		public System.Nullable<byte> BizRuleLanguage
		{
			get
			{
				return this._BizRuleLanguage;
			}
			set
			{
				if ((this._BizRuleLanguage != value))
				{
					this._BizRuleLanguage = value;
				}
			}
		}
		
		[Column(Storage="_CompiledAssembly", DbType="Image", CanBeNull=true)]
		public System.Data.Linq.Binary CompiledAssembly
		{
			get
			{
				return this._CompiledAssembly;
			}
			set
			{
				if ((this._CompiledAssembly != value))
				{
					this._CompiledAssembly = value;
				}
			}
		}
	}
	
	public partial class BuildUserPermissionCacheResult1
	{
		
		private string _ItemName;
		
		private string _ParentItemName;
		
		public BuildUserPermissionCacheResult1()
		{
		}
		
		[Column(Storage="_ItemName", DbType="NVarChar(255)")]
		public string ItemName
		{
			get
			{
				return this._ItemName;
			}
			set
			{
				if ((this._ItemName != value))
				{
					this._ItemName = value;
				}
			}
		}
		
		[Column(Storage="_ParentItemName", DbType="NVarChar(255)")]
		public string ParentItemName
		{
			get
			{
				return this._ParentItemName;
			}
			set
			{
				if ((this._ParentItemName != value))
				{
					this._ParentItemName = value;
				}
			}
		}
	}
	
	public partial class BuildUserPermissionCacheResult2
	{
		
		private string _ItemName;
		
		private System.Nullable<System.DateTime> _ValidFrom;
		
		private System.Nullable<System.DateTime> _ValidTo;
		
		public BuildUserPermissionCacheResult2()
		{
		}
		
		[Column(Storage="_ItemName", DbType="NVarChar(255)")]
		public string ItemName
		{
			get
			{
				return this._ItemName;
			}
			set
			{
				if ((this._ItemName != value))
				{
					this._ItemName = value;
				}
			}
		}
		
		[Column(Storage="_ValidFrom", DbType="DateTime")]
		public System.Nullable<System.DateTime> ValidFrom
		{
			get
			{
				return this._ValidFrom;
			}
			set
			{
				if ((this._ValidFrom != value))
				{
					this._ValidFrom = value;
				}
			}
		}
		
		[Column(Storage="_ValidTo", DbType="DateTime")]
		public System.Nullable<System.DateTime> ValidTo
		{
			get
			{
				return this._ValidTo;
			}
			set
			{
				if ((this._ValidTo != value))
				{
					this._ValidTo = value;
				}
			}
		}
	}
	
	public partial class GetDBUsersResult
	{
		
		private System.Data.Linq.Binary _DBUserSid;
		
		private string _DBUserName;
		
		public GetDBUsersResult()
		{
		}
		
		[Column(Storage="_DBUserSid", DbType="VarBinary(85)", CanBeNull=true)]
		public System.Data.Linq.Binary DBUserSid
		{
			get
			{
				return this._DBUserSid;
			}
			set
			{
				if ((this._DBUserSid != value))
				{
					this._DBUserSid = value;
				}
			}
		}
		
		[Column(Storage="_DBUserName", DbType="NVarChar(255)")]
		public string DBUserName
		{
			get
			{
				return this._DBUserName;
			}
			set
			{
				if ((this._DBUserName != value))
				{
					this._DBUserName = value;
				}
			}
		}
	}
	
	public partial class ItemAttributesResult
	{
		
		private System.Nullable<int> _ItemAttributeId;
		
		private System.Nullable<int> _ItemId;
		
		private string _AttributeKey;
		
		private string _AttributeValue;
		
		public ItemAttributesResult()
		{
		}
		
		[Column(Storage="_ItemAttributeId", DbType="Int")]
		public System.Nullable<int> ItemAttributeId
		{
			get
			{
				return this._ItemAttributeId;
			}
			set
			{
				if ((this._ItemAttributeId != value))
				{
					this._ItemAttributeId = value;
				}
			}
		}
		
		[Column(Storage="_ItemId", DbType="Int")]
		public System.Nullable<int> ItemId
		{
			get
			{
				return this._ItemId;
			}
			set
			{
				if ((this._ItemId != value))
				{
					this._ItemId = value;
				}
			}
		}
		
		[Column(Storage="_AttributeKey", DbType="NVarChar(255)")]
		public string AttributeKey
		{
			get
			{
				return this._AttributeKey;
			}
			set
			{
				if ((this._AttributeKey != value))
				{
					this._AttributeKey = value;
				}
			}
		}
		
		[Column(Storage="_AttributeValue", DbType="NVarChar(4000)")]
		public string AttributeValue
		{
			get
			{
				return this._AttributeValue;
			}
			set
			{
				if ((this._AttributeValue != value))
				{
					this._AttributeValue = value;
				}
			}
		}
	}
	
	public partial class ItemsResult
	{
		
		private System.Nullable<int> _ItemId;
		
		private System.Nullable<int> _ApplicationId;
		
		private string _Name;
		
		private string _Description;
		
		private System.Nullable<byte> _ItemType;
		
		private System.Nullable<int> _BizRuleId;
		
		public ItemsResult()
		{
		}
		
		[Column(Storage="_ItemId", DbType="Int")]
		public System.Nullable<int> ItemId
		{
			get
			{
				return this._ItemId;
			}
			set
			{
				if ((this._ItemId != value))
				{
					this._ItemId = value;
				}
			}
		}
		
		[Column(Storage="_ApplicationId", DbType="Int")]
		public System.Nullable<int> ApplicationId
		{
			get
			{
				return this._ApplicationId;
			}
			set
			{
				if ((this._ApplicationId != value))
				{
					this._ApplicationId = value;
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(255)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(1024)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this._Description = value;
				}
			}
		}
		
		[Column(Storage="_ItemType", DbType="TinyInt")]
		public System.Nullable<byte> ItemType
		{
			get
			{
				return this._ItemType;
			}
			set
			{
				if ((this._ItemType != value))
				{
					this._ItemType = value;
				}
			}
		}
		
		[Column(Storage="_BizRuleId", DbType="Int")]
		public System.Nullable<int> BizRuleId
		{
			get
			{
				return this._BizRuleId;
			}
			set
			{
				if ((this._BizRuleId != value))
				{
					this._BizRuleId = value;
				}
			}
		}
	}
	
	public partial class ItemsHierarchyResult
	{
		
		private System.Nullable<int> _ItemId;
		
		private System.Nullable<int> _MemberOfItemId;
		
		public ItemsHierarchyResult()
		{
		}
		
		[Column(Storage="_ItemId", DbType="Int")]
		public System.Nullable<int> ItemId
		{
			get
			{
				return this._ItemId;
			}
			set
			{
				if ((this._ItemId != value))
				{
					this._ItemId = value;
				}
			}
		}
		
		[Column(Storage="_MemberOfItemId", DbType="Int")]
		public System.Nullable<int> MemberOfItemId
		{
			get
			{
				return this._MemberOfItemId;
			}
			set
			{
				if ((this._MemberOfItemId != value))
				{
					this._MemberOfItemId = value;
				}
			}
		}
	}
	
	public partial class StoreAttributesResult
	{
		
		private System.Nullable<int> _StoreAttributeId;
		
		private System.Nullable<int> _StoreId;
		
		private string _AttributeKey;
		
		private string _AttributeValue;
		
		public StoreAttributesResult()
		{
		}
		
		[Column(Storage="_StoreAttributeId", DbType="Int")]
		public System.Nullable<int> StoreAttributeId
		{
			get
			{
				return this._StoreAttributeId;
			}
			set
			{
				if ((this._StoreAttributeId != value))
				{
					this._StoreAttributeId = value;
				}
			}
		}
		
		[Column(Storage="_StoreId", DbType="Int")]
		public System.Nullable<int> StoreId
		{
			get
			{
				return this._StoreId;
			}
			set
			{
				if ((this._StoreId != value))
				{
					this._StoreId = value;
				}
			}
		}
		
		[Column(Storage="_AttributeKey", DbType="NVarChar(255)")]
		public string AttributeKey
		{
			get
			{
				return this._AttributeKey;
			}
			set
			{
				if ((this._AttributeKey != value))
				{
					this._AttributeKey = value;
				}
			}
		}
		
		[Column(Storage="_AttributeValue", DbType="NVarChar(4000)")]
		public string AttributeValue
		{
			get
			{
				return this._AttributeValue;
			}
			set
			{
				if ((this._AttributeValue != value))
				{
					this._AttributeValue = value;
				}
			}
		}
	}
	
	public partial class StoreGroupMembersResult
	{
		
		private System.Nullable<int> _StoreGroupMemberId;
		
		private System.Nullable<int> _StoreGroupId;
		
		private System.Data.Linq.Binary _ObjectSid;
		
		private System.Nullable<byte> _WhereDefined;
		
		private System.Nullable<bool> _IsMember;
		
		public StoreGroupMembersResult()
		{
		}
		
		[Column(Storage="_StoreGroupMemberId", DbType="Int")]
		public System.Nullable<int> StoreGroupMemberId
		{
			get
			{
				return this._StoreGroupMemberId;
			}
			set
			{
				if ((this._StoreGroupMemberId != value))
				{
					this._StoreGroupMemberId = value;
				}
			}
		}
		
		[Column(Storage="_StoreGroupId", DbType="Int")]
		public System.Nullable<int> StoreGroupId
		{
			get
			{
				return this._StoreGroupId;
			}
			set
			{
				if ((this._StoreGroupId != value))
				{
					this._StoreGroupId = value;
				}
			}
		}
		
		[Column(Name="objectSid", Storage="_ObjectSid", DbType="VarBinary(85)", CanBeNull=true)]
		public System.Data.Linq.Binary ObjectSid
		{
			get
			{
				return this._ObjectSid;
			}
			set
			{
				if ((this._ObjectSid != value))
				{
					this._ObjectSid = value;
				}
			}
		}
		
		[Column(Storage="_WhereDefined", DbType="TinyInt")]
		public System.Nullable<byte> WhereDefined
		{
			get
			{
				return this._WhereDefined;
			}
			set
			{
				if ((this._WhereDefined != value))
				{
					this._WhereDefined = value;
				}
			}
		}
		
		[Column(Storage="_IsMember", DbType="Bit")]
		public System.Nullable<bool> IsMember
		{
			get
			{
				return this._IsMember;
			}
			set
			{
				if ((this._IsMember != value))
				{
					this._IsMember = value;
				}
			}
		}
	}
	
	public partial class StoreGroupsResult
	{
		
		private System.Nullable<int> _StoreGroupId;
		
		private System.Nullable<int> _StoreId;
		
		private System.Data.Linq.Binary _ObjectSid;
		
		private string _Name;
		
		private string _Description;
		
		private string _LDapQuery;
		
		private System.Nullable<byte> _GroupType;
		
		public StoreGroupsResult()
		{
		}
		
		[Column(Storage="_StoreGroupId", DbType="Int")]
		public System.Nullable<int> StoreGroupId
		{
			get
			{
				return this._StoreGroupId;
			}
			set
			{
				if ((this._StoreGroupId != value))
				{
					this._StoreGroupId = value;
				}
			}
		}
		
		[Column(Storage="_StoreId", DbType="Int")]
		public System.Nullable<int> StoreId
		{
			get
			{
				return this._StoreId;
			}
			set
			{
				if ((this._StoreId != value))
				{
					this._StoreId = value;
				}
			}
		}
		
		[Column(Name="objectSid", Storage="_ObjectSid", DbType="VarBinary(85)", CanBeNull=true)]
		public System.Data.Linq.Binary ObjectSid
		{
			get
			{
				return this._ObjectSid;
			}
			set
			{
				if ((this._ObjectSid != value))
				{
					this._ObjectSid = value;
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(255)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(1024)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this._Description = value;
				}
			}
		}
		
		[Column(Storage="_LDapQuery", DbType="NVarChar(4000)")]
		public string LDapQuery
		{
			get
			{
				return this._LDapQuery;
			}
			set
			{
				if ((this._LDapQuery != value))
				{
					this._LDapQuery = value;
				}
			}
		}
		
		[Column(Storage="_GroupType", DbType="TinyInt")]
		public System.Nullable<byte> GroupType
		{
			get
			{
				return this._GroupType;
			}
			set
			{
				if ((this._GroupType != value))
				{
					this._GroupType = value;
				}
			}
		}
	}
	
	public partial class StorePermissionsResult
	{
		
		private System.Nullable<int> _StorePermissionId;
		
		private System.Nullable<int> _StoreId;
		
		private string _SqlUserOrRole;
		
		private System.Nullable<bool> _IsSqlRole;
		
		private System.Nullable<byte> _NetSqlAzManFixedServerRole;
		
		public StorePermissionsResult()
		{
		}
		
		[Column(Storage="_StorePermissionId", DbType="Int")]
		public System.Nullable<int> StorePermissionId
		{
			get
			{
				return this._StorePermissionId;
			}
			set
			{
				if ((this._StorePermissionId != value))
				{
					this._StorePermissionId = value;
				}
			}
		}
		
		[Column(Storage="_StoreId", DbType="Int")]
		public System.Nullable<int> StoreId
		{
			get
			{
				return this._StoreId;
			}
			set
			{
				if ((this._StoreId != value))
				{
					this._StoreId = value;
				}
			}
		}
		
		[Column(Storage="_SqlUserOrRole", DbType="NVarChar(128)")]
		public string SqlUserOrRole
		{
			get
			{
				return this._SqlUserOrRole;
			}
			set
			{
				if ((this._SqlUserOrRole != value))
				{
					this._SqlUserOrRole = value;
				}
			}
		}
		
		[Column(Storage="_IsSqlRole", DbType="Bit")]
		public System.Nullable<bool> IsSqlRole
		{
			get
			{
				return this._IsSqlRole;
			}
			set
			{
				if ((this._IsSqlRole != value))
				{
					this._IsSqlRole = value;
				}
			}
		}
		
		[Column(Storage="_NetSqlAzManFixedServerRole", DbType="TinyInt")]
		public System.Nullable<byte> NetSqlAzManFixedServerRole
		{
			get
			{
				return this._NetSqlAzManFixedServerRole;
			}
			set
			{
				if ((this._NetSqlAzManFixedServerRole != value))
				{
					this._NetSqlAzManFixedServerRole = value;
				}
			}
		}
	}
	
	public partial class StoresResult
	{
		
		private System.Nullable<int> _StoreId;
		
		private string _Name;
		
		private string _Description;
		
		public StoresResult()
		{
		}
		
		[Column(Storage="_StoreId", DbType="Int")]
		public System.Nullable<int> StoreId
		{
			get
			{
				return this._StoreId;
			}
			set
			{
				if ((this._StoreId != value))
				{
					this._StoreId = value;
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(255)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(1024)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this._Description = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
