//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable

namespace NetSqlAzMan.NetSqlAzManWCFCacheService {
    using System.Runtime.Serialization;
    using System;
    

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ItemType", Namespace="http://NetSqlAzMan/ServiceModel")]
    public enum ItemType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Role = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Task = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Operation = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AuthorizationType", Namespace="http://NetSqlAzMan/ServiceModel")]
    public enum AuthorizationType : byte {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Neutral = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Allow = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Deny = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AllowWithDelegation = 3,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AuthorizedItem", Namespace="http://schemas.datacontract.org/2004/07/NetSqlAzMan.Cache")]
    [System.SerializableAttribute()]
    public partial class AuthorizedItem : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.KeyValuePair<string, string>[] AttributesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private NetSqlAzMan.NetSqlAzManWCFCacheService.AuthorizationType AuthorizationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private NetSqlAzMan.NetSqlAzManWCFCacheService.ItemType TypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.KeyValuePair<string, string>[] Attributes {
            get {
                return this.AttributesField;
            }
            set {
                if ((object.ReferenceEquals(this.AttributesField, value) != true)) {
                    this.AttributesField = value;
                    this.RaisePropertyChanged("Attributes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public NetSqlAzMan.NetSqlAzManWCFCacheService.AuthorizationType Authorization {
            get {
                return this.AuthorizationField;
            }
            set {
                if ((this.AuthorizationField.Equals(value) != true)) {
                    this.AuthorizationField = value;
                    this.RaisePropertyChanged("Authorization");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public NetSqlAzMan.NetSqlAzManWCFCacheService.ItemType Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="NetSqlAzManWCFCacheService.ICacheService")]
    public interface ICacheService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICacheService/CheckAccessForWindowsUsersWithAttributesRetrieve" +
            "", ReplyAction="http://tempuri.org/ICacheService/CheckAccessForWindowsUsersWithAttributesRetrieve" +
            "Response")]
        NetSqlAzMan.NetSqlAzManWCFCacheService.AuthorizationType CheckAccessForWindowsUsersWithAttributesRetrieve(out System.Collections.Generic.KeyValuePair<string, string>[] attributes, string storeName, string applicationName, string itemName, string userSSid, string[] groupsSSid, System.DateTime validFor, bool operationsOnly, System.Collections.Generic.KeyValuePair<string, object>[] contextParameters);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICacheService/CheckAccessForWindowsUsersWithAttributesRetrieve" +
            "", ReplyAction="http://tempuri.org/ICacheService/CheckAccessForWindowsUsersWithAttributesRetrieve" +
            "Response")]
        System.IAsyncResult BeginCheckAccessForWindowsUsersWithAttributesRetrieve(string storeName, string applicationName, string itemName, string userSSid, string[] groupsSSid, System.DateTime validFor, bool operationsOnly, System.Collections.Generic.KeyValuePair<string, object>[] contextParameters, System.AsyncCallback callback, object asyncState);
        
        NetSqlAzMan.NetSqlAzManWCFCacheService.AuthorizationType EndCheckAccessForWindowsUsersWithAttributesRetrieve(out System.Collections.Generic.KeyValuePair<string, string>[] attributes, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICacheService/CheckAccessForWindowsUsersWithoutAttributesRetri" +
            "eve", ReplyAction="http://tempuri.org/ICacheService/CheckAccessForWindowsUsersWithoutAttributesRetri" +
            "eveResponse")]
        NetSqlAzMan.NetSqlAzManWCFCacheService.AuthorizationType CheckAccessForWindowsUsersWithoutAttributesRetrieve(string storeName, string applicationName, string itemName, string userSSid, string[] groupsSSid, System.DateTime validFor, bool operationsOnly, System.Collections.Generic.KeyValuePair<string, object>[] contextParameters);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICacheService/CheckAccessForWindowsUsersWithoutAttributesRetri" +
            "eve", ReplyAction="http://tempuri.org/ICacheService/CheckAccessForWindowsUsersWithoutAttributesRetri" +
            "eveResponse")]
        System.IAsyncResult BeginCheckAccessForWindowsUsersWithoutAttributesRetrieve(string storeName, string applicationName, string itemName, string userSSid, string[] groupsSSid, System.DateTime validFor, bool operationsOnly, System.Collections.Generic.KeyValuePair<string, object>[] contextParameters, System.AsyncCallback callback, object asyncState);
        
        NetSqlAzMan.NetSqlAzManWCFCacheService.AuthorizationType EndCheckAccessForWindowsUsersWithoutAttributesRetrieve(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICacheService/CheckAccessForDatabaseUsersWithAttributesRetriev" +
            "e", ReplyAction="http://tempuri.org/ICacheService/CheckAccessForDatabaseUsersWithAttributesRetriev" +
            "eResponse")]
        NetSqlAzMan.NetSqlAzManWCFCacheService.AuthorizationType CheckAccessForDatabaseUsersWithAttributesRetrieve(out System.Collections.Generic.KeyValuePair<string, string>[] attributes, string storeName, string applicationName, string itemName, string DBuserSSid, System.DateTime validFor, bool operationsOnly, System.Collections.Generic.KeyValuePair<string, object>[] contextParameters);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICacheService/CheckAccessForDatabaseUsersWithAttributesRetriev" +
            "e", ReplyAction="http://tempuri.org/ICacheService/CheckAccessForDatabaseUsersWithAttributesRetriev" +
            "eResponse")]
        System.IAsyncResult BeginCheckAccessForDatabaseUsersWithAttributesRetrieve(string storeName, string applicationName, string itemName, string DBuserSSid, System.DateTime validFor, bool operationsOnly, System.Collections.Generic.KeyValuePair<string, object>[] contextParameters, System.AsyncCallback callback, object asyncState);
        
        NetSqlAzMan.NetSqlAzManWCFCacheService.AuthorizationType EndCheckAccessForDatabaseUsersWithAttributesRetrieve(out System.Collections.Generic.KeyValuePair<string, string>[] attributes, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICacheService/CheckAccessForDatabaseUsersWithoutAttributesRetr" +
            "ieve", ReplyAction="http://tempuri.org/ICacheService/CheckAccessForDatabaseUsersWithoutAttributesRetr" +
            "ieveResponse")]
        NetSqlAzMan.NetSqlAzManWCFCacheService.AuthorizationType CheckAccessForDatabaseUsersWithoutAttributesRetrieve(string storeName, string applicationName, string itemName, string DBuserSSid, System.DateTime validFor, bool operationsOnly, System.Collections.Generic.KeyValuePair<string, object>[] contextParameters);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICacheService/CheckAccessForDatabaseUsersWithoutAttributesRetr" +
            "ieve", ReplyAction="http://tempuri.org/ICacheService/CheckAccessForDatabaseUsersWithoutAttributesRetr" +
            "ieveResponse")]
        System.IAsyncResult BeginCheckAccessForDatabaseUsersWithoutAttributesRetrieve(string storeName, string applicationName, string itemName, string DBuserSSid, System.DateTime validFor, bool operationsOnly, System.Collections.Generic.KeyValuePair<string, object>[] contextParameters, System.AsyncCallback callback, object asyncState);
        
        NetSqlAzMan.NetSqlAzManWCFCacheService.AuthorizationType EndCheckAccessForDatabaseUsersWithoutAttributesRetrieve(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICacheService/InvalidateCache", ReplyAction="http://tempuri.org/ICacheService/InvalidateCacheResponse")]
        void InvalidateCache();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICacheService/InvalidateCache", ReplyAction="http://tempuri.org/ICacheService/InvalidateCacheResponse")]
        System.IAsyncResult BeginInvalidateCache(System.AsyncCallback callback, object asyncState);
        
        void EndInvalidateCache(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICacheService/InvalidateCacheOnServicePartners", ReplyAction="http://tempuri.org/ICacheService/InvalidateCacheOnServicePartnersResponse")]
        void InvalidateCacheOnServicePartners([System.ServiceModel.MessageParameterAttribute(Name="invalidateCacheOnServicePartners")] bool invalidateCacheOnServicePartners1);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICacheService/InvalidateCacheOnServicePartners", ReplyAction="http://tempuri.org/ICacheService/InvalidateCacheOnServicePartnersResponse")]
        System.IAsyncResult BeginInvalidateCacheOnServicePartners(bool invalidateCacheOnServicePartners, System.AsyncCallback callback, object asyncState);
        
        void EndInvalidateCacheOnServicePartners(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICacheService/GetItemNames", ReplyAction="http://tempuri.org/ICacheService/GetItemNamesResponse")]
        string[] GetItemNames(string storeName, string applicationName, NetSqlAzMan.NetSqlAzManWCFCacheService.ItemType type);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICacheService/GetItemNames", ReplyAction="http://tempuri.org/ICacheService/GetItemNamesResponse")]
        System.IAsyncResult BeginGetItemNames(string storeName, string applicationName, NetSqlAzMan.NetSqlAzManWCFCacheService.ItemType type, System.AsyncCallback callback, object asyncState);
        
        string[] EndGetItemNames(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICacheService/GetAllItems", ReplyAction="http://tempuri.org/ICacheService/GetAllItemsResponse")]
        System.Collections.Generic.KeyValuePair<string, NetSqlAzMan.NetSqlAzManWCFCacheService.ItemType>[] GetAllItems(string storeName, string applicationName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICacheService/GetAllItems", ReplyAction="http://tempuri.org/ICacheService/GetAllItemsResponse")]
        System.IAsyncResult BeginGetAllItems(string storeName, string applicationName, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.KeyValuePair<string, NetSqlAzMan.NetSqlAzManWCFCacheService.ItemType>[] EndGetAllItems(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICacheService/GetAuthorizedItemsForDatabaseUsers", ReplyAction="http://tempuri.org/ICacheService/GetAuthorizedItemsForDatabaseUsersResponse")]
        NetSqlAzMan.NetSqlAzManWCFCacheService.AuthorizedItem[] GetAuthorizedItemsForDatabaseUsers(string storeName, string applicationName, string DBuserSSid, System.DateTime validFor, System.Collections.Generic.KeyValuePair<string, object>[] contextParameters);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICacheService/GetAuthorizedItemsForDatabaseUsers", ReplyAction="http://tempuri.org/ICacheService/GetAuthorizedItemsForDatabaseUsersResponse")]
        System.IAsyncResult BeginGetAuthorizedItemsForDatabaseUsers(string storeName, string applicationName, string DBuserSSid, System.DateTime validFor, System.Collections.Generic.KeyValuePair<string, object>[] contextParameters, System.AsyncCallback callback, object asyncState);
        
        NetSqlAzMan.NetSqlAzManWCFCacheService.AuthorizedItem[] EndGetAuthorizedItemsForDatabaseUsers(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICacheService/GetAuthorizedItemsForWindowsUsers", ReplyAction="http://tempuri.org/ICacheService/GetAuthorizedItemsForWindowsUsersResponse")]
        NetSqlAzMan.NetSqlAzManWCFCacheService.AuthorizedItem[] GetAuthorizedItemsForWindowsUsers(string storeName, string applicationName, string userSSid, string[] groupsSSid, System.DateTime validFor, System.Collections.Generic.KeyValuePair<string, object>[] contextParameters);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICacheService/GetAuthorizedItemsForWindowsUsers", ReplyAction="http://tempuri.org/ICacheService/GetAuthorizedItemsForWindowsUsersResponse")]
        System.IAsyncResult BeginGetAuthorizedItemsForWindowsUsers(string storeName, string applicationName, string userSSid, string[] groupsSSid, System.DateTime validFor, System.Collections.Generic.KeyValuePair<string, object>[] contextParameters, System.AsyncCallback callback, object asyncState);
        
        NetSqlAzMan.NetSqlAzManWCFCacheService.AuthorizedItem[] EndGetAuthorizedItemsForWindowsUsers(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICacheServiceChannel : NetSqlAzMan.NetSqlAzManWCFCacheService.ICacheService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CheckAccessForWindowsUsersWithAttributesRetrieveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CheckAccessForWindowsUsersWithAttributesRetrieveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.KeyValuePair<string, string>[] attributes {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.KeyValuePair<string, string>[])(this.results[0]));
            }
        }
        
        public NetSqlAzMan.NetSqlAzManWCFCacheService.AuthorizationType Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((NetSqlAzMan.NetSqlAzManWCFCacheService.AuthorizationType)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CheckAccessForWindowsUsersWithoutAttributesRetrieveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CheckAccessForWindowsUsersWithoutAttributesRetrieveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public NetSqlAzMan.NetSqlAzManWCFCacheService.AuthorizationType Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((NetSqlAzMan.NetSqlAzManWCFCacheService.AuthorizationType)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CheckAccessForDatabaseUsersWithAttributesRetrieveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CheckAccessForDatabaseUsersWithAttributesRetrieveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.KeyValuePair<string, string>[] attributes {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.KeyValuePair<string, string>[])(this.results[0]));
            }
        }
        
        public NetSqlAzMan.NetSqlAzManWCFCacheService.AuthorizationType Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((NetSqlAzMan.NetSqlAzManWCFCacheService.AuthorizationType)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CheckAccessForDatabaseUsersWithoutAttributesRetrieveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CheckAccessForDatabaseUsersWithoutAttributesRetrieveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public NetSqlAzMan.NetSqlAzManWCFCacheService.AuthorizationType Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((NetSqlAzMan.NetSqlAzManWCFCacheService.AuthorizationType)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetItemNamesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetItemNamesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAllItemsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllItemsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.KeyValuePair<string, NetSqlAzMan.NetSqlAzManWCFCacheService.ItemType>[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.KeyValuePair<string, NetSqlAzMan.NetSqlAzManWCFCacheService.ItemType>[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAuthorizedItemsForDatabaseUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAuthorizedItemsForDatabaseUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public NetSqlAzMan.NetSqlAzManWCFCacheService.AuthorizedItem[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((NetSqlAzMan.NetSqlAzManWCFCacheService.AuthorizedItem[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAuthorizedItemsForWindowsUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAuthorizedItemsForWindowsUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public NetSqlAzMan.NetSqlAzManWCFCacheService.AuthorizedItem[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((NetSqlAzMan.NetSqlAzManWCFCacheService.AuthorizedItem[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CacheServiceClient : System.ServiceModel.ClientBase<NetSqlAzMan.NetSqlAzManWCFCacheService.ICacheService>, NetSqlAzMan.NetSqlAzManWCFCacheService.ICacheService {
        
        private BeginOperationDelegate onBeginCheckAccessForWindowsUsersWithAttributesRetrieveDelegate;
        
        private EndOperationDelegate onEndCheckAccessForWindowsUsersWithAttributesRetrieveDelegate;
        
        private System.Threading.SendOrPostCallback onCheckAccessForWindowsUsersWithAttributesRetrieveCompletedDelegate;
        
        private BeginOperationDelegate onBeginCheckAccessForWindowsUsersWithoutAttributesRetrieveDelegate;
        
        private EndOperationDelegate onEndCheckAccessForWindowsUsersWithoutAttributesRetrieveDelegate;
        
        private System.Threading.SendOrPostCallback onCheckAccessForWindowsUsersWithoutAttributesRetrieveCompletedDelegate;
        
        private BeginOperationDelegate onBeginCheckAccessForDatabaseUsersWithAttributesRetrieveDelegate;
        
        private EndOperationDelegate onEndCheckAccessForDatabaseUsersWithAttributesRetrieveDelegate;
        
        private System.Threading.SendOrPostCallback onCheckAccessForDatabaseUsersWithAttributesRetrieveCompletedDelegate;
        
        private BeginOperationDelegate onBeginCheckAccessForDatabaseUsersWithoutAttributesRetrieveDelegate;
        
        private EndOperationDelegate onEndCheckAccessForDatabaseUsersWithoutAttributesRetrieveDelegate;
        
        private System.Threading.SendOrPostCallback onCheckAccessForDatabaseUsersWithoutAttributesRetrieveCompletedDelegate;
        
        private BeginOperationDelegate onBeginInvalidateCacheDelegate;
        
        private EndOperationDelegate onEndInvalidateCacheDelegate;
        
        private System.Threading.SendOrPostCallback onInvalidateCacheCompletedDelegate;
        
        private BeginOperationDelegate onBeginInvalidateCacheOnServicePartnersDelegate;
        
        private EndOperationDelegate onEndInvalidateCacheOnServicePartnersDelegate;
        
        private System.Threading.SendOrPostCallback onInvalidateCacheOnServicePartnersCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetItemNamesDelegate;
        
        private EndOperationDelegate onEndGetItemNamesDelegate;
        
        private System.Threading.SendOrPostCallback onGetItemNamesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAllItemsDelegate;
        
        private EndOperationDelegate onEndGetAllItemsDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllItemsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAuthorizedItemsForDatabaseUsersDelegate;
        
        private EndOperationDelegate onEndGetAuthorizedItemsForDatabaseUsersDelegate;
        
        private System.Threading.SendOrPostCallback onGetAuthorizedItemsForDatabaseUsersCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAuthorizedItemsForWindowsUsersDelegate;
        
        private EndOperationDelegate onEndGetAuthorizedItemsForWindowsUsersDelegate;
        
        private System.Threading.SendOrPostCallback onGetAuthorizedItemsForWindowsUsersCompletedDelegate;
        
        public CacheServiceClient() {
        }
        
        public CacheServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CacheServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CacheServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CacheServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<CheckAccessForWindowsUsersWithAttributesRetrieveCompletedEventArgs> CheckAccessForWindowsUsersWithAttributesRetrieveCompleted;
        
        public event System.EventHandler<CheckAccessForWindowsUsersWithoutAttributesRetrieveCompletedEventArgs> CheckAccessForWindowsUsersWithoutAttributesRetrieveCompleted;
        
        public event System.EventHandler<CheckAccessForDatabaseUsersWithAttributesRetrieveCompletedEventArgs> CheckAccessForDatabaseUsersWithAttributesRetrieveCompleted;
        
        public event System.EventHandler<CheckAccessForDatabaseUsersWithoutAttributesRetrieveCompletedEventArgs> CheckAccessForDatabaseUsersWithoutAttributesRetrieveCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> InvalidateCacheCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> InvalidateCacheOnServicePartnersCompleted;
        
        public event System.EventHandler<GetItemNamesCompletedEventArgs> GetItemNamesCompleted;
        
        public event System.EventHandler<GetAllItemsCompletedEventArgs> GetAllItemsCompleted;
        
        public event System.EventHandler<GetAuthorizedItemsForDatabaseUsersCompletedEventArgs> GetAuthorizedItemsForDatabaseUsersCompleted;
        
        public event System.EventHandler<GetAuthorizedItemsForWindowsUsersCompletedEventArgs> GetAuthorizedItemsForWindowsUsersCompleted;
        
        public NetSqlAzMan.NetSqlAzManWCFCacheService.AuthorizationType CheckAccessForWindowsUsersWithAttributesRetrieve(out System.Collections.Generic.KeyValuePair<string, string>[] attributes, string storeName, string applicationName, string itemName, string userSSid, string[] groupsSSid, System.DateTime validFor, bool operationsOnly, System.Collections.Generic.KeyValuePair<string, object>[] contextParameters) {
            return base.Channel.CheckAccessForWindowsUsersWithAttributesRetrieve(out attributes, storeName, applicationName, itemName, userSSid, groupsSSid, validFor, operationsOnly, contextParameters);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginCheckAccessForWindowsUsersWithAttributesRetrieve(string storeName, string applicationName, string itemName, string userSSid, string[] groupsSSid, System.DateTime validFor, bool operationsOnly, System.Collections.Generic.KeyValuePair<string, object>[] contextParameters, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCheckAccessForWindowsUsersWithAttributesRetrieve(storeName, applicationName, itemName, userSSid, groupsSSid, validFor, operationsOnly, contextParameters, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public NetSqlAzMan.NetSqlAzManWCFCacheService.AuthorizationType EndCheckAccessForWindowsUsersWithAttributesRetrieve(out System.Collections.Generic.KeyValuePair<string, string>[] attributes, System.IAsyncResult result) {
            return base.Channel.EndCheckAccessForWindowsUsersWithAttributesRetrieve(out attributes, result);
        }
        
        private System.IAsyncResult OnBeginCheckAccessForWindowsUsersWithAttributesRetrieve(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string storeName = ((string)(inValues[0]));
            string applicationName = ((string)(inValues[1]));
            string itemName = ((string)(inValues[2]));
            string userSSid = ((string)(inValues[3]));
            string[] groupsSSid = ((string[])(inValues[4]));
            System.DateTime validFor = ((System.DateTime)(inValues[5]));
            bool operationsOnly = ((bool)(inValues[6]));
            System.Collections.Generic.KeyValuePair<string, object>[] contextParameters = ((System.Collections.Generic.KeyValuePair<string, object>[])(inValues[7]));
            return this.BeginCheckAccessForWindowsUsersWithAttributesRetrieve(storeName, applicationName, itemName, userSSid, groupsSSid, validFor, operationsOnly, contextParameters, callback, asyncState);
        }
        
        private object[] OnEndCheckAccessForWindowsUsersWithAttributesRetrieve(System.IAsyncResult result) {
            System.Collections.Generic.KeyValuePair<string, string>[] attributes = this.GetDefaultValueForInitialization<System.Collections.Generic.KeyValuePair<string, string>[]>();
            NetSqlAzMan.NetSqlAzManWCFCacheService.AuthorizationType retVal = this.EndCheckAccessForWindowsUsersWithAttributesRetrieve(out attributes, result);
            return new object[] {
                    attributes,
                    retVal};
        }
        
        private void OnCheckAccessForWindowsUsersWithAttributesRetrieveCompleted(object state) {
            if ((this.CheckAccessForWindowsUsersWithAttributesRetrieveCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CheckAccessForWindowsUsersWithAttributesRetrieveCompleted(this, new CheckAccessForWindowsUsersWithAttributesRetrieveCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CheckAccessForWindowsUsersWithAttributesRetrieveAsync(string storeName, string applicationName, string itemName, string userSSid, string[] groupsSSid, System.DateTime validFor, bool operationsOnly, System.Collections.Generic.KeyValuePair<string, object>[] contextParameters) {
            this.CheckAccessForWindowsUsersWithAttributesRetrieveAsync(storeName, applicationName, itemName, userSSid, groupsSSid, validFor, operationsOnly, contextParameters, null);
        }
        
        public void CheckAccessForWindowsUsersWithAttributesRetrieveAsync(string storeName, string applicationName, string itemName, string userSSid, string[] groupsSSid, System.DateTime validFor, bool operationsOnly, System.Collections.Generic.KeyValuePair<string, object>[] contextParameters, object userState) {
            if ((this.onBeginCheckAccessForWindowsUsersWithAttributesRetrieveDelegate == null)) {
                this.onBeginCheckAccessForWindowsUsersWithAttributesRetrieveDelegate = new BeginOperationDelegate(this.OnBeginCheckAccessForWindowsUsersWithAttributesRetrieve);
            }
            if ((this.onEndCheckAccessForWindowsUsersWithAttributesRetrieveDelegate == null)) {
                this.onEndCheckAccessForWindowsUsersWithAttributesRetrieveDelegate = new EndOperationDelegate(this.OnEndCheckAccessForWindowsUsersWithAttributesRetrieve);
            }
            if ((this.onCheckAccessForWindowsUsersWithAttributesRetrieveCompletedDelegate == null)) {
                this.onCheckAccessForWindowsUsersWithAttributesRetrieveCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCheckAccessForWindowsUsersWithAttributesRetrieveCompleted);
            }
            base.InvokeAsync(this.onBeginCheckAccessForWindowsUsersWithAttributesRetrieveDelegate, new object[] {
                        storeName,
                        applicationName,
                        itemName,
                        userSSid,
                        groupsSSid,
                        validFor,
                        operationsOnly,
                        contextParameters}, this.onEndCheckAccessForWindowsUsersWithAttributesRetrieveDelegate, this.onCheckAccessForWindowsUsersWithAttributesRetrieveCompletedDelegate, userState);
        }
        
        public NetSqlAzMan.NetSqlAzManWCFCacheService.AuthorizationType CheckAccessForWindowsUsersWithoutAttributesRetrieve(string storeName, string applicationName, string itemName, string userSSid, string[] groupsSSid, System.DateTime validFor, bool operationsOnly, System.Collections.Generic.KeyValuePair<string, object>[] contextParameters) {
            return base.Channel.CheckAccessForWindowsUsersWithoutAttributesRetrieve(storeName, applicationName, itemName, userSSid, groupsSSid, validFor, operationsOnly, contextParameters);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginCheckAccessForWindowsUsersWithoutAttributesRetrieve(string storeName, string applicationName, string itemName, string userSSid, string[] groupsSSid, System.DateTime validFor, bool operationsOnly, System.Collections.Generic.KeyValuePair<string, object>[] contextParameters, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCheckAccessForWindowsUsersWithoutAttributesRetrieve(storeName, applicationName, itemName, userSSid, groupsSSid, validFor, operationsOnly, contextParameters, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public NetSqlAzMan.NetSqlAzManWCFCacheService.AuthorizationType EndCheckAccessForWindowsUsersWithoutAttributesRetrieve(System.IAsyncResult result) {
            return base.Channel.EndCheckAccessForWindowsUsersWithoutAttributesRetrieve(result);
        }
        
        private System.IAsyncResult OnBeginCheckAccessForWindowsUsersWithoutAttributesRetrieve(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string storeName = ((string)(inValues[0]));
            string applicationName = ((string)(inValues[1]));
            string itemName = ((string)(inValues[2]));
            string userSSid = ((string)(inValues[3]));
            string[] groupsSSid = ((string[])(inValues[4]));
            System.DateTime validFor = ((System.DateTime)(inValues[5]));
            bool operationsOnly = ((bool)(inValues[6]));
            System.Collections.Generic.KeyValuePair<string, object>[] contextParameters = ((System.Collections.Generic.KeyValuePair<string, object>[])(inValues[7]));
            return this.BeginCheckAccessForWindowsUsersWithoutAttributesRetrieve(storeName, applicationName, itemName, userSSid, groupsSSid, validFor, operationsOnly, contextParameters, callback, asyncState);
        }
        
        private object[] OnEndCheckAccessForWindowsUsersWithoutAttributesRetrieve(System.IAsyncResult result) {
            NetSqlAzMan.NetSqlAzManWCFCacheService.AuthorizationType retVal = this.EndCheckAccessForWindowsUsersWithoutAttributesRetrieve(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCheckAccessForWindowsUsersWithoutAttributesRetrieveCompleted(object state) {
            if ((this.CheckAccessForWindowsUsersWithoutAttributesRetrieveCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CheckAccessForWindowsUsersWithoutAttributesRetrieveCompleted(this, new CheckAccessForWindowsUsersWithoutAttributesRetrieveCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CheckAccessForWindowsUsersWithoutAttributesRetrieveAsync(string storeName, string applicationName, string itemName, string userSSid, string[] groupsSSid, System.DateTime validFor, bool operationsOnly, System.Collections.Generic.KeyValuePair<string, object>[] contextParameters) {
            this.CheckAccessForWindowsUsersWithoutAttributesRetrieveAsync(storeName, applicationName, itemName, userSSid, groupsSSid, validFor, operationsOnly, contextParameters, null);
        }
        
        public void CheckAccessForWindowsUsersWithoutAttributesRetrieveAsync(string storeName, string applicationName, string itemName, string userSSid, string[] groupsSSid, System.DateTime validFor, bool operationsOnly, System.Collections.Generic.KeyValuePair<string, object>[] contextParameters, object userState) {
            if ((this.onBeginCheckAccessForWindowsUsersWithoutAttributesRetrieveDelegate == null)) {
                this.onBeginCheckAccessForWindowsUsersWithoutAttributesRetrieveDelegate = new BeginOperationDelegate(this.OnBeginCheckAccessForWindowsUsersWithoutAttributesRetrieve);
            }
            if ((this.onEndCheckAccessForWindowsUsersWithoutAttributesRetrieveDelegate == null)) {
                this.onEndCheckAccessForWindowsUsersWithoutAttributesRetrieveDelegate = new EndOperationDelegate(this.OnEndCheckAccessForWindowsUsersWithoutAttributesRetrieve);
            }
            if ((this.onCheckAccessForWindowsUsersWithoutAttributesRetrieveCompletedDelegate == null)) {
                this.onCheckAccessForWindowsUsersWithoutAttributesRetrieveCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCheckAccessForWindowsUsersWithoutAttributesRetrieveCompleted);
            }
            base.InvokeAsync(this.onBeginCheckAccessForWindowsUsersWithoutAttributesRetrieveDelegate, new object[] {
                        storeName,
                        applicationName,
                        itemName,
                        userSSid,
                        groupsSSid,
                        validFor,
                        operationsOnly,
                        contextParameters}, this.onEndCheckAccessForWindowsUsersWithoutAttributesRetrieveDelegate, this.onCheckAccessForWindowsUsersWithoutAttributesRetrieveCompletedDelegate, userState);
        }
        
        public NetSqlAzMan.NetSqlAzManWCFCacheService.AuthorizationType CheckAccessForDatabaseUsersWithAttributesRetrieve(out System.Collections.Generic.KeyValuePair<string, string>[] attributes, string storeName, string applicationName, string itemName, string DBuserSSid, System.DateTime validFor, bool operationsOnly, System.Collections.Generic.KeyValuePair<string, object>[] contextParameters) {
            return base.Channel.CheckAccessForDatabaseUsersWithAttributesRetrieve(out attributes, storeName, applicationName, itemName, DBuserSSid, validFor, operationsOnly, contextParameters);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginCheckAccessForDatabaseUsersWithAttributesRetrieve(string storeName, string applicationName, string itemName, string DBuserSSid, System.DateTime validFor, bool operationsOnly, System.Collections.Generic.KeyValuePair<string, object>[] contextParameters, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCheckAccessForDatabaseUsersWithAttributesRetrieve(storeName, applicationName, itemName, DBuserSSid, validFor, operationsOnly, contextParameters, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public NetSqlAzMan.NetSqlAzManWCFCacheService.AuthorizationType EndCheckAccessForDatabaseUsersWithAttributesRetrieve(out System.Collections.Generic.KeyValuePair<string, string>[] attributes, System.IAsyncResult result) {
            return base.Channel.EndCheckAccessForDatabaseUsersWithAttributesRetrieve(out attributes, result);
        }
        
        private System.IAsyncResult OnBeginCheckAccessForDatabaseUsersWithAttributesRetrieve(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string storeName = ((string)(inValues[0]));
            string applicationName = ((string)(inValues[1]));
            string itemName = ((string)(inValues[2]));
            string DBuserSSid = ((string)(inValues[3]));
            System.DateTime validFor = ((System.DateTime)(inValues[4]));
            bool operationsOnly = ((bool)(inValues[5]));
            System.Collections.Generic.KeyValuePair<string, object>[] contextParameters = ((System.Collections.Generic.KeyValuePair<string, object>[])(inValues[6]));
            return this.BeginCheckAccessForDatabaseUsersWithAttributesRetrieve(storeName, applicationName, itemName, DBuserSSid, validFor, operationsOnly, contextParameters, callback, asyncState);
        }
        
        private object[] OnEndCheckAccessForDatabaseUsersWithAttributesRetrieve(System.IAsyncResult result) {
            System.Collections.Generic.KeyValuePair<string, string>[] attributes = this.GetDefaultValueForInitialization<System.Collections.Generic.KeyValuePair<string, string>[]>();
            NetSqlAzMan.NetSqlAzManWCFCacheService.AuthorizationType retVal = this.EndCheckAccessForDatabaseUsersWithAttributesRetrieve(out attributes, result);
            return new object[] {
                    attributes,
                    retVal};
        }
        
        private void OnCheckAccessForDatabaseUsersWithAttributesRetrieveCompleted(object state) {
            if ((this.CheckAccessForDatabaseUsersWithAttributesRetrieveCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CheckAccessForDatabaseUsersWithAttributesRetrieveCompleted(this, new CheckAccessForDatabaseUsersWithAttributesRetrieveCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CheckAccessForDatabaseUsersWithAttributesRetrieveAsync(string storeName, string applicationName, string itemName, string DBuserSSid, System.DateTime validFor, bool operationsOnly, System.Collections.Generic.KeyValuePair<string, object>[] contextParameters) {
            this.CheckAccessForDatabaseUsersWithAttributesRetrieveAsync(storeName, applicationName, itemName, DBuserSSid, validFor, operationsOnly, contextParameters, null);
        }
        
        public void CheckAccessForDatabaseUsersWithAttributesRetrieveAsync(string storeName, string applicationName, string itemName, string DBuserSSid, System.DateTime validFor, bool operationsOnly, System.Collections.Generic.KeyValuePair<string, object>[] contextParameters, object userState) {
            if ((this.onBeginCheckAccessForDatabaseUsersWithAttributesRetrieveDelegate == null)) {
                this.onBeginCheckAccessForDatabaseUsersWithAttributesRetrieveDelegate = new BeginOperationDelegate(this.OnBeginCheckAccessForDatabaseUsersWithAttributesRetrieve);
            }
            if ((this.onEndCheckAccessForDatabaseUsersWithAttributesRetrieveDelegate == null)) {
                this.onEndCheckAccessForDatabaseUsersWithAttributesRetrieveDelegate = new EndOperationDelegate(this.OnEndCheckAccessForDatabaseUsersWithAttributesRetrieve);
            }
            if ((this.onCheckAccessForDatabaseUsersWithAttributesRetrieveCompletedDelegate == null)) {
                this.onCheckAccessForDatabaseUsersWithAttributesRetrieveCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCheckAccessForDatabaseUsersWithAttributesRetrieveCompleted);
            }
            base.InvokeAsync(this.onBeginCheckAccessForDatabaseUsersWithAttributesRetrieveDelegate, new object[] {
                        storeName,
                        applicationName,
                        itemName,
                        DBuserSSid,
                        validFor,
                        operationsOnly,
                        contextParameters}, this.onEndCheckAccessForDatabaseUsersWithAttributesRetrieveDelegate, this.onCheckAccessForDatabaseUsersWithAttributesRetrieveCompletedDelegate, userState);
        }
        
        public NetSqlAzMan.NetSqlAzManWCFCacheService.AuthorizationType CheckAccessForDatabaseUsersWithoutAttributesRetrieve(string storeName, string applicationName, string itemName, string DBuserSSid, System.DateTime validFor, bool operationsOnly, System.Collections.Generic.KeyValuePair<string, object>[] contextParameters) {
            return base.Channel.CheckAccessForDatabaseUsersWithoutAttributesRetrieve(storeName, applicationName, itemName, DBuserSSid, validFor, operationsOnly, contextParameters);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginCheckAccessForDatabaseUsersWithoutAttributesRetrieve(string storeName, string applicationName, string itemName, string DBuserSSid, System.DateTime validFor, bool operationsOnly, System.Collections.Generic.KeyValuePair<string, object>[] contextParameters, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCheckAccessForDatabaseUsersWithoutAttributesRetrieve(storeName, applicationName, itemName, DBuserSSid, validFor, operationsOnly, contextParameters, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public NetSqlAzMan.NetSqlAzManWCFCacheService.AuthorizationType EndCheckAccessForDatabaseUsersWithoutAttributesRetrieve(System.IAsyncResult result) {
            return base.Channel.EndCheckAccessForDatabaseUsersWithoutAttributesRetrieve(result);
        }
        
        private System.IAsyncResult OnBeginCheckAccessForDatabaseUsersWithoutAttributesRetrieve(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string storeName = ((string)(inValues[0]));
            string applicationName = ((string)(inValues[1]));
            string itemName = ((string)(inValues[2]));
            string DBuserSSid = ((string)(inValues[3]));
            System.DateTime validFor = ((System.DateTime)(inValues[4]));
            bool operationsOnly = ((bool)(inValues[5]));
            System.Collections.Generic.KeyValuePair<string, object>[] contextParameters = ((System.Collections.Generic.KeyValuePair<string, object>[])(inValues[6]));
            return this.BeginCheckAccessForDatabaseUsersWithoutAttributesRetrieve(storeName, applicationName, itemName, DBuserSSid, validFor, operationsOnly, contextParameters, callback, asyncState);
        }
        
        private object[] OnEndCheckAccessForDatabaseUsersWithoutAttributesRetrieve(System.IAsyncResult result) {
            NetSqlAzMan.NetSqlAzManWCFCacheService.AuthorizationType retVal = this.EndCheckAccessForDatabaseUsersWithoutAttributesRetrieve(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCheckAccessForDatabaseUsersWithoutAttributesRetrieveCompleted(object state) {
            if ((this.CheckAccessForDatabaseUsersWithoutAttributesRetrieveCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CheckAccessForDatabaseUsersWithoutAttributesRetrieveCompleted(this, new CheckAccessForDatabaseUsersWithoutAttributesRetrieveCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CheckAccessForDatabaseUsersWithoutAttributesRetrieveAsync(string storeName, string applicationName, string itemName, string DBuserSSid, System.DateTime validFor, bool operationsOnly, System.Collections.Generic.KeyValuePair<string, object>[] contextParameters) {
            this.CheckAccessForDatabaseUsersWithoutAttributesRetrieveAsync(storeName, applicationName, itemName, DBuserSSid, validFor, operationsOnly, contextParameters, null);
        }
        
        public void CheckAccessForDatabaseUsersWithoutAttributesRetrieveAsync(string storeName, string applicationName, string itemName, string DBuserSSid, System.DateTime validFor, bool operationsOnly, System.Collections.Generic.KeyValuePair<string, object>[] contextParameters, object userState) {
            if ((this.onBeginCheckAccessForDatabaseUsersWithoutAttributesRetrieveDelegate == null)) {
                this.onBeginCheckAccessForDatabaseUsersWithoutAttributesRetrieveDelegate = new BeginOperationDelegate(this.OnBeginCheckAccessForDatabaseUsersWithoutAttributesRetrieve);
            }
            if ((this.onEndCheckAccessForDatabaseUsersWithoutAttributesRetrieveDelegate == null)) {
                this.onEndCheckAccessForDatabaseUsersWithoutAttributesRetrieveDelegate = new EndOperationDelegate(this.OnEndCheckAccessForDatabaseUsersWithoutAttributesRetrieve);
            }
            if ((this.onCheckAccessForDatabaseUsersWithoutAttributesRetrieveCompletedDelegate == null)) {
                this.onCheckAccessForDatabaseUsersWithoutAttributesRetrieveCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCheckAccessForDatabaseUsersWithoutAttributesRetrieveCompleted);
            }
            base.InvokeAsync(this.onBeginCheckAccessForDatabaseUsersWithoutAttributesRetrieveDelegate, new object[] {
                        storeName,
                        applicationName,
                        itemName,
                        DBuserSSid,
                        validFor,
                        operationsOnly,
                        contextParameters}, this.onEndCheckAccessForDatabaseUsersWithoutAttributesRetrieveDelegate, this.onCheckAccessForDatabaseUsersWithoutAttributesRetrieveCompletedDelegate, userState);
        }
        
        public void InvalidateCache() {
            base.Channel.InvalidateCache();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginInvalidateCache(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginInvalidateCache(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndInvalidateCache(System.IAsyncResult result) {
            base.Channel.EndInvalidateCache(result);
        }
        
        private System.IAsyncResult OnBeginInvalidateCache(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvalidateCache(callback, asyncState);
        }
        
        private object[] OnEndInvalidateCache(System.IAsyncResult result) {
            this.EndInvalidateCache(result);
            return null;
        }
        
        private void OnInvalidateCacheCompleted(object state) {
            if ((this.InvalidateCacheCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.InvalidateCacheCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void InvalidateCacheAsync() {
            this.InvalidateCacheAsync(null);
        }
        
        public void InvalidateCacheAsync(object userState) {
            if ((this.onBeginInvalidateCacheDelegate == null)) {
                this.onBeginInvalidateCacheDelegate = new BeginOperationDelegate(this.OnBeginInvalidateCache);
            }
            if ((this.onEndInvalidateCacheDelegate == null)) {
                this.onEndInvalidateCacheDelegate = new EndOperationDelegate(this.OnEndInvalidateCache);
            }
            if ((this.onInvalidateCacheCompletedDelegate == null)) {
                this.onInvalidateCacheCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnInvalidateCacheCompleted);
            }
            base.InvokeAsync(this.onBeginInvalidateCacheDelegate, null, this.onEndInvalidateCacheDelegate, this.onInvalidateCacheCompletedDelegate, userState);
        }
        
        public void InvalidateCacheOnServicePartners(bool invalidateCacheOnServicePartners1) {
            base.Channel.InvalidateCacheOnServicePartners(invalidateCacheOnServicePartners1);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginInvalidateCacheOnServicePartners(bool invalidateCacheOnServicePartners, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginInvalidateCacheOnServicePartners(invalidateCacheOnServicePartners, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndInvalidateCacheOnServicePartners(System.IAsyncResult result) {
            base.Channel.EndInvalidateCacheOnServicePartners(result);
        }
        
        private System.IAsyncResult OnBeginInvalidateCacheOnServicePartners(object[] inValues, System.AsyncCallback callback, object asyncState) {
            bool invalidateCacheOnServicePartners = ((bool)(inValues[0]));
            return this.BeginInvalidateCacheOnServicePartners(invalidateCacheOnServicePartners, callback, asyncState);
        }
        
        private object[] OnEndInvalidateCacheOnServicePartners(System.IAsyncResult result) {
            this.EndInvalidateCacheOnServicePartners(result);
            return null;
        }
        
        private void OnInvalidateCacheOnServicePartnersCompleted(object state) {
            if ((this.InvalidateCacheOnServicePartnersCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.InvalidateCacheOnServicePartnersCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void InvalidateCacheOnServicePartnersAsync(bool invalidateCacheOnServicePartners) {
            this.InvalidateCacheOnServicePartnersAsync(invalidateCacheOnServicePartners, null);
        }
        
        public void InvalidateCacheOnServicePartnersAsync(bool invalidateCacheOnServicePartners, object userState) {
            if ((this.onBeginInvalidateCacheOnServicePartnersDelegate == null)) {
                this.onBeginInvalidateCacheOnServicePartnersDelegate = new BeginOperationDelegate(this.OnBeginInvalidateCacheOnServicePartners);
            }
            if ((this.onEndInvalidateCacheOnServicePartnersDelegate == null)) {
                this.onEndInvalidateCacheOnServicePartnersDelegate = new EndOperationDelegate(this.OnEndInvalidateCacheOnServicePartners);
            }
            if ((this.onInvalidateCacheOnServicePartnersCompletedDelegate == null)) {
                this.onInvalidateCacheOnServicePartnersCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnInvalidateCacheOnServicePartnersCompleted);
            }
            base.InvokeAsync(this.onBeginInvalidateCacheOnServicePartnersDelegate, new object[] {
                        invalidateCacheOnServicePartners}, this.onEndInvalidateCacheOnServicePartnersDelegate, this.onInvalidateCacheOnServicePartnersCompletedDelegate, userState);
        }
        
        public string[] GetItemNames(string storeName, string applicationName, NetSqlAzMan.NetSqlAzManWCFCacheService.ItemType type) {
            return base.Channel.GetItemNames(storeName, applicationName, type);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetItemNames(string storeName, string applicationName, NetSqlAzMan.NetSqlAzManWCFCacheService.ItemType type, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetItemNames(storeName, applicationName, type, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string[] EndGetItemNames(System.IAsyncResult result) {
            return base.Channel.EndGetItemNames(result);
        }
        
        private System.IAsyncResult OnBeginGetItemNames(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string storeName = ((string)(inValues[0]));
            string applicationName = ((string)(inValues[1]));
            NetSqlAzMan.NetSqlAzManWCFCacheService.ItemType type = ((NetSqlAzMan.NetSqlAzManWCFCacheService.ItemType)(inValues[2]));
            return this.BeginGetItemNames(storeName, applicationName, type, callback, asyncState);
        }
        
        private object[] OnEndGetItemNames(System.IAsyncResult result) {
            string[] retVal = this.EndGetItemNames(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetItemNamesCompleted(object state) {
            if ((this.GetItemNamesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetItemNamesCompleted(this, new GetItemNamesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetItemNamesAsync(string storeName, string applicationName, NetSqlAzMan.NetSqlAzManWCFCacheService.ItemType type) {
            this.GetItemNamesAsync(storeName, applicationName, type, null);
        }
        
        public void GetItemNamesAsync(string storeName, string applicationName, NetSqlAzMan.NetSqlAzManWCFCacheService.ItemType type, object userState) {
            if ((this.onBeginGetItemNamesDelegate == null)) {
                this.onBeginGetItemNamesDelegate = new BeginOperationDelegate(this.OnBeginGetItemNames);
            }
            if ((this.onEndGetItemNamesDelegate == null)) {
                this.onEndGetItemNamesDelegate = new EndOperationDelegate(this.OnEndGetItemNames);
            }
            if ((this.onGetItemNamesCompletedDelegate == null)) {
                this.onGetItemNamesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetItemNamesCompleted);
            }
            base.InvokeAsync(this.onBeginGetItemNamesDelegate, new object[] {
                        storeName,
                        applicationName,
                        type}, this.onEndGetItemNamesDelegate, this.onGetItemNamesCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.KeyValuePair<string, NetSqlAzMan.NetSqlAzManWCFCacheService.ItemType>[] GetAllItems(string storeName, string applicationName) {
            return base.Channel.GetAllItems(storeName, applicationName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetAllItems(string storeName, string applicationName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllItems(storeName, applicationName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.KeyValuePair<string, NetSqlAzMan.NetSqlAzManWCFCacheService.ItemType>[] EndGetAllItems(System.IAsyncResult result) {
            return base.Channel.EndGetAllItems(result);
        }
        
        private System.IAsyncResult OnBeginGetAllItems(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string storeName = ((string)(inValues[0]));
            string applicationName = ((string)(inValues[1]));
            return this.BeginGetAllItems(storeName, applicationName, callback, asyncState);
        }
        
        private object[] OnEndGetAllItems(System.IAsyncResult result) {
            System.Collections.Generic.KeyValuePair<string, NetSqlAzMan.NetSqlAzManWCFCacheService.ItemType>[] retVal = this.EndGetAllItems(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllItemsCompleted(object state) {
            if ((this.GetAllItemsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllItemsCompleted(this, new GetAllItemsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllItemsAsync(string storeName, string applicationName) {
            this.GetAllItemsAsync(storeName, applicationName, null);
        }
        
        public void GetAllItemsAsync(string storeName, string applicationName, object userState) {
            if ((this.onBeginGetAllItemsDelegate == null)) {
                this.onBeginGetAllItemsDelegate = new BeginOperationDelegate(this.OnBeginGetAllItems);
            }
            if ((this.onEndGetAllItemsDelegate == null)) {
                this.onEndGetAllItemsDelegate = new EndOperationDelegate(this.OnEndGetAllItems);
            }
            if ((this.onGetAllItemsCompletedDelegate == null)) {
                this.onGetAllItemsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllItemsCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllItemsDelegate, new object[] {
                        storeName,
                        applicationName}, this.onEndGetAllItemsDelegate, this.onGetAllItemsCompletedDelegate, userState);
        }
        
        public NetSqlAzMan.NetSqlAzManWCFCacheService.AuthorizedItem[] GetAuthorizedItemsForDatabaseUsers(string storeName, string applicationName, string DBuserSSid, System.DateTime validFor, System.Collections.Generic.KeyValuePair<string, object>[] contextParameters) {
            return base.Channel.GetAuthorizedItemsForDatabaseUsers(storeName, applicationName, DBuserSSid, validFor, contextParameters);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetAuthorizedItemsForDatabaseUsers(string storeName, string applicationName, string DBuserSSid, System.DateTime validFor, System.Collections.Generic.KeyValuePair<string, object>[] contextParameters, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAuthorizedItemsForDatabaseUsers(storeName, applicationName, DBuserSSid, validFor, contextParameters, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public NetSqlAzMan.NetSqlAzManWCFCacheService.AuthorizedItem[] EndGetAuthorizedItemsForDatabaseUsers(System.IAsyncResult result) {
            return base.Channel.EndGetAuthorizedItemsForDatabaseUsers(result);
        }
        
        private System.IAsyncResult OnBeginGetAuthorizedItemsForDatabaseUsers(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string storeName = ((string)(inValues[0]));
            string applicationName = ((string)(inValues[1]));
            string DBuserSSid = ((string)(inValues[2]));
            System.DateTime validFor = ((System.DateTime)(inValues[3]));
            System.Collections.Generic.KeyValuePair<string, object>[] contextParameters = ((System.Collections.Generic.KeyValuePair<string, object>[])(inValues[4]));
            return this.BeginGetAuthorizedItemsForDatabaseUsers(storeName, applicationName, DBuserSSid, validFor, contextParameters, callback, asyncState);
        }
        
        private object[] OnEndGetAuthorizedItemsForDatabaseUsers(System.IAsyncResult result) {
            NetSqlAzMan.NetSqlAzManWCFCacheService.AuthorizedItem[] retVal = this.EndGetAuthorizedItemsForDatabaseUsers(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAuthorizedItemsForDatabaseUsersCompleted(object state) {
            if ((this.GetAuthorizedItemsForDatabaseUsersCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAuthorizedItemsForDatabaseUsersCompleted(this, new GetAuthorizedItemsForDatabaseUsersCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAuthorizedItemsForDatabaseUsersAsync(string storeName, string applicationName, string DBuserSSid, System.DateTime validFor, System.Collections.Generic.KeyValuePair<string, object>[] contextParameters) {
            this.GetAuthorizedItemsForDatabaseUsersAsync(storeName, applicationName, DBuserSSid, validFor, contextParameters, null);
        }
        
        public void GetAuthorizedItemsForDatabaseUsersAsync(string storeName, string applicationName, string DBuserSSid, System.DateTime validFor, System.Collections.Generic.KeyValuePair<string, object>[] contextParameters, object userState) {
            if ((this.onBeginGetAuthorizedItemsForDatabaseUsersDelegate == null)) {
                this.onBeginGetAuthorizedItemsForDatabaseUsersDelegate = new BeginOperationDelegate(this.OnBeginGetAuthorizedItemsForDatabaseUsers);
            }
            if ((this.onEndGetAuthorizedItemsForDatabaseUsersDelegate == null)) {
                this.onEndGetAuthorizedItemsForDatabaseUsersDelegate = new EndOperationDelegate(this.OnEndGetAuthorizedItemsForDatabaseUsers);
            }
            if ((this.onGetAuthorizedItemsForDatabaseUsersCompletedDelegate == null)) {
                this.onGetAuthorizedItemsForDatabaseUsersCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAuthorizedItemsForDatabaseUsersCompleted);
            }
            base.InvokeAsync(this.onBeginGetAuthorizedItemsForDatabaseUsersDelegate, new object[] {
                        storeName,
                        applicationName,
                        DBuserSSid,
                        validFor,
                        contextParameters}, this.onEndGetAuthorizedItemsForDatabaseUsersDelegate, this.onGetAuthorizedItemsForDatabaseUsersCompletedDelegate, userState);
        }
        
        public NetSqlAzMan.NetSqlAzManWCFCacheService.AuthorizedItem[] GetAuthorizedItemsForWindowsUsers(string storeName, string applicationName, string userSSid, string[] groupsSSid, System.DateTime validFor, System.Collections.Generic.KeyValuePair<string, object>[] contextParameters) {
            return base.Channel.GetAuthorizedItemsForWindowsUsers(storeName, applicationName, userSSid, groupsSSid, validFor, contextParameters);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetAuthorizedItemsForWindowsUsers(string storeName, string applicationName, string userSSid, string[] groupsSSid, System.DateTime validFor, System.Collections.Generic.KeyValuePair<string, object>[] contextParameters, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAuthorizedItemsForWindowsUsers(storeName, applicationName, userSSid, groupsSSid, validFor, contextParameters, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public NetSqlAzMan.NetSqlAzManWCFCacheService.AuthorizedItem[] EndGetAuthorizedItemsForWindowsUsers(System.IAsyncResult result) {
            return base.Channel.EndGetAuthorizedItemsForWindowsUsers(result);
        }
        
        private System.IAsyncResult OnBeginGetAuthorizedItemsForWindowsUsers(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string storeName = ((string)(inValues[0]));
            string applicationName = ((string)(inValues[1]));
            string userSSid = ((string)(inValues[2]));
            string[] groupsSSid = ((string[])(inValues[3]));
            System.DateTime validFor = ((System.DateTime)(inValues[4]));
            System.Collections.Generic.KeyValuePair<string, object>[] contextParameters = ((System.Collections.Generic.KeyValuePair<string, object>[])(inValues[5]));
            return this.BeginGetAuthorizedItemsForWindowsUsers(storeName, applicationName, userSSid, groupsSSid, validFor, contextParameters, callback, asyncState);
        }
        
        private object[] OnEndGetAuthorizedItemsForWindowsUsers(System.IAsyncResult result) {
            NetSqlAzMan.NetSqlAzManWCFCacheService.AuthorizedItem[] retVal = this.EndGetAuthorizedItemsForWindowsUsers(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAuthorizedItemsForWindowsUsersCompleted(object state) {
            if ((this.GetAuthorizedItemsForWindowsUsersCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAuthorizedItemsForWindowsUsersCompleted(this, new GetAuthorizedItemsForWindowsUsersCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAuthorizedItemsForWindowsUsersAsync(string storeName, string applicationName, string userSSid, string[] groupsSSid, System.DateTime validFor, System.Collections.Generic.KeyValuePair<string, object>[] contextParameters) {
            this.GetAuthorizedItemsForWindowsUsersAsync(storeName, applicationName, userSSid, groupsSSid, validFor, contextParameters, null);
        }
        
        public void GetAuthorizedItemsForWindowsUsersAsync(string storeName, string applicationName, string userSSid, string[] groupsSSid, System.DateTime validFor, System.Collections.Generic.KeyValuePair<string, object>[] contextParameters, object userState) {
            if ((this.onBeginGetAuthorizedItemsForWindowsUsersDelegate == null)) {
                this.onBeginGetAuthorizedItemsForWindowsUsersDelegate = new BeginOperationDelegate(this.OnBeginGetAuthorizedItemsForWindowsUsers);
            }
            if ((this.onEndGetAuthorizedItemsForWindowsUsersDelegate == null)) {
                this.onEndGetAuthorizedItemsForWindowsUsersDelegate = new EndOperationDelegate(this.OnEndGetAuthorizedItemsForWindowsUsers);
            }
            if ((this.onGetAuthorizedItemsForWindowsUsersCompletedDelegate == null)) {
                this.onGetAuthorizedItemsForWindowsUsersCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAuthorizedItemsForWindowsUsersCompleted);
            }
            base.InvokeAsync(this.onBeginGetAuthorizedItemsForWindowsUsersDelegate, new object[] {
                        storeName,
                        applicationName,
                        userSSid,
                        groupsSSid,
                        validFor,
                        contextParameters}, this.onEndGetAuthorizedItemsForWindowsUsersDelegate, this.onGetAuthorizedItemsForWindowsUsersCompletedDelegate, userState);
        }
    }
}
#pragma warning enable