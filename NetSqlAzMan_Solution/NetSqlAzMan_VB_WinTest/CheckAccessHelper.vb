'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.312
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports NetSqlAzMan
Imports NetSqlAzMan.Interfaces
Imports System
Imports System.Collections.Generic
Imports System.Security.Principal
Imports System.Text

'------------------------------------------------------------------------------
' <auto-generated>
'    This code was generated by NetSqlAzMan CodeDom.
'    NetSqlAzMan - Andrea Ferendeles - http://netsqlazman.sourceforge.net
'    NetSqlAzMan Version: 2.0.0.0
'    CLR Version: v2.0.50727
'    <NetSqlAzMan-info>
'       Store: My_Store
'       Application: My_Application
'       Last update: 15/01/2007 17.37.46
'    </NetSqlAzMan-info>
' </auto-generated>
'------------------------------------------------------------------------------
'
'
'TODO: Add NetSqlAzMan.dll Assembly reference.
'
'
Namespace My_Application.Security
    '''<summary>
    '''NetSqlAzMan Check Access Helper Class for NetSqlAzMan 'My Application' Application 
    '''</summary>
    Partial Public Class CheckAccessHelper
#Region "Constants"
        '''<summary>
        '''Store Name
        '''</summary>
        Protected Const STORE_NAME As String = "My Store"
        '''<summary>
        '''Application Name
        '''</summary>
        Protected Const APPLICATION_NAME As String = "My Application"
#End Region
#Region "Fields"
        '''<summary>
        '''NetSqlAzMan Storage reference.
        '''</summary>
        Protected mStorage As NetSqlAzMan.Interfaces.IAzManStorage
        '''<summary>
        '''User Windows Principal Identity.
        '''</summary>
        Protected windowsIdentity As System.Security.Principal.WindowsIdentity
#End Region
#Region "Constructors"
        '''<summary>
        '''Initializes a new instance of the <see cref="T:CheckAccessHelper"/> class.
        '''</summary>
        '''<param name="storageConnectionString">The storage connection string.</param>
        '''<param name="windowsIdentity">The Windows Principal Identity.</param>
        Public Sub New(ByVal storageConnectionString As String, ByVal windowsIdentity As System.Security.Principal.WindowsIdentity)
            MyBase.New()
            Me.mStorage = New NetSqlAzMan.SqlAzManStorage(storageConnectionString)
            Me.windowsIdentity = windowsIdentity
        End Sub
#End Region
#Region "Properties"
        '''<summary>
        '''Gets the NetSqlAzMan Storage.
        '''</summary>
        Public Overridable ReadOnly Property Storage() As NetSqlAzMan.Interfaces.IAzManStorage
            Get
                Return Me.mStorage
            End Get
        End Property
#End Region
#Region "Methods"
        '''<summary>
        '''Opens the connection
        '''</summary>
        Public Overridable Sub OpenConnection()
            Me.mStorage.OpenConnection()
        End Sub
        '''<summary>
        '''Closes the connection
        '''</summary>
        Public Overridable Sub CloseConnection()
            Me.mStorage.CloseConnection()
        End Sub
        '''<summary>
        '''Retrieve Item name from a Role Enum.
        '''</summary>
        '''<param name="role">The role.</param>
        '''<returns>The Role Name.</returns>
        Public Overridable Overloads Function ItemName(ByVal role As Role) As String
            If (role = Role.My_Role) Then
                Return "My Role"
            End If
            Throw New System.ArgumentException("Unknow Role name", "role")
        End Function
        '''<summary>
        '''Retrieve Item name from a Task Enum.
        '''</summary>
        '''<param name="task">The task.</param>
        '''<returns>The Task Name.</returns>
        Public Overridable Overloads Function ItemName(ByVal task As Task) As String
            If (task = Task.My_Task) Then
                Return "My Task"
            End If
            If (task = Task.OtherTask) Then
                Return "OtherTask"
            End If
            Throw New System.ArgumentException("Unknow Task name", "task")
        End Function
        '''<summary>
        '''Retrieve Item name from a Operation Enum.
        '''</summary>
        '''<param name="operation">The operation.</param>
        '''<returns>The Operation Name.</returns>
        Public Overridable Overloads Function ItemName(ByVal operation As Operation) As String
            If (operation = Operation.My_Operation) Then
                Return "My Operation"
            End If
            If (operation = Operation.Other_Operation) Then
                Return "Other Operation"
            End If
            Throw New System.ArgumentException("Unknow Operation name", "operation")
        End Function
        '''<summary>
        '''Checks the access [FOR Windows Users ONLY].
        '''</summary>
        '''<param name="itemName">The Item Name.</param>
        '''<param name="operationsOnly">if set to <c>true</c> checks the access for operations only.</param>
        '''<param name="contextParameters">Context Parameters for Biz Rules.</param>
        '''<returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        Protected Overridable Overloads Function CheckAccess(ByVal itemName As String, ByVal operationsOnly As Boolean, <System.ParamArrayAttribute()> ByVal contextParameters As KeyValuePair(Of String, Object)()) As NetSqlAzMan.Interfaces.AuthorizationType
            Return Me.mStorage.CheckAccess(CheckAccessHelper.STORE_NAME, CheckAccessHelper.APPLICATION_NAME, itemName, Me.windowsIdentity, DateTime.Now, operationsOnly, contextParameters)
        End Function
        '''<summary>
        '''Checks the access [FOR DB Users ONLY].
        '''</summary>
        '''<param name="itemName">The Item Name.</param>
        '''<param name="dbUserName">The DB User Name.</param>
        '''<param name="operationsOnly">if set to <c>true</c> checks the access for operations only.</param>
        '''<param name="contextParameters">Context Parameters for Biz Rules.</param>
        '''<returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        Protected Overridable Overloads Function CheckAccess(ByVal itemName As String, ByVal dbUserName As String, ByVal operationsOnly As Boolean, <System.ParamArrayAttribute()> ByVal contextParameters As KeyValuePair(Of String, Object)()) As NetSqlAzMan.Interfaces.AuthorizationType
            Return Me.mStorage.CheckAccess(CheckAccessHelper.STORE_NAME, CheckAccessHelper.APPLICATION_NAME, itemName, Me.mStorage.GetDBUser(dbUserName), DateTime.Now, operationsOnly, contextParameters)
        End Function
        '''<summary>
        '''Checks the access [FOR Windows Users ONLY].
        '''</summary>
        '''<param name="itemName">The Item Name.</param>
        '''<param name="operationsOnly">if set to <c>true</c> checks the access for operations only.</param>
        '''<param name="contextParameters">Context Parameters for Biz Rules.</param>
        '''<param name="attributes">Retrieved attributes.</param>
        '''<returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        Protected Overridable Overloads Function CheckAccess(ByVal itemName As String, ByVal operationsOnly As Boolean, ByRef attributes As System.Collections.Generic.List(Of System.Collections.Generic.KeyValuePair(Of String, String)), <System.ParamArrayAttribute()> ByVal contextParameters As KeyValuePair(Of String, Object)()) As NetSqlAzMan.Interfaces.AuthorizationType
            Return Me.mStorage.CheckAccess(CheckAccessHelper.STORE_NAME, CheckAccessHelper.APPLICATION_NAME, itemName, Me.windowsIdentity, DateTime.Now, operationsOnly, attributes, contextParameters)
        End Function
        '''<summary>
        '''Checks the access [FOR DB Users ONLY].
        '''</summary>
        '''<param name="itemName">The Item Name.</param>
        '''<param name="dbUserName">The DB User Name.</param>
        '''<param name="operationsOnly">if set to <c>true</c> checks the access for operations only.</param>
        '''<param name="attributes">Retrieved attributes.</param>
        '''<param name="contextParameters">Context Parameters for Biz Rules.</param>
        '''<returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        Protected Overridable Overloads Function CheckAccess(ByVal itemName As String, ByVal dbUserName As String, ByVal operationsOnly As Boolean, ByRef attributes As System.Collections.Generic.List(Of System.Collections.Generic.KeyValuePair(Of String, String)), <System.ParamArrayAttribute()> ByVal contextParameters As KeyValuePair(Of String, Object)()) As NetSqlAzMan.Interfaces.AuthorizationType
            Return Me.mStorage.CheckAccess(CheckAccessHelper.STORE_NAME, CheckAccessHelper.APPLICATION_NAME, itemName, Me.mStorage.GetDBUser(dbUserName), DateTime.Now, operationsOnly, attributes, contextParameters)
        End Function
        '''<summary>
        '''Gets the Authorization Type [FOR Windows Users ONLY].
        '''</summary>
        '''<param name="role">The Role.</param>
        '''<param name="contextParameters">Context Parameters for Biz Rules.</param>
        '''<returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        Public Overridable Overloads Function GetAuthorizationType(ByVal role As Role, <System.ParamArrayAttribute()> ByVal contextParameters As KeyValuePair(Of String, Object)()) As NetSqlAzMan.Interfaces.AuthorizationType
            Return Me.CheckAccess(Me.ItemName(role), False, contextParameters)
        End Function
        '''<summary>
        '''Gets the Authorization Type [FOR DB Users ONLY].
        '''</summary>
        '''<param name="role">The Role.</param>
        '''<param name="dbUserName">The DB UserName.</param>
        '''<param name="contextParameters">Context Parameters for Biz Rules.</param>
        '''<returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        Public Overridable Overloads Function GetAuthorizationType(ByVal role As Role, ByVal dbUserName As String, <System.ParamArrayAttribute()> ByVal contextParameters As KeyValuePair(Of String, Object)()) As NetSqlAzMan.Interfaces.AuthorizationType
            Return Me.CheckAccess(Me.ItemName(role), dbUserName, False, contextParameters)
        End Function
        '''<summary>
        '''Gets the Authorization Type [FOR Windows Users ONLY].
        '''</summary>
        '''<param name="role">The Role.</param>
        '''<param name="attributes">Retrieved attributes.</param>
        '''<param name="contextParameters">Context Parameters for Biz Rules.</param>
        '''<returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        Public Overridable Overloads Function GetAuthorizationType(ByVal role As Role, ByRef attributes As System.Collections.Generic.List(Of System.Collections.Generic.KeyValuePair(Of String, String)), <System.ParamArrayAttribute()> ByVal contextParameters As KeyValuePair(Of String, Object)()) As NetSqlAzMan.Interfaces.AuthorizationType
            Return Me.CheckAccess(Me.ItemName(role), False, attributes, contextParameters)
        End Function
        '''<summary>
        '''Gets the Authorization Type [FOR DB Users ONLY].
        '''</summary>
        '''<param name="role">The Role.</param>
        '''<param name="dbUserName">The DB UserName.</param>
        '''<param name="attributes">Retrieved attributes.</param>
        '''<param name="contextParameters">Context Parameters for Biz Rules.</param>
        '''<returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        Public Overridable Overloads Function GetAuthorizationType(ByVal role As Role, ByVal dbUserName As String, ByRef attributes As System.Collections.Generic.List(Of System.Collections.Generic.KeyValuePair(Of String, String)), <System.ParamArrayAttribute()> ByVal contextParameters As KeyValuePair(Of String, Object)()) As NetSqlAzMan.Interfaces.AuthorizationType
            Return Me.CheckAccess(Me.ItemName(role), dbUserName, False, attributes, contextParameters)
        End Function
        '''<summary>
        '''Gets the Authorization Type [FOR Windows Users ONLY].
        '''</summary>
        '''<param name="task">The Task.</param>
        '''<param name="contextParameters">Context Parameters for Biz Rules.</param>
        '''<returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        Public Overridable Overloads Function GetAuthorizationType(ByVal task As Task, <System.ParamArrayAttribute()> ByVal contextParameters As KeyValuePair(Of String, Object)()) As NetSqlAzMan.Interfaces.AuthorizationType
            Return Me.CheckAccess(Me.ItemName(task), False, contextParameters)
        End Function
        '''<summary>
        '''Gets the Authorization Type [FOR DB Users ONLY].
        '''</summary>
        '''<param name="task">The Task.</param>
        '''<param name="dbUserName">The DB UserName.</param>
        '''<param name="contextParameters">Context Parameters for Biz Rules.</param>
        '''<returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        Public Overridable Overloads Function GetAuthorizationType(ByVal task As Task, ByVal dbUserName As String, <System.ParamArrayAttribute()> ByVal contextParameters As KeyValuePair(Of String, Object)()) As NetSqlAzMan.Interfaces.AuthorizationType
            Return Me.CheckAccess(Me.ItemName(task), dbUserName, False, contextParameters)
        End Function
        '''<summary>
        '''Gets the Authorization Type [FOR Windows Users ONLY].
        '''</summary>
        '''<param name="task">The Task.</param>
        '''<param name="attributes">Retrieved attributes.</param>
        '''<param name="contextParameters">Context Parameters for Biz Rules.</param>
        '''<returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        Public Overridable Overloads Function GetAuthorizationType(ByVal task As Task, ByRef attributes As System.Collections.Generic.List(Of System.Collections.Generic.KeyValuePair(Of String, String)), <System.ParamArrayAttribute()> ByVal contextParameters As KeyValuePair(Of String, Object)()) As NetSqlAzMan.Interfaces.AuthorizationType
            Return Me.CheckAccess(Me.ItemName(task), False, attributes, contextParameters)
        End Function
        '''<summary>
        '''Gets the Authorization Type [FOR DB Users ONLY].
        '''</summary>
        '''<param name="task">The Task.</param>
        '''<param name="dbUserName">The DB UserName.</param>
        '''<param name="attributes">Retrieved attributes.</param>
        '''<param name="contextParameters">Context Parameters for Biz Rules.</param>
        '''<returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        Public Overridable Overloads Function GetAuthorizationType(ByVal task As Task, ByVal dbUserName As String, ByRef attributes As System.Collections.Generic.List(Of System.Collections.Generic.KeyValuePair(Of String, String)), <System.ParamArrayAttribute()> ByVal contextParameters As KeyValuePair(Of String, Object)()) As NetSqlAzMan.Interfaces.AuthorizationType
            Return Me.CheckAccess(Me.ItemName(task), dbUserName, False, attributes, contextParameters)
        End Function
        '''<summary>
        '''Gets the Authorization Type [FOR Windows Users ONLY].
        '''</summary>
        '''<param name="operation">The Operation.</param>
        '''<param name="contextParameters">Context Parameters for Biz Rules.</param>
        '''<returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        Public Overridable Overloads Function GetAuthorizationType(ByVal operation As Operation, <System.ParamArrayAttribute()> ByVal contextParameters As KeyValuePair(Of String, Object)()) As NetSqlAzMan.Interfaces.AuthorizationType
            Return Me.CheckAccess(Me.ItemName(operation), True, contextParameters)
        End Function
        '''<summary>
        '''Gets the Authorization Type [FOR DB Users ONLY].
        '''</summary>
        '''<param name="operation">The Operation.</param>
        '''<param name="dbUserName">The DB UserName.</param>
        '''<param name="contextParameters">Context Parameters for Biz Rules.</param>
        '''<returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        Public Overridable Overloads Function GetAuthorizationType(ByVal operation As Operation, ByVal dbUserName As String, <System.ParamArrayAttribute()> ByVal contextParameters As KeyValuePair(Of String, Object)()) As NetSqlAzMan.Interfaces.AuthorizationType
            Return Me.CheckAccess(Me.ItemName(operation), dbUserName, True, contextParameters)
        End Function
        '''<summary>
        '''Gets the Authorization Type [FOR Windows Users ONLY].
        '''</summary>
        '''<param name="operation">The Operation.</param>
        '''<param name="attributes">Retrieved attributes.</param>
        '''<param name="contextParameters">Context Parameters for Biz Rules.</param>
        '''<returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        Public Overridable Overloads Function GetAuthorizationType(ByVal operation As Operation, ByRef attributes As System.Collections.Generic.List(Of System.Collections.Generic.KeyValuePair(Of String, String)), <System.ParamArrayAttribute()> ByVal contextParameters As KeyValuePair(Of String, Object)()) As NetSqlAzMan.Interfaces.AuthorizationType
            Return Me.CheckAccess(Me.ItemName(operation), True, attributes, contextParameters)
        End Function
        '''<summary>
        '''Gets the Authorization Type [FOR DB Users ONLY].
        '''</summary>
        '''<param name="operation">The Operation.</param>
        '''<param name="dbUserName">The DB UserName.</param>
        '''<param name="attributes">Retrieved attributes.</param>
        '''<param name="contextParameters">Context Parameters for Biz Rules.</param>
        '''<returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        Public Overridable Overloads Function GetAuthorizationType(ByVal operation As Operation, ByVal dbUserName As String, ByRef attributes As System.Collections.Generic.List(Of System.Collections.Generic.KeyValuePair(Of String, String)), <System.ParamArrayAttribute()> ByVal contextParameters As KeyValuePair(Of String, Object)()) As NetSqlAzMan.Interfaces.AuthorizationType
            Return Me.CheckAccess(Me.ItemName(operation), dbUserName, True, attributes, contextParameters)
        End Function
        '''<summary>
        '''Checks the access [FOR Windows Users ONLY].
        '''</summary>
        '''<param name="role">The Role.</param>
        '''<param name="contextParameters">Context Parameters for Biz Rules.</param>
        '''<returns>True for Access Granted, False for Access Denied.</returns>
        Public Overridable Overloads Function CheckAccess(ByVal role As Role, <System.ParamArrayAttribute()> ByVal contextParameters As KeyValuePair(Of String, Object)()) As Boolean
            Dim result As NetSqlAzMan.Interfaces.AuthorizationType = Me.GetAuthorizationType(role, contextParameters)
            Return ((result = AuthorizationType.AllowWithDelegation) _
                        OrElse (result = AuthorizationType.Allow))
        End Function
        '''<summary>
        '''Checks the access [FOR DB Users ONLY].
        '''</summary>
        '''<param name="role">The Role.</param>
        '''<param name="dbUserName">The DB UserName.</param>
        '''<param name="contextParameters">Context Parameters for Biz Rules.</param>
        '''<returns>True for Access Granted, False for Access Denied.</returns>
        Public Overridable Overloads Function CheckAccess(ByVal role As Role, ByVal dbUserName As String, <System.ParamArrayAttribute()> ByVal contextParameters As KeyValuePair(Of String, Object)()) As Boolean
            Dim result As NetSqlAzMan.Interfaces.AuthorizationType = Me.GetAuthorizationType(role, dbUserName, contextParameters)
            Return ((result = AuthorizationType.AllowWithDelegation) _
                        OrElse (result = AuthorizationType.Allow))
        End Function
        '''<summary>
        '''Checks the access [FOR Windows Users ONLY].
        '''</summary>
        '''<param name="role">The Role.</param>
        '''<param name="attributes">Retrieved attributes.</param>
        '''<param name="contextParameters">Context Parameters for Biz Rules.</param>
        '''<returns>True for Access Granted, False for Access Denied.</returns>
        Public Overridable Overloads Function CheckAccess(ByVal role As Role, ByRef attributes As System.Collections.Generic.List(Of System.Collections.Generic.KeyValuePair(Of String, String)), <System.ParamArrayAttribute()> ByVal contextParameters As KeyValuePair(Of String, Object)()) As Boolean
            Dim result As NetSqlAzMan.Interfaces.AuthorizationType = Me.GetAuthorizationType(role, attributes, contextParameters)
            Return ((result = AuthorizationType.AllowWithDelegation) _
                        OrElse (result = AuthorizationType.Allow))
        End Function
        '''<summary>
        '''Checks the access [FOR DB Users ONLY].
        '''</summary>
        '''<param name="role">The Role.</param>
        '''<param name="dbUserName">The DB UserName.</param>
        '''<param name="attributes">Retrieved attributes.</param>
        '''<param name="contextParameters">Context Parameters for Biz Rules.</param>
        '''<returns>True for Access Granted, False for Access Denied.</returns>
        Public Overridable Overloads Function CheckAccess(ByVal role As Role, ByVal dbUserName As String, ByRef attributes As System.Collections.Generic.List(Of System.Collections.Generic.KeyValuePair(Of String, String)), <System.ParamArrayAttribute()> ByVal contextParameters As KeyValuePair(Of String, Object)()) As Boolean
            Dim result As NetSqlAzMan.Interfaces.AuthorizationType = Me.GetAuthorizationType(role, dbUserName, attributes, contextParameters)
            Return ((result = AuthorizationType.AllowWithDelegation) _
                        OrElse (result = AuthorizationType.Allow))
        End Function
        '''<summary>
        '''Checks the access [FOR Windows Users ONLY].
        '''</summary>
        '''<param name="task">The Task.</param>
        '''<param name="contextParameters">Context Parameters for Biz Rules.</param>
        '''<returns>True for Access Granted, False for Access Denied.</returns>
        Public Overridable Overloads Function CheckAccess(ByVal task As Task, <System.ParamArrayAttribute()> ByVal contextParameters As KeyValuePair(Of String, Object)()) As Boolean
            Dim result As NetSqlAzMan.Interfaces.AuthorizationType = Me.GetAuthorizationType(task, contextParameters)
            Return ((result = AuthorizationType.AllowWithDelegation) _
                        OrElse (result = AuthorizationType.Allow))
        End Function
        '''<summary>
        '''Checks the access [FOR DB Users ONLY].
        '''</summary>
        '''<param name="task">The Task.</param>
        '''<param name="dbUserName">The DB UserName.</param>
        '''<param name="contextParameters">Context Parameters for Biz Rules.</param>
        '''<returns>True for Access Granted, False for Access Denied.</returns>
        Public Overridable Overloads Function CheckAccess(ByVal task As Task, ByVal dbUserName As String, <System.ParamArrayAttribute()> ByVal contextParameters As KeyValuePair(Of String, Object)()) As Boolean
            Dim result As NetSqlAzMan.Interfaces.AuthorizationType = Me.GetAuthorizationType(task, dbUserName, contextParameters)
            Return ((result = AuthorizationType.AllowWithDelegation) _
                        OrElse (result = AuthorizationType.Allow))
        End Function
        '''<summary>
        '''Checks the access [FOR Windows Users ONLY].
        '''</summary>
        '''<param name="task">The Task.</param>
        '''<param name="attributes">Retrieved attributes.</param>
        '''<param name="contextParameters">Context Parameters for Biz Rules.</param>
        '''<returns>True for Access Granted, False for Access Denied.</returns>
        Public Overridable Overloads Function CheckAccess(ByVal task As Task, ByRef attributes As System.Collections.Generic.List(Of System.Collections.Generic.KeyValuePair(Of String, String)), <System.ParamArrayAttribute()> ByVal contextParameters As KeyValuePair(Of String, Object)()) As Boolean
            Dim result As NetSqlAzMan.Interfaces.AuthorizationType = Me.GetAuthorizationType(task, attributes, contextParameters)
            Return ((result = AuthorizationType.AllowWithDelegation) _
                        OrElse (result = AuthorizationType.Allow))
        End Function
        '''<summary>
        '''Checks the access [FOR DB Users ONLY].
        '''</summary>
        '''<param name="task">The Task.</param>
        '''<param name="dbUserName">The DB UserName.</param>
        '''<param name="attributes">Retrieved attributes.</param>
        '''<param name="contextParameters">Context Parameters for Biz Rules.</param>
        '''<returns>True for Access Granted, False for Access Denied.</returns>
        Public Overridable Overloads Function CheckAccess(ByVal task As Task, ByVal dbUserName As String, ByRef attributes As System.Collections.Generic.List(Of System.Collections.Generic.KeyValuePair(Of String, String)), <System.ParamArrayAttribute()> ByVal contextParameters As KeyValuePair(Of String, Object)()) As Boolean
            Dim result As NetSqlAzMan.Interfaces.AuthorizationType = Me.GetAuthorizationType(task, dbUserName, attributes, contextParameters)
            Return ((result = AuthorizationType.AllowWithDelegation) _
                        OrElse (result = AuthorizationType.Allow))
        End Function
        '''<summary>
        '''Checks the access [FOR Windows Users ONLY].
        '''</summary>
        '''<param name="operation">The Operation.</param>
        '''<param name="contextParameters">Context Parameters for Biz Rules.</param>
        '''<returns>True for Access Granted, False for Access Denied.</returns>
        Public Overridable Overloads Function CheckAccess(ByVal operation As Operation, <System.ParamArrayAttribute()> ByVal contextParameters As KeyValuePair(Of String, Object)()) As Boolean
            Dim result As NetSqlAzMan.Interfaces.AuthorizationType = Me.GetAuthorizationType(operation, contextParameters)
            Return ((result = AuthorizationType.AllowWithDelegation) _
                        OrElse (result = AuthorizationType.Allow))
        End Function
        '''<summary>
        '''Checks the access [FOR DB Users ONLY].
        '''</summary>
        '''<param name="operation">The Operation.</param>
        '''<param name="dbUserName">The DB UserName.</param>
        '''<param name="contextParameters">Context Parameters for Biz Rules.</param>
        '''<returns>True for Access Granted, False for Access Denied.</returns>
        Public Overridable Overloads Function CheckAccess(ByVal operation As Operation, ByVal dbUserName As String, <System.ParamArrayAttribute()> ByVal contextParameters As KeyValuePair(Of String, Object)()) As Boolean
            Dim result As NetSqlAzMan.Interfaces.AuthorizationType = Me.GetAuthorizationType(operation, dbUserName, contextParameters)
            Return ((result = AuthorizationType.AllowWithDelegation) _
                        OrElse (result = AuthorizationType.Allow))
        End Function
        '''<summary>
        '''Checks the access [FOR Windows Users ONLY].
        '''</summary>
        '''<param name="operation">The Operation.</param>
        '''<param name="attributes">Retrieved attributes.</param>
        '''<param name="contextParameters">Context Parameters for Biz Rules.</param>
        '''<returns>True for Access Granted, False for Access Denied.</returns>
        Public Overridable Overloads Function CheckAccess(ByVal operation As Operation, ByRef attributes As System.Collections.Generic.List(Of System.Collections.Generic.KeyValuePair(Of String, String)), <System.ParamArrayAttribute()> ByVal contextParameters As KeyValuePair(Of String, Object)()) As Boolean
            Dim result As NetSqlAzMan.Interfaces.AuthorizationType = Me.GetAuthorizationType(operation, attributes, contextParameters)
            Return ((result = AuthorizationType.AllowWithDelegation) _
                        OrElse (result = AuthorizationType.Allow))
        End Function
        '''<summary>
        '''Checks the access [FOR DB Users ONLY].
        '''</summary>
        '''<param name="operation">The Operation.</param>
        '''<param name="dbUserName">The DB UserName.</param>
        '''<param name="attributes">Retrieved attributes.</param>
        '''<param name="contextParameters">Context Parameters for Biz Rules.</param>
        '''<returns>True for Access Granted, False for Access Denied.</returns>
        Public Overridable Overloads Function CheckAccess(ByVal operation As Operation, ByVal dbUserName As String, ByRef attributes As System.Collections.Generic.List(Of System.Collections.Generic.KeyValuePair(Of String, String)), <System.ParamArrayAttribute()> ByVal contextParameters As KeyValuePair(Of String, Object)()) As Boolean
            Dim result As NetSqlAzMan.Interfaces.AuthorizationType = Me.GetAuthorizationType(operation, dbUserName, attributes, contextParameters)
            Return ((result = AuthorizationType.AllowWithDelegation) _
                        OrElse (result = AuthorizationType.Allow))
        End Function
#End Region
#Region "Enums"
        '''<summary>
        '''Roles Enumeration
        '''</summary>
        Public Enum Role
            '''<summary>
            '''Role My Role
            '''</summary>
            My_Role
        End Enum
        '''<summary>
        '''Tasks Enumeration
        '''</summary>
        Public Enum Task
            '''<summary>
            '''Task My Task
            '''</summary>
            My_Task
            '''<summary>
            '''Task OtherTask
            '''</summary>
            OtherTask
        End Enum
        '''<summary>
        '''Operations Enumeration
        '''</summary>
        Public Enum Operation
            '''<summary>
            '''Operation My Operation
            '''</summary>
            My_Operation
            '''<summary>
            '''Operation Other Operation
            '''</summary>
            Other_Operation
        End Enum
#End Region
    End Class
End Namespace
