//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.312
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// ------------------------------------------------------------------------------
//  <auto-generated>
//     This code was generated by NetSqlAzMan CodeDom.
//     NetSqlAzMan - Andrea Ferendeles - http://netsqlazman.codeplex.com
//     NetSqlAzMan Version: 2.0.0.0
//     CLR Version: v2.0.50727
//     <NetSqlAzMan-info>
//        Store: Store_Stress_Test
//        Application: Application0
//        Last update: 01/02/2007 14.09.33
//     </NetSqlAzMan-info>
//  </auto-generated>
// ------------------------------------------------------------------------------
// 
// 
// TODO: Add NetSqlAzMan.dll Assembly reference.
// 
// 
namespace Application0.Security
{
    using System;
    using System.Security.Principal;
    using System.Collections.Generic;
    using System.Text;
    using NetSqlAzMan;
    using NetSqlAzMan.Interfaces;

    /// <summary>
    /// NetSqlAzMan Check Access Helper Class for NetSqlAzMan 'Application0' Application 
    /// </summary>
    public partial class CheckAccessHelper
    {
        #region Constants
        /// <summary>
        /// Store Name
        /// </summary>
        protected const string STORE_NAME = "Store Stress Test";
        /// <summary>
        /// Application Name
        /// </summary>
        protected const string APPLICATION_NAME = "Application0";
        #endregion
        #region Fields
        /// <summary>
        /// NetSqlAzMan Storage reference.
        /// </summary>
        protected NetSqlAzMan.Interfaces.IAzManStorage mStorage;
        /// <summary>
        /// User Windows Principal Identity.
        /// </summary>
        protected System.Security.Principal.WindowsIdentity windowsIdentity;
        #endregion
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="T:CheckAccessHelper"/> class.
        /// </summary>
        /// <param name="storageConnectionString">The storage connection string.</param>
        /// <param name="windowsIdentity">The Windows Principal Identity.</param>
        public CheckAccessHelper(string storageConnectionString, System.Security.Principal.WindowsIdentity windowsIdentity)
        {
            this.mStorage = new NetSqlAzMan.SqlAzManStorage(storageConnectionString);
            this.windowsIdentity = windowsIdentity;
        }
        #endregion
        #region Properties
        /// <summary>
        /// Gets the NetSqlAzMan Storage.
        /// </summary>
        public virtual NetSqlAzMan.Interfaces.IAzManStorage Storage
        {
            get
            {
                return this.mStorage;
            }
        }
        #endregion
        #region Methods
        /// <summary>
        /// Opens the connection
        /// </summary>
        public virtual void OpenConnection()
        {
            this.mStorage.OpenConnection();
        }
        /// <summary>
        /// Closes the connection
        /// </summary>
        public virtual void CloseConnection()
        {
            this.mStorage.CloseConnection();
        }
        /// <summary>
        /// Retrieve Item name from a Role Enum.
        /// </summary>
        /// <param name="role">The role.</param>
        /// <returns>The Role Name.</returns>
        public virtual string ItemName(Role role)
        {
            if ((role == Role.Role0))
            {
                return "Role0";
            }
            if ((role == Role.Role1))
            {
                return "Role1";
            }
            if ((role == Role.Role10))
            {
                return "Role10";
            }
            if ((role == Role.Role11))
            {
                return "Role11";
            }
            if ((role == Role.Role12))
            {
                return "Role12";
            }
            if ((role == Role.Role13))
            {
                return "Role13";
            }
            if ((role == Role.Role14))
            {
                return "Role14";
            }
            if ((role == Role.Role15))
            {
                return "Role15";
            }
            if ((role == Role.Role16))
            {
                return "Role16";
            }
            if ((role == Role.Role17))
            {
                return "Role17";
            }
            if ((role == Role.Role18))
            {
                return "Role18";
            }
            if ((role == Role.Role19))
            {
                return "Role19";
            }
            if ((role == Role.Role2))
            {
                return "Role2";
            }
            if ((role == Role.Role3))
            {
                return "Role3";
            }
            if ((role == Role.Role4))
            {
                return "Role4";
            }
            if ((role == Role.Role5))
            {
                return "Role5";
            }
            if ((role == Role.Role6))
            {
                return "Role6";
            }
            if ((role == Role.Role7))
            {
                return "Role7";
            }
            if ((role == Role.Role8))
            {
                return "Role8";
            }
            if ((role == Role.Role9))
            {
                return "Role9";
            }
            throw new System.ArgumentException("Unknown Role name", "role");
        }
        /// <summary>
        /// Retrieve Item name from a Task Enum.
        /// </summary>
        /// <param name="task">The task.</param>
        /// <returns>The Task Name.</returns>
        public virtual string ItemName(Task task)
        {
            if ((task == Task.Task0))
            {
                return "Task0";
            }
            if ((task == Task.Task1))
            {
                return "Task1";
            }
            if ((task == Task.Task10))
            {
                return "Task10";
            }
            if ((task == Task.Task11))
            {
                return "Task11";
            }
            if ((task == Task.Task12))
            {
                return "Task12";
            }
            if ((task == Task.Task13))
            {
                return "Task13";
            }
            if ((task == Task.Task14))
            {
                return "Task14";
            }
            if ((task == Task.Task15))
            {
                return "Task15";
            }
            if ((task == Task.Task16))
            {
                return "Task16";
            }
            if ((task == Task.Task17))
            {
                return "Task17";
            }
            if ((task == Task.Task18))
            {
                return "Task18";
            }
            if ((task == Task.Task19))
            {
                return "Task19";
            }
            if ((task == Task.Task2))
            {
                return "Task2";
            }
            if ((task == Task.Task3))
            {
                return "Task3";
            }
            if ((task == Task.Task4))
            {
                return "Task4";
            }
            if ((task == Task.Task5))
            {
                return "Task5";
            }
            if ((task == Task.Task6))
            {
                return "Task6";
            }
            if ((task == Task.Task7))
            {
                return "Task7";
            }
            if ((task == Task.Task8))
            {
                return "Task8";
            }
            if ((task == Task.Task9))
            {
                return "Task9";
            }
            throw new System.ArgumentException("Unknown Task name", "task");
        }
        /// <summary>
        /// Retrieve Item name from a Operation Enum.
        /// </summary>
        /// <param name="operation">The operation.</param>
        /// <returns>The Operation Name.</returns>
        public virtual string ItemName(Operation operation)
        {
            if ((operation == Operation.Operation0))
            {
                return "Operation0";
            }
            if ((operation == Operation.Operation1))
            {
                return "Operation1";
            }
            if ((operation == Operation.Operation10))
            {
                return "Operation10";
            }
            if ((operation == Operation.Operation11))
            {
                return "Operation11";
            }
            if ((operation == Operation.Operation12))
            {
                return "Operation12";
            }
            if ((operation == Operation.Operation13))
            {
                return "Operation13";
            }
            if ((operation == Operation.Operation14))
            {
                return "Operation14";
            }
            if ((operation == Operation.Operation15))
            {
                return "Operation15";
            }
            if ((operation == Operation.Operation16))
            {
                return "Operation16";
            }
            if ((operation == Operation.Operation17))
            {
                return "Operation17";
            }
            if ((operation == Operation.Operation18))
            {
                return "Operation18";
            }
            if ((operation == Operation.Operation19))
            {
                return "Operation19";
            }
            if ((operation == Operation.Operation2))
            {
                return "Operation2";
            }
            if ((operation == Operation.Operation3))
            {
                return "Operation3";
            }
            if ((operation == Operation.Operation4))
            {
                return "Operation4";
            }
            if ((operation == Operation.Operation5))
            {
                return "Operation5";
            }
            if ((operation == Operation.Operation6))
            {
                return "Operation6";
            }
            if ((operation == Operation.Operation7))
            {
                return "Operation7";
            }
            if ((operation == Operation.Operation8))
            {
                return "Operation8";
            }
            if ((operation == Operation.Operation9))
            {
                return "Operation9";
            }
            throw new System.ArgumentException("Unknown Operation name", "operation");
        }
        /// <summary>
        /// Checks the access [FOR Windows Users ONLY].
        /// </summary>
        /// <param name="itemName">The Item Name.</param>
        /// <param name="operationsOnly">if set to <c>true</c> checks the access for operations only.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        protected virtual NetSqlAzMan.Interfaces.AuthorizationType CheckAccess(string itemName, bool operationsOnly, params KeyValuePair<string, object>[] contextParameters)
        {
            return this.mStorage.CheckAccess(CheckAccessHelper.STORE_NAME, CheckAccessHelper.APPLICATION_NAME, itemName, this.windowsIdentity, DateTime.Now, operationsOnly, contextParameters);
        }
        /// <summary>
        /// Checks the access [FOR DB Users ONLY].
        /// </summary>
        /// <param name="itemName">The Item Name.</param>
        /// <param name="dbUserName">The DB User Name.</param>
        /// <param name="operationsOnly">if set to <c>true</c> checks the access for operations only.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        protected virtual NetSqlAzMan.Interfaces.AuthorizationType CheckAccess(string itemName, string dbUserName, bool operationsOnly, params KeyValuePair<string, object>[] contextParameters)
        {
            return this.mStorage.CheckAccess(CheckAccessHelper.STORE_NAME, CheckAccessHelper.APPLICATION_NAME, itemName, this.mStorage.GetDBUser(dbUserName), DateTime.Now, operationsOnly, contextParameters);
        }
        /// <summary>
        /// Checks the access [FOR Windows Users ONLY].
        /// </summary>
        /// <param name="itemName">The Item Name.</param>
        /// <param name="operationsOnly">if set to <c>true</c> checks the access for operations only.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <param name="attributes">Retrieved attributes.</param>
        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        protected virtual NetSqlAzMan.Interfaces.AuthorizationType CheckAccess(string itemName, bool operationsOnly, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
        {
            return this.mStorage.CheckAccess(CheckAccessHelper.STORE_NAME, CheckAccessHelper.APPLICATION_NAME, itemName, this.windowsIdentity, DateTime.Now, operationsOnly, out attributes, contextParameters);
        }
        /// <summary>
        /// Checks the access [FOR DB Users ONLY].
        /// </summary>
        /// <param name="itemName">The Item Name.</param>
        /// <param name="dbUserName">The DB User Name.</param>
        /// <param name="operationsOnly">if set to <c>true</c> checks the access for operations only.</param>
        /// <param name="attributes">Retrieved attributes.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        protected virtual NetSqlAzMan.Interfaces.AuthorizationType CheckAccess(string itemName, string dbUserName, bool operationsOnly, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
        {
            return this.mStorage.CheckAccess(CheckAccessHelper.STORE_NAME, CheckAccessHelper.APPLICATION_NAME, itemName, this.mStorage.GetDBUser(dbUserName), DateTime.Now, operationsOnly, out attributes, contextParameters);
        }
        /// <summary>
        /// Gets the Authorization Type [FOR Windows Users ONLY].
        /// </summary>
        /// <param name="role">The Role.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Role role, params KeyValuePair<string, object>[] contextParameters)
        {
            return this.CheckAccess(this.ItemName(role), false, contextParameters);
        }
        /// <summary>
        /// Gets the Authorization Type [FOR DB Users ONLY].
        /// </summary>
        /// <param name="role">The Role.</param>
        /// <param name="dbUserName">The DB UserName.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Role role, string dbUserName, params KeyValuePair<string, object>[] contextParameters)
        {
            return this.CheckAccess(this.ItemName(role), dbUserName, false, contextParameters);
        }
        /// <summary>
        /// Gets the Authorization Type [FOR Windows Users ONLY].
        /// </summary>
        /// <param name="role">The Role.</param>
        /// <param name="attributes">Retrieved attributes.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Role role, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
        {
            return this.CheckAccess(this.ItemName(role), false, out attributes, contextParameters);
        }
        /// <summary>
        /// Gets the Authorization Type [FOR DB Users ONLY].
        /// </summary>
        /// <param name="role">The Role.</param>
        /// <param name="dbUserName">The DB UserName.</param>
        /// <param name="attributes">Retrieved attributes.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Role role, string dbUserName, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
        {
            return this.CheckAccess(this.ItemName(role), dbUserName, false, out attributes, contextParameters);
        }
        /// <summary>
        /// Gets the Authorization Type [FOR Windows Users ONLY].
        /// </summary>
        /// <param name="task">The Task.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Task task, params KeyValuePair<string, object>[] contextParameters)
        {
            return this.CheckAccess(this.ItemName(task), false, contextParameters);
        }
        /// <summary>
        /// Gets the Authorization Type [FOR DB Users ONLY].
        /// </summary>
        /// <param name="task">The Task.</param>
        /// <param name="dbUserName">The DB UserName.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Task task, string dbUserName, params KeyValuePair<string, object>[] contextParameters)
        {
            return this.CheckAccess(this.ItemName(task), dbUserName, false, contextParameters);
        }
        /// <summary>
        /// Gets the Authorization Type [FOR Windows Users ONLY].
        /// </summary>
        /// <param name="task">The Task.</param>
        /// <param name="attributes">Retrieved attributes.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Task task, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
        {
            return this.CheckAccess(this.ItemName(task), false, out attributes, contextParameters);
        }
        /// <summary>
        /// Gets the Authorization Type [FOR DB Users ONLY].
        /// </summary>
        /// <param name="task">The Task.</param>
        /// <param name="dbUserName">The DB UserName.</param>
        /// <param name="attributes">Retrieved attributes.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Task task, string dbUserName, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
        {
            return this.CheckAccess(this.ItemName(task), dbUserName, false, out attributes, contextParameters);
        }
        /// <summary>
        /// Gets the Authorization Type [FOR Windows Users ONLY].
        /// </summary>
        /// <param name="operation">The Operation.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Operation operation, params KeyValuePair<string, object>[] contextParameters)
        {
            return this.CheckAccess(this.ItemName(operation), true, contextParameters);
        }
        /// <summary>
        /// Gets the Authorization Type [FOR DB Users ONLY].
        /// </summary>
        /// <param name="operation">The Operation.</param>
        /// <param name="dbUserName">The DB UserName.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Operation operation, string dbUserName, params KeyValuePair<string, object>[] contextParameters)
        {
            return this.CheckAccess(this.ItemName(operation), dbUserName, true, contextParameters);
        }
        /// <summary>
        /// Gets the Authorization Type [FOR Windows Users ONLY].
        /// </summary>
        /// <param name="operation">The Operation.</param>
        /// <param name="attributes">Retrieved attributes.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Operation operation, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
        {
            return this.CheckAccess(this.ItemName(operation), true, out attributes, contextParameters);
        }
        /// <summary>
        /// Gets the Authorization Type [FOR DB Users ONLY].
        /// </summary>
        /// <param name="operation">The Operation.</param>
        /// <param name="dbUserName">The DB UserName.</param>
        /// <param name="attributes">Retrieved attributes.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Operation operation, string dbUserName, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
        {
            return this.CheckAccess(this.ItemName(operation), dbUserName, true, out attributes, contextParameters);
        }
        /// <summary>
        /// Checks the access [FOR Windows Users ONLY].
        /// </summary>
        /// <param name="role">The Role.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>True for Access Granted, False for Access Denied.</returns>
        public virtual bool CheckAccess(Role role, params KeyValuePair<string, object>[] contextParameters)
        {
            NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(role, contextParameters);
            return ((result == AuthorizationType.AllowWithDelegation)
                        || (result == AuthorizationType.Allow));
        }
        /// <summary>
        /// Checks the access [FOR DB Users ONLY].
        /// </summary>
        /// <param name="role">The Role.</param>
        /// <param name="dbUserName">The DB UserName.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>True for Access Granted, False for Access Denied.</returns>
        public virtual bool CheckAccess(Role role, string dbUserName, params KeyValuePair<string, object>[] contextParameters)
        {
            NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(role, dbUserName, contextParameters);
            return ((result == AuthorizationType.AllowWithDelegation)
                        || (result == AuthorizationType.Allow));
        }
        /// <summary>
        /// Checks the access [FOR Windows Users ONLY].
        /// </summary>
        /// <param name="role">The Role.</param>
        /// <param name="attributes">Retrieved attributes.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>True for Access Granted, False for Access Denied.</returns>
        public virtual bool CheckAccess(Role role, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
        {
            NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(role, out attributes, contextParameters);
            return ((result == AuthorizationType.AllowWithDelegation)
                        || (result == AuthorizationType.Allow));
        }
        /// <summary>
        /// Checks the access [FOR DB Users ONLY].
        /// </summary>
        /// <param name="role">The Role.</param>
        /// <param name="dbUserName">The DB UserName.</param>
        /// <param name="attributes">Retrieved attributes.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>True for Access Granted, False for Access Denied.</returns>
        public virtual bool CheckAccess(Role role, string dbUserName, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
        {
            NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(role, dbUserName, out attributes, contextParameters);
            return ((result == AuthorizationType.AllowWithDelegation)
                        || (result == AuthorizationType.Allow));
        }
        /// <summary>
        /// Checks the access [FOR Windows Users ONLY].
        /// </summary>
        /// <param name="task">The Task.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>True for Access Granted, False for Access Denied.</returns>
        public virtual bool CheckAccess(Task task, params KeyValuePair<string, object>[] contextParameters)
        {
            NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(task, contextParameters);
            return ((result == AuthorizationType.AllowWithDelegation)
                        || (result == AuthorizationType.Allow));
        }
        /// <summary>
        /// Checks the access [FOR DB Users ONLY].
        /// </summary>
        /// <param name="task">The Task.</param>
        /// <param name="dbUserName">The DB UserName.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>True for Access Granted, False for Access Denied.</returns>
        public virtual bool CheckAccess(Task task, string dbUserName, params KeyValuePair<string, object>[] contextParameters)
        {
            NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(task, dbUserName, contextParameters);
            return ((result == AuthorizationType.AllowWithDelegation)
                        || (result == AuthorizationType.Allow));
        }
        /// <summary>
        /// Checks the access [FOR Windows Users ONLY].
        /// </summary>
        /// <param name="task">The Task.</param>
        /// <param name="attributes">Retrieved attributes.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>True for Access Granted, False for Access Denied.</returns>
        public virtual bool CheckAccess(Task task, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
        {
            NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(task, out attributes, contextParameters);
            return ((result == AuthorizationType.AllowWithDelegation)
                        || (result == AuthorizationType.Allow));
        }
        /// <summary>
        /// Checks the access [FOR DB Users ONLY].
        /// </summary>
        /// <param name="task">The Task.</param>
        /// <param name="dbUserName">The DB UserName.</param>
        /// <param name="attributes">Retrieved attributes.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>True for Access Granted, False for Access Denied.</returns>
        public virtual bool CheckAccess(Task task, string dbUserName, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
        {
            NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(task, dbUserName, out attributes, contextParameters);
            return ((result == AuthorizationType.AllowWithDelegation)
                        || (result == AuthorizationType.Allow));
        }
        /// <summary>
        /// Checks the access [FOR Windows Users ONLY].
        /// </summary>
        /// <param name="operation">The Operation.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>True for Access Granted, False for Access Denied.</returns>
        public virtual bool CheckAccess(Operation operation, params KeyValuePair<string, object>[] contextParameters)
        {
            NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(operation, contextParameters);
            return ((result == AuthorizationType.AllowWithDelegation)
                        || (result == AuthorizationType.Allow));
        }
        /// <summary>
        /// Checks the access [FOR DB Users ONLY].
        /// </summary>
        /// <param name="operation">The Operation.</param>
        /// <param name="dbUserName">The DB UserName.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>True for Access Granted, False for Access Denied.</returns>
        public virtual bool CheckAccess(Operation operation, string dbUserName, params KeyValuePair<string, object>[] contextParameters)
        {
            NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(operation, dbUserName, contextParameters);
            return ((result == AuthorizationType.AllowWithDelegation)
                        || (result == AuthorizationType.Allow));
        }
        /// <summary>
        /// Checks the access [FOR Windows Users ONLY].
        /// </summary>
        /// <param name="operation">The Operation.</param>
        /// <param name="attributes">Retrieved attributes.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>True for Access Granted, False for Access Denied.</returns>
        public virtual bool CheckAccess(Operation operation, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
        {
            NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(operation, out attributes, contextParameters);
            return ((result == AuthorizationType.AllowWithDelegation)
                        || (result == AuthorizationType.Allow));
        }
        /// <summary>
        /// Checks the access [FOR DB Users ONLY].
        /// </summary>
        /// <param name="operation">The Operation.</param>
        /// <param name="dbUserName">The DB UserName.</param>
        /// <param name="attributes">Retrieved attributes.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>True for Access Granted, False for Access Denied.</returns>
        public virtual bool CheckAccess(Operation operation, string dbUserName, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
        {
            NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(operation, dbUserName, out attributes, contextParameters);
            return ((result == AuthorizationType.AllowWithDelegation)
                        || (result == AuthorizationType.Allow));
        }
        #endregion
        #region Enums
        /// <summary>
        /// Roles Enumeration
        /// </summary>
        public enum Role
        {
            /// <summary>
            /// Role Role0
            /// </summary>
            Role0,
            /// <summary>
            /// Role Role1
            /// </summary>
            Role1,
            /// <summary>
            /// Role Role10
            /// </summary>
            Role10,
            /// <summary>
            /// Role Role11
            /// </summary>
            Role11,
            /// <summary>
            /// Role Role12
            /// </summary>
            Role12,
            /// <summary>
            /// Role Role13
            /// </summary>
            Role13,
            /// <summary>
            /// Role Role14
            /// </summary>
            Role14,
            /// <summary>
            /// Role Role15
            /// </summary>
            Role15,
            /// <summary>
            /// Role Role16
            /// </summary>
            Role16,
            /// <summary>
            /// Role Role17
            /// </summary>
            Role17,
            /// <summary>
            /// Role Role18
            /// </summary>
            Role18,
            /// <summary>
            /// Role Role19
            /// </summary>
            Role19,
            /// <summary>
            /// Role Role2
            /// </summary>
            Role2,
            /// <summary>
            /// Role Role3
            /// </summary>
            Role3,
            /// <summary>
            /// Role Role4
            /// </summary>
            Role4,
            /// <summary>
            /// Role Role5
            /// </summary>
            Role5,
            /// <summary>
            /// Role Role6
            /// </summary>
            Role6,
            /// <summary>
            /// Role Role7
            /// </summary>
            Role7,
            /// <summary>
            /// Role Role8
            /// </summary>
            Role8,
            /// <summary>
            /// Role Role9
            /// </summary>
            Role9,
        }
        /// <summary>
        /// Tasks Enumeration
        /// </summary>
        public enum Task
        {
            /// <summary>
            /// Task Task0
            /// </summary>
            Task0,
            /// <summary>
            /// Task Task1
            /// </summary>
            Task1,
            /// <summary>
            /// Task Task10
            /// </summary>
            Task10,
            /// <summary>
            /// Task Task11
            /// </summary>
            Task11,
            /// <summary>
            /// Task Task12
            /// </summary>
            Task12,
            /// <summary>
            /// Task Task13
            /// </summary>
            Task13,
            /// <summary>
            /// Task Task14
            /// </summary>
            Task14,
            /// <summary>
            /// Task Task15
            /// </summary>
            Task15,
            /// <summary>
            /// Task Task16
            /// </summary>
            Task16,
            /// <summary>
            /// Task Task17
            /// </summary>
            Task17,
            /// <summary>
            /// Task Task18
            /// </summary>
            Task18,
            /// <summary>
            /// Task Task19
            /// </summary>
            Task19,
            /// <summary>
            /// Task Task2
            /// </summary>
            Task2,
            /// <summary>
            /// Task Task3
            /// </summary>
            Task3,
            /// <summary>
            /// Task Task4
            /// </summary>
            Task4,
            /// <summary>
            /// Task Task5
            /// </summary>
            Task5,
            /// <summary>
            /// Task Task6
            /// </summary>
            Task6,
            /// <summary>
            /// Task Task7
            /// </summary>
            Task7,
            /// <summary>
            /// Task Task8
            /// </summary>
            Task8,
            /// <summary>
            /// Task Task9
            /// </summary>
            Task9,
        }
        /// <summary>
        /// Operations Enumeration
        /// </summary>
        public enum Operation
        {
            /// <summary>
            /// Operation Operation0
            /// </summary>
            Operation0,
            /// <summary>
            /// Operation Operation1
            /// </summary>
            Operation1,
            /// <summary>
            /// Operation Operation10
            /// </summary>
            Operation10,
            /// <summary>
            /// Operation Operation11
            /// </summary>
            Operation11,
            /// <summary>
            /// Operation Operation12
            /// </summary>
            Operation12,
            /// <summary>
            /// Operation Operation13
            /// </summary>
            Operation13,
            /// <summary>
            /// Operation Operation14
            /// </summary>
            Operation14,
            /// <summary>
            /// Operation Operation15
            /// </summary>
            Operation15,
            /// <summary>
            /// Operation Operation16
            /// </summary>
            Operation16,
            /// <summary>
            /// Operation Operation17
            /// </summary>
            Operation17,
            /// <summary>
            /// Operation Operation18
            /// </summary>
            Operation18,
            /// <summary>
            /// Operation Operation19
            /// </summary>
            Operation19,
            /// <summary>
            /// Operation Operation2
            /// </summary>
            Operation2,
            /// <summary>
            /// Operation Operation3
            /// </summary>
            Operation3,
            /// <summary>
            /// Operation Operation4
            /// </summary>
            Operation4,
            /// <summary>
            /// Operation Operation5
            /// </summary>
            Operation5,
            /// <summary>
            /// Operation Operation6
            /// </summary>
            Operation6,
            /// <summary>
            /// Operation Operation7
            /// </summary>
            Operation7,
            /// <summary>
            /// Operation Operation8
            /// </summary>
            Operation8,
            /// <summary>
            /// Operation Operation9
            /// </summary>
            Operation9,
        }
        #endregion
    }
}

