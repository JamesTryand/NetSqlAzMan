//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4016
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// ------------------------------------------------------------------------------
//  <auto-generated>
//     This code was generated by NetSqlAzMan CodeDom.
//     NetSqlAzMan - Andrea Ferendeles - http://netsqlazman.codeplex.com
//     NetSqlAzMan Version: 3.6.0.7
//     CLR Version: v2.0.50727
//     <NetSqlAzMan-info>
//        Store: ZZEntDataSvcs
//        Application: SAC_Reference
//        Last update: 15/06/2009 14.44.04
//     </NetSqlAzMan-info>
//  </auto-generated>
// ------------------------------------------------------------------------------
// 
// 
// TODO: Add NetSqlAzMan.dll Assembly reference.
// 
// 
namespace SAC_Reference.Security
{
    using System;
    using System.Collections.Generic;
    using NetSqlAzMan.Interfaces;

    /// <summary>
    /// NetSqlAzMan Check Access Helper Class for NetSqlAzMan 'SAC Reference' Application 
    /// </summary>
    public partial class CheckAccessHelper
    {
        #region Constants
        /// <summary>
        /// Store Name
        /// </summary>
        protected internal const string STORE_NAME = "ZZEntDataSvcs";
        /// <summary>
        /// Application Name
        /// </summary>
        protected internal const string APPLICATION_NAME = "SAC Reference";
        #endregion
        #region Fields
        /// <summary>
        /// NetSqlAzMan Storage reference.
        /// </summary>
        protected NetSqlAzMan.Interfaces.IAzManStorage mStorage;
        /// <summary>
        /// User Windows Principal Identity.
        /// </summary>
        protected System.Security.Principal.WindowsIdentity windowsIdentity;
        #endregion
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="T:CheckAccessHelper"/> class [Windows Users ONLY].
        /// </summary>
        /// <param name="storageConnectionString">The storage connection string.</param>
        /// <param name="windowsIdentity">The Windows Principal Identity.</param>
        public CheckAccessHelper(string storageConnectionString, System.Security.Principal.WindowsIdentity windowsIdentity)
        {
            this.mStorage = new NetSqlAzMan.SqlAzManStorage(storageConnectionString);
            this.windowsIdentity = windowsIdentity;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="T:CheckAccessHelper"/> class [DB Users ONLY].
        /// </summary>
        /// <param name="storageConnectionString">The storage connection string.</param>
        public CheckAccessHelper(string storageConnectionString)
        {
            this.mStorage = new NetSqlAzMan.SqlAzManStorage(storageConnectionString);
        }
        #endregion
        #region Properties
        /// <summary>
        /// Gets the NetSqlAzMan Storage.
        /// </summary>
        public virtual NetSqlAzMan.Interfaces.IAzManStorage Storage
        {
            get
            {
                return this.mStorage;
            }
        }
        #endregion
        #region Methods
        /// <summary>
        /// Opens the connection
        /// </summary>
        public virtual void OpenConnection()
        {
            this.mStorage.OpenConnection();
        }
        /// <summary>
        /// Closes the connection
        /// </summary>
        public virtual void CloseConnection()
        {
            this.mStorage.CloseConnection();
        }
        /// <summary>
        /// Retrieve Item name from a Role Enum.
        /// </summary>
        /// <param name="role">The role.</param>
        /// <returns>The Role Name.</returns>
        public virtual string ItemName(Role role)
        {
            if ((role == Role.Editor))
            {
                return "Editor";
            }
            if ((role == Role.Editor___Broker_Commission_Overrides))
            {
                return "Editor - Broker Commission Overrides";
            }
            if ((role == Role.Editor___Broker_Loss_Ratios))
            {
                return "Editor - Broker Loss Ratios";
            }
            if ((role == Role.Editor___BrokerList))
            {
                return "Editor - BrokerList";
            }
            if ((role == Role.Editor___CohenGeography))
            {
                return "Editor - CohenGeography";
            }
            if ((role == Role.Editor___Delete_Exchanges))
            {
                return "Editor - Delete Exchanges";
            }
            if ((role == Role.Editor___Soft_Dollar_Accruals))
            {
                return "Editor - Soft Dollar Accruals";
            }
            if ((role == Role.Viewer))
            {
                return "Viewer";
            }
            if ((role == Role.Viewer___CohenGeography))
            {
                return "Viewer - CohenGeography";
            }
            throw new System.ArgumentException("Unknown Role name", "role");
        }
        /// <summary>
        /// Retrieve Item name from a Task Enum.
        /// </summary>
        /// <param name="task">The task.</param>
        /// <returns>The Task Name.</returns>
        public virtual string ItemName(Task task)
        {
            if ((task == Task.Edit_BrokerList))
            {
                return "Edit BrokerList";
            }
            if ((task == Task.Edit_Continents))
            {
                return "Edit Continents";
            }
            if ((task == Task.Edit_Countries))
            {
                return "Edit Countries";
            }
            if ((task == Task.Edit_Currencies))
            {
                return "Edit Currencies";
            }
            if ((task == Task.Edit_FuturesExchangeTimes))
            {
                return "Edit FuturesExchangeTimes";
            }
            if ((task == Task.Edit_Regions))
            {
                return "Edit Regions";
            }
            if ((task == Task.Edit_Regions___CohenGeography))
            {
                return "Edit Regions - CohenGeography";
            }
            if ((task == Task.Save_Changes))
            {
                return "Save Changes";
            }
            if ((task == Task.View_BrokerList))
            {
                return "View BrokerList";
            }
            if ((task == Task.View_Continents))
            {
                return "View Continents";
            }
            if ((task == Task.View_Countries))
            {
                return "View Countries";
            }
            if ((task == Task.View_Currencies))
            {
                return "View Currencies";
            }
            if ((task == Task.View_FuturesExchangeTimes))
            {
                return "View FuturesExchangeTimes";
            }
            if ((task == Task.View_Regions))
            {
                return "View Regions";
            }
            if ((task == Task.View_Regions___CohenGeography))
            {
                return "View Regions - CohenGeography";
            }
            throw new System.ArgumentException("Unknown Task name", "task");
        }
        /// <summary>
        /// Retrieve Item name from a Operation Enum.
        /// </summary>
        /// <param name="operation">The operation.</param>
        /// <returns>The Operation Name.</returns>
        public virtual string ItemName(Operation operation)
        {
            if ((operation == Operation.Add_Continent))
            {
                return "Add Continent";
            }
            if ((operation == Operation.Add_Country))
            {
                return "Add Country";
            }
            if ((operation == Operation.Add_Currency))
            {
                return "Add Currency";
            }
            if ((operation == Operation.Add_Exchange))
            {
                return "Add Exchange";
            }
            if ((operation == Operation.Add_Exchange__Calendar))
            {
                return "Add Exchange  Calendar";
            }
            if ((operation == Operation.Add_Exchange_Mapping))
            {
                return "Add Exchange Mapping";
            }
            if ((operation == Operation.Add_Region))
            {
                return "Add Region";
            }
            if ((operation == Operation.Delete_Continent))
            {
                return "Delete Continent";
            }
            if ((operation == Operation.Delete_Country))
            {
                return "Delete Country";
            }
            if ((operation == Operation.Delete_Currency))
            {
                return "Delete Currency";
            }
            if ((operation == Operation.Delete_Exchange))
            {
                return "Delete Exchange";
            }
            if ((operation == Operation.Delete_Exchange_Calendar))
            {
                return "Delete Exchange Calendar";
            }
            if ((operation == Operation.Delete_Exchange_Mapping))
            {
                return "Delete Exchange Mapping";
            }
            if ((operation == Operation.Delete_Region))
            {
                return "Delete Region";
            }
            if ((operation == Operation.Edit_Exchange))
            {
                return "Edit Exchange";
            }
            if ((operation == Operation.Edit_Exchange_Calendar))
            {
                return "Edit Exchange Calendar";
            }
            if ((operation == Operation.Edit_Exchange_Mapping))
            {
                return "Edit Exchange Mapping";
            }
            if ((operation == Operation.Get_Exchange_Calendars))
            {
                return "Get Exchange Calendars";
            }
            if ((operation == Operation.Get_Exchange_Mapping))
            {
                return "Get Exchange Mapping";
            }
            if ((operation == Operation.Search_Calendar_Holidays))
            {
                return "Search Calendar Holidays";
            }
            if ((operation == Operation.Search_Calendar_Weekends))
            {
                return "Search Calendar Weekends";
            }
            if ((operation == Operation.Search_Exchange))
            {
                return "Search Exchange";
            }
            if ((operation == Operation.Search_Exchange_Mapping))
            {
                return "Search Exchange Mapping";
            }
            if ((operation == Operation.Update_Continent))
            {
                return "Update Continent";
            }
            if ((operation == Operation.Update_Country))
            {
                return "Update Country";
            }
            if ((operation == Operation.Update_Currency))
            {
                return "Update Currency";
            }
            if ((operation == Operation.Update_Exchange))
            {
                return "Update Exchange";
            }
            if ((operation == Operation.Update_Exchange_Calendar))
            {
                return "Update Exchange Calendar";
            }
            if ((operation == Operation.Update_Exchange_Mapping))
            {
                return "Update Exchange Mapping";
            }
            if ((operation == Operation.Update_Region))
            {
                return "Update Region";
            }
            throw new System.ArgumentException("Unknown Operation name", "operation");
        }
        /// <summary>
        /// Checks the access [FOR Windows Users ONLY].
        /// </summary>
        /// <param name="itemName">The Item Name.</param>
        /// <param name="operationsOnly">if set to <c>true</c> checks the access for operations only.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        protected virtual NetSqlAzMan.Interfaces.AuthorizationType CheckAccess(string itemName, bool operationsOnly, params KeyValuePair<string, object>[] contextParameters)
        {
            return this.mStorage.CheckAccess(CheckAccessHelper.STORE_NAME, CheckAccessHelper.APPLICATION_NAME, itemName, this.windowsIdentity, DateTime.Now, operationsOnly, contextParameters);
        }
        /// <summary>
        /// Checks the access [FOR DB Users ONLY].
        /// </summary>
        /// <param name="itemName">The Item Name.</param>
        /// <param name="dbUserName">The DB User Name.</param>
        /// <param name="operationsOnly">if set to <c>true</c> checks the access for operations only.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        protected virtual NetSqlAzMan.Interfaces.AuthorizationType CheckAccess(string itemName, string dbUserName, bool operationsOnly, params KeyValuePair<string, object>[] contextParameters)
        {
            return this.mStorage.CheckAccess(CheckAccessHelper.STORE_NAME, CheckAccessHelper.APPLICATION_NAME, itemName, this.mStorage.GetDBUser(dbUserName), DateTime.Now, operationsOnly, contextParameters);
        }
        /// <summary>
        /// Checks the access [FOR custom SID ONLY].
        /// </summary>
        /// <param name="itemName">The Item Name.</param>
        /// <param name="customSID">The custom SID.</param>
        /// <param name="operationsOnly">if set to <c>true</c> checks the access for operations only.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        protected virtual NetSqlAzMan.Interfaces.AuthorizationType CheckAccess(string itemName, NetSqlAzMan.Interfaces.IAzManSid customSID, bool operationsOnly, params KeyValuePair<string, object>[] contextParameters)
        {
            return this.mStorage.CheckAccess(CheckAccessHelper.STORE_NAME, CheckAccessHelper.APPLICATION_NAME, itemName, this.mStorage.GetDBUser(customSID), DateTime.Now, operationsOnly, contextParameters);
        }
        /// <summary>
        /// Checks the access [FOR Windows Users ONLY].
        /// </summary>
        /// <param name="itemName">The Item Name.</param>
        /// <param name="operationsOnly">if set to <c>true</c> checks the access for operations only.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <param name="attributes">Retrieved attributes.</param>
        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        protected virtual NetSqlAzMan.Interfaces.AuthorizationType CheckAccess(string itemName, bool operationsOnly, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
        {
            return this.mStorage.CheckAccess(CheckAccessHelper.STORE_NAME, CheckAccessHelper.APPLICATION_NAME, itemName, this.windowsIdentity, DateTime.Now, operationsOnly, out attributes, contextParameters);
        }
        /// <summary>
        /// Checks the access [FOR DB Users ONLY].
        /// </summary>
        /// <param name="itemName">The Item Name.</param>
        /// <param name="dbUserName">The DB User Name.</param>
        /// <param name="operationsOnly">if set to <c>true</c> checks the access for operations only.</param>
        /// <param name="attributes">Retrieved attributes.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        protected virtual NetSqlAzMan.Interfaces.AuthorizationType CheckAccess(string itemName, string dbUserName, bool operationsOnly, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
        {
            return this.mStorage.CheckAccess(CheckAccessHelper.STORE_NAME, CheckAccessHelper.APPLICATION_NAME, itemName, this.mStorage.GetDBUser(dbUserName), DateTime.Now, operationsOnly, out attributes, contextParameters);
        }
        /// <summary>
        /// Checks the access [FOR Custom SID ONLY].
        /// </summary>
        /// <param name="itemName">The Item Name.</param>
        /// <param name="customSID">The custom SID.</param>
        /// <param name="operationsOnly">if set to <c>true</c> checks the access for operations only.</param>
        /// <param name="attributes">Retrieved attributes.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        protected virtual NetSqlAzMan.Interfaces.AuthorizationType CheckAccess(string itemName, NetSqlAzMan.Interfaces.IAzManSid customSID, bool operationsOnly, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
        {
            return this.mStorage.CheckAccess(CheckAccessHelper.STORE_NAME, CheckAccessHelper.APPLICATION_NAME, itemName, this.mStorage.GetDBUser(customSID), DateTime.Now, operationsOnly, out attributes, contextParameters);
        }
        /// <summary>
        /// Gets the Authorization Type [FOR Windows Users ONLY].
        /// </summary>
        /// <param name="role">The Role.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Role role, params KeyValuePair<string, object>[] contextParameters)
        {
            return this.CheckAccess(this.ItemName(role), false, contextParameters);
        }
        /// <summary>
        /// Gets the Authorization Type [FOR DB Users ONLY].
        /// </summary>
        /// <param name="role">The Role.</param>
        /// <param name="dbUserName">The DB UserName.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Role role, string dbUserName, params KeyValuePair<string, object>[] contextParameters)
        {
            return this.CheckAccess(this.ItemName(role), dbUserName, false, contextParameters);
        }
        /// <summary>
        /// Gets the Authorization Type [FOR Custom SID ONLY].
        /// </summary>
        /// <param name="role">The Role.</param>
        /// <param name="customSID">The custom SID.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Role role, NetSqlAzMan.Interfaces.IAzManSid customSID, params KeyValuePair<string, object>[] contextParameters)
        {
            return this.CheckAccess(this.ItemName(role), customSID, false, contextParameters);
        }
        /// <summary>
        /// Gets the Authorization Type [FOR Windows Users ONLY].
        /// </summary>
        /// <param name="role">The Role.</param>
        /// <param name="attributes">Retrieved attributes.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Role role, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
        {
            return this.CheckAccess(this.ItemName(role), false, out attributes, contextParameters);
        }
        /// <summary>
        /// Gets the Authorization Type [FOR DB Users ONLY].
        /// </summary>
        /// <param name="role">The Role.</param>
        /// <param name="dbUserName">The DB UserName.</param>
        /// <param name="attributes">Retrieved attributes.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Role role, string dbUserName, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
        {
            return this.CheckAccess(this.ItemName(role), dbUserName, false, out attributes, contextParameters);
        }
        /// <summary>
        /// Gets the Authorization Type [FOR Custom SID ONLY].
        /// </summary>
        /// <param name="role">The Role.</param>
        /// <param name="customSID">The custom SID.</param>
        /// <param name="attributes">Retrieved attributes.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Role role, NetSqlAzMan.Interfaces.IAzManSid customSID, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
        {
            return this.CheckAccess(this.ItemName(role), customSID, false, out attributes, contextParameters);
        }
        /// <summary>
        /// Gets the Authorization Type [FOR Windows Users ONLY].
        /// </summary>
        /// <param name="task">The Task.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Task task, params KeyValuePair<string, object>[] contextParameters)
        {
            return this.CheckAccess(this.ItemName(task), false, contextParameters);
        }
        /// <summary>
        /// Gets the Authorization Type [FOR DB Users ONLY].
        /// </summary>
        /// <param name="task">The Task.</param>
        /// <param name="dbUserName">The DB UserName.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Task task, string dbUserName, params KeyValuePair<string, object>[] contextParameters)
        {
            return this.CheckAccess(this.ItemName(task), dbUserName, false, contextParameters);
        }
        /// <summary>
        /// Gets the Authorization Type [FOR Custom SID ONLY].
        /// </summary>
        /// <param name="task">The Task.</param>
        /// <param name="customSID">The Custom SID.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Task task, NetSqlAzMan.Interfaces.IAzManSid customSID, params KeyValuePair<string, object>[] contextParameters)
        {
            return this.CheckAccess(this.ItemName(task), customSID, false, contextParameters);
        }
        /// <summary>
        /// Gets the Authorization Type [FOR Windows Users ONLY].
        /// </summary>
        /// <param name="task">The Task.</param>
        /// <param name="attributes">Retrieved attributes.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Task task, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
        {
            return this.CheckAccess(this.ItemName(task), false, out attributes, contextParameters);
        }
        /// <summary>
        /// Gets the Authorization Type [FOR DB Users ONLY].
        /// </summary>
        /// <param name="task">The Task.</param>
        /// <param name="dbUserName">The DB UserName.</param>
        /// <param name="attributes">Retrieved attributes.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Task task, string dbUserName, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
        {
            return this.CheckAccess(this.ItemName(task), dbUserName, false, out attributes, contextParameters);
        }
        /// <summary>
        /// Gets the Authorization Type [FOR custom SID ONLY].
        /// </summary>
        /// <param name="task">The Task.</param>
        /// <param name="customSID">The Custom SID.</param>
        /// <param name="attributes">Retrieved attributes.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Task task, NetSqlAzMan.Interfaces.IAzManSid customSID, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
        {
            return this.CheckAccess(this.ItemName(task), customSID, false, out attributes, contextParameters);
        }
        /// <summary>
        /// Gets the Authorization Type [FOR Windows Users ONLY].
        /// </summary>
        /// <param name="operation">The Operation.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Operation operation, params KeyValuePair<string, object>[] contextParameters)
        {
            return this.CheckAccess(this.ItemName(operation), true, contextParameters);
        }
        /// <summary>
        /// Gets the Authorization Type [FOR DB Users ONLY].
        /// </summary>
        /// <param name="operation">The Operation.</param>
        /// <param name="dbUserName">The DB UserName.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Operation operation, string dbUserName, params KeyValuePair<string, object>[] contextParameters)
        {
            return this.CheckAccess(this.ItemName(operation), dbUserName, true, contextParameters);
        }
        /// <summary>
        /// Gets the Authorization Type [FOR Custom SID ONLY].
        /// </summary>
        /// <param name="operation">The Operation.</param>
        /// <param name="customSID">The Custom SID.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Operation operation, NetSqlAzMan.Interfaces.IAzManSid customSID, params KeyValuePair<string, object>[] contextParameters)
        {
            return this.CheckAccess(this.ItemName(operation), customSID, true, contextParameters);
        }
        /// <summary>
        /// Gets the Authorization Type [FOR Windows Users ONLY].
        /// </summary>
        /// <param name="operation">The Operation.</param>
        /// <param name="attributes">Retrieved attributes.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Operation operation, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
        {
            return this.CheckAccess(this.ItemName(operation), true, out attributes, contextParameters);
        }
        /// <summary>
        /// Gets the Authorization Type [FOR DB Users ONLY].
        /// </summary>
        /// <param name="operation">The Operation.</param>
        /// <param name="dbUserName">The DB UserName.</param>
        /// <param name="attributes">Retrieved attributes.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Operation operation, string dbUserName, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
        {
            return this.CheckAccess(this.ItemName(operation), dbUserName, true, out attributes, contextParameters);
        }
        /// <summary>
        /// Gets the Authorization Type [FOR custom SID ONLY].
        /// </summary>
        /// <param name="operation">The Operation.</param>
        /// <param name="customSID">The Custom SID.</param>
        /// <param name="attributes">Retrieved attributes.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Operation operation, NetSqlAzMan.Interfaces.IAzManSid customSID, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
        {
            return this.CheckAccess(this.ItemName(operation), customSID, true, out attributes, contextParameters);
        }
        /// <summary>
        /// Checks the access [FOR Windows Users ONLY].
        /// </summary>
        /// <param name="role">The Role.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>True for Access Granted, False for Access Denied.</returns>
        public virtual bool CheckAccess(Role role, params KeyValuePair<string, object>[] contextParameters)
        {
            NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(role, contextParameters);
            return ((result == AuthorizationType.AllowWithDelegation)
                        || (result == AuthorizationType.Allow));
        }
        /// <summary>
        /// Checks the access [FOR DB Users ONLY].
        /// </summary>
        /// <param name="role">The Role.</param>
        /// <param name="dbUserName">The DB UserName.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>True for Access Granted, False for Access Denied.</returns>
        public virtual bool CheckAccess(Role role, string dbUserName, params KeyValuePair<string, object>[] contextParameters)
        {
            NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(role, dbUserName, contextParameters);
            return ((result == AuthorizationType.AllowWithDelegation)
                        || (result == AuthorizationType.Allow));
        }
        /// <summary>
        /// Checks the access [FOR custom SID ONLY].
        /// </summary>
        /// <param name="role">The Role.</param>
        /// <param name="customSID">The custom SID.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>True for Access Granted, False for Access Denied.</returns>
        public virtual bool CheckAccess(Role role, NetSqlAzMan.Interfaces.IAzManSid customSID, params KeyValuePair<string, object>[] contextParameters)
        {
            NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(role, customSID, contextParameters);
            return ((result == AuthorizationType.AllowWithDelegation)
                        || (result == AuthorizationType.Allow));
        }
        /// <summary>
        /// Checks the access [FOR Windows Users ONLY].
        /// </summary>
        /// <param name="role">The Role.</param>
        /// <param name="attributes">Retrieved attributes.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>True for Access Granted, False for Access Denied.</returns>
        public virtual bool CheckAccess(Role role, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
        {
            NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(role, out attributes, contextParameters);
            return ((result == AuthorizationType.AllowWithDelegation)
                        || (result == AuthorizationType.Allow));
        }
        /// <summary>
        /// Checks the access [FOR DB Users ONLY].
        /// </summary>
        /// <param name="role">The Role.</param>
        /// <param name="dbUserName">The DB UserName.</param>
        /// <param name="attributes">Retrieved attributes.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>True for Access Granted, False for Access Denied.</returns>
        public virtual bool CheckAccess(Role role, string dbUserName, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
        {
            NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(role, dbUserName, out attributes, contextParameters);
            return ((result == AuthorizationType.AllowWithDelegation)
                        || (result == AuthorizationType.Allow));
        }
        /// <summary>
        /// Checks the access [FOR Custom SID ONLY].
        /// </summary>
        /// <param name="role">The Role.</param>
        /// <param name="customSID">The custom SID.</param>
        /// <param name="attributes">Retrieved attributes.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>True for Access Granted, False for Access Denied.</returns>
        public virtual bool CheckAccess(Role role, NetSqlAzMan.Interfaces.IAzManSid customSID, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
        {
            NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(role, customSID, out attributes, contextParameters);
            return ((result == AuthorizationType.AllowWithDelegation)
                        || (result == AuthorizationType.Allow));
        }
        /// <summary>
        /// Checks the access [FOR Windows Users ONLY].
        /// </summary>
        /// <param name="task">The Task.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>True for Access Granted, False for Access Denied.</returns>
        public virtual bool CheckAccess(Task task, params KeyValuePair<string, object>[] contextParameters)
        {
            NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(task, contextParameters);
            return ((result == AuthorizationType.AllowWithDelegation)
                        || (result == AuthorizationType.Allow));
        }
        /// <summary>
        /// Checks the access [FOR DB Users ONLY].
        /// </summary>
        /// <param name="task">The Task.</param>
        /// <param name="dbUserName">The DB UserName.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>True for Access Granted, False for Access Denied.</returns>
        public virtual bool CheckAccess(Task task, string dbUserName, params KeyValuePair<string, object>[] contextParameters)
        {
            NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(task, dbUserName, contextParameters);
            return ((result == AuthorizationType.AllowWithDelegation)
                        || (result == AuthorizationType.Allow));
        }
        /// <summary>
        /// Checks the access [FOR Custom SID ONLY].
        /// </summary>
        /// <param name="task">The Task.</param>
        /// <param name="customSID">The Custom SID.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>True for Access Granted, False for Access Denied.</returns>
        public virtual bool CheckAccess(Task task, NetSqlAzMan.Interfaces.IAzManSid customSID, params KeyValuePair<string, object>[] contextParameters)
        {
            NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(task, customSID, contextParameters);
            return ((result == AuthorizationType.AllowWithDelegation)
                        || (result == AuthorizationType.Allow));
        }
        /// <summary>
        /// Checks the access [FOR Windows Users ONLY].
        /// </summary>
        /// <param name="task">The Task.</param>
        /// <param name="attributes">Retrieved attributes.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>True for Access Granted, False for Access Denied.</returns>
        public virtual bool CheckAccess(Task task, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
        {
            NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(task, out attributes, contextParameters);
            return ((result == AuthorizationType.AllowWithDelegation)
                        || (result == AuthorizationType.Allow));
        }
        /// <summary>
        /// Checks the access [FOR DB Users ONLY].
        /// </summary>
        /// <param name="task">The Task.</param>
        /// <param name="dbUserName">The DB UserName.</param>
        /// <param name="attributes">Retrieved attributes.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>True for Access Granted, False for Access Denied.</returns>
        public virtual bool CheckAccess(Task task, string dbUserName, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
        {
            NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(task, dbUserName, out attributes, contextParameters);
            return ((result == AuthorizationType.AllowWithDelegation)
                        || (result == AuthorizationType.Allow));
        }
        /// <summary>
        /// Checks the access [FOR Custom SID ONLY].
        /// </summary>
        /// <param name="task">The Task.</param>
        /// <param name="customSID">The custom SID.</param>
        /// <param name="attributes">Retrieved attributes.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>True for Access Granted, False for Access Denied.</returns>
        public virtual bool CheckAccess(Task task, NetSqlAzMan.Interfaces.IAzManSid customSID, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
        {
            NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(task, customSID, out attributes, contextParameters);
            return ((result == AuthorizationType.AllowWithDelegation)
                        || (result == AuthorizationType.Allow));
        }
        /// <summary>
        /// Checks the access [FOR Windows Users ONLY].
        /// </summary>
        /// <param name="operation">The Operation.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>True for Access Granted, False for Access Denied.</returns>
        public virtual bool CheckAccess(Operation operation, params KeyValuePair<string, object>[] contextParameters)
        {
            NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(operation, contextParameters);
            return ((result == AuthorizationType.AllowWithDelegation)
                        || (result == AuthorizationType.Allow));
        }
        /// <summary>
        /// Checks the access [FOR DB Users ONLY].
        /// </summary>
        /// <param name="operation">The Operation.</param>
        /// <param name="dbUserName">The DB UserName.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>True for Access Granted, False for Access Denied.</returns>
        public virtual bool CheckAccess(Operation operation, string dbUserName, params KeyValuePair<string, object>[] contextParameters)
        {
            NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(operation, dbUserName, contextParameters);
            return ((result == AuthorizationType.AllowWithDelegation)
                        || (result == AuthorizationType.Allow));
        }
        /// <summary>
        /// Checks the access [FOR custom SID ONLY].
        /// </summary>
        /// <param name="operation">The Operation.</param>
        /// <param name="customSID">The custom SID.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>True for Access Granted, False for Access Denied.</returns>
        public virtual bool CheckAccess(Operation operation, NetSqlAzMan.Interfaces.IAzManSid customSID, params KeyValuePair<string, object>[] contextParameters)
        {
            NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(operation, customSID, contextParameters);
            return ((result == AuthorizationType.AllowWithDelegation)
                        || (result == AuthorizationType.Allow));
        }
        /// <summary>
        /// Checks the access [FOR Windows Users ONLY].
        /// </summary>
        /// <param name="operation">The Operation.</param>
        /// <param name="attributes">Retrieved attributes.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>True for Access Granted, False for Access Denied.</returns>
        public virtual bool CheckAccess(Operation operation, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
        {
            NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(operation, out attributes, contextParameters);
            return ((result == AuthorizationType.AllowWithDelegation)
                        || (result == AuthorizationType.Allow));
        }
        /// <summary>
        /// Checks the access [FOR DB Users ONLY].
        /// </summary>
        /// <param name="operation">The Operation.</param>
        /// <param name="dbUserName">The DB UserName.</param>
        /// <param name="attributes">Retrieved attributes.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>True for Access Granted, False for Access Denied.</returns>
        public virtual bool CheckAccess(Operation operation, string dbUserName, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
        {
            NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(operation, dbUserName, out attributes, contextParameters);
            return ((result == AuthorizationType.AllowWithDelegation)
                        || (result == AuthorizationType.Allow));
        }
        /// <summary>
        /// Checks the access [FOR custom SID ONLY].
        /// </summary>
        /// <param name="operation">The Operation.</param>
        /// <param name="customSID">The custom SID.</param>
        /// <param name="attributes">Retrieved attributes.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>True for Access Granted, False for Access Denied.</returns>
        public virtual bool CheckAccess(Operation operation, NetSqlAzMan.Interfaces.IAzManSid customSID, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
        {
            NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(operation, customSID, out attributes, contextParameters);
            return ((result == AuthorizationType.AllowWithDelegation)
                        || (result == AuthorizationType.Allow));
        }
        #endregion
        #region Enums
        /// <summary>
        /// Roles Enumeration
        /// </summary>
        public enum Role
        {
            /// <summary>
            /// Role Editor
            /// </summary>
            Editor,
            /// <summary>
            /// Role Editor - Broker Commission Overrides
            /// </summary>
            Editor___Broker_Commission_Overrides,
            /// <summary>
            /// Role Editor - Broker Loss Ratios
            /// </summary>
            Editor___Broker_Loss_Ratios,
            /// <summary>
            /// Role Editor - BrokerList
            /// </summary>
            Editor___BrokerList,
            /// <summary>
            /// Role Editor - CohenGeography
            /// </summary>
            Editor___CohenGeography,
            /// <summary>
            /// Role Editor - Delete Exchanges
            /// </summary>
            Editor___Delete_Exchanges,
            /// <summary>
            /// Role Editor - Soft Dollar Accruals
            /// </summary>
            Editor___Soft_Dollar_Accruals,
            /// <summary>
            /// Role Viewer
            /// </summary>
            Viewer,
            /// <summary>
            /// Role Viewer - CohenGeography
            /// </summary>
            Viewer___CohenGeography,
        }
        /// <summary>
        /// Tasks Enumeration
        /// </summary>
        public enum Task
        {
            /// <summary>
            /// Task Edit BrokerList
            /// </summary>
            Edit_BrokerList,
            /// <summary>
            /// Task Edit Continents
            /// </summary>
            Edit_Continents,
            /// <summary>
            /// Task Edit Countries
            /// </summary>
            Edit_Countries,
            /// <summary>
            /// Task Edit Currencies
            /// </summary>
            Edit_Currencies,
            /// <summary>
            /// Task Edit FuturesExchangeTimes
            /// </summary>
            Edit_FuturesExchangeTimes,
            /// <summary>
            /// Task Edit Regions
            /// </summary>
            Edit_Regions,
            /// <summary>
            /// Task Edit Regions - CohenGeography
            /// </summary>
            Edit_Regions___CohenGeography,
            /// <summary>
            /// Task Save Changes
            /// </summary>
            Save_Changes,
            /// <summary>
            /// Task View BrokerList
            /// </summary>
            View_BrokerList,
            /// <summary>
            /// Task View Continents
            /// </summary>
            View_Continents,
            /// <summary>
            /// Task View Countries
            /// </summary>
            View_Countries,
            /// <summary>
            /// Task View Currencies
            /// </summary>
            View_Currencies,
            /// <summary>
            /// Task View FuturesExchangeTimes
            /// </summary>
            View_FuturesExchangeTimes,
            /// <summary>
            /// Task View Regions
            /// </summary>
            View_Regions,
            /// <summary>
            /// Task View Regions - CohenGeography
            /// </summary>
            View_Regions___CohenGeography,
        }
        /// <summary>
        /// Operations Enumeration
        /// </summary>
        public enum Operation
        {
            /// <summary>
            /// Operation Add Continent
            /// </summary>
            Add_Continent,
            /// <summary>
            /// Operation Add Country
            /// </summary>
            Add_Country,
            /// <summary>
            /// Operation Add Currency
            /// </summary>
            Add_Currency,
            /// <summary>
            /// Operation Add Exchange
            /// </summary>
            Add_Exchange,
            /// <summary>
            /// Operation Add Exchange  Calendar
            /// </summary>
            Add_Exchange__Calendar,
            /// <summary>
            /// Operation Add Exchange Mapping
            /// </summary>
            Add_Exchange_Mapping,
            /// <summary>
            /// Operation Add Region
            /// </summary>
            Add_Region,
            /// <summary>
            /// Operation Delete Continent
            /// </summary>
            Delete_Continent,
            /// <summary>
            /// Operation Delete Country
            /// </summary>
            Delete_Country,
            /// <summary>
            /// Operation Delete Currency
            /// </summary>
            Delete_Currency,
            /// <summary>
            /// Operation Delete Exchange
            /// </summary>
            Delete_Exchange,
            /// <summary>
            /// Operation Delete Exchange Calendar
            /// </summary>
            Delete_Exchange_Calendar,
            /// <summary>
            /// Operation Delete Exchange Mapping
            /// </summary>
            Delete_Exchange_Mapping,
            /// <summary>
            /// Operation Delete Region
            /// </summary>
            Delete_Region,
            /// <summary>
            /// Operation Edit Exchange
            /// </summary>
            Edit_Exchange,
            /// <summary>
            /// Operation Edit Exchange Calendar
            /// </summary>
            Edit_Exchange_Calendar,
            /// <summary>
            /// Operation Edit Exchange Mapping
            /// </summary>
            Edit_Exchange_Mapping,
            /// <summary>
            /// Operation Get Exchange Calendars
            /// </summary>
            Get_Exchange_Calendars,
            /// <summary>
            /// Operation Get Exchange Mapping
            /// </summary>
            Get_Exchange_Mapping,
            /// <summary>
            /// Operation Search Calendar Holidays
            /// </summary>
            Search_Calendar_Holidays,
            /// <summary>
            /// Operation Search Calendar Weekends
            /// </summary>
            Search_Calendar_Weekends,
            /// <summary>
            /// Operation Search Exchange
            /// </summary>
            Search_Exchange,
            /// <summary>
            /// Operation Search Exchange Mapping
            /// </summary>
            Search_Exchange_Mapping,
            /// <summary>
            /// Operation Update Continent
            /// </summary>
            Update_Continent,
            /// <summary>
            /// Operation Update Country
            /// </summary>
            Update_Country,
            /// <summary>
            /// Operation Update Currency
            /// </summary>
            Update_Currency,
            /// <summary>
            /// Operation Update Exchange
            /// </summary>
            Update_Exchange,
            /// <summary>
            /// Operation Update Exchange Calendar
            /// </summary>
            Update_Exchange_Calendar,
            /// <summary>
            /// Operation Update Exchange Mapping
            /// </summary>
            Update_Exchange_Mapping,
            /// <summary>
            /// Operation Update Region
            /// </summary>
            Update_Region,
        }
        #endregion
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4016
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// ------------------------------------------------------------------------------
//  <auto-generated>
//     This code was generated by NetSqlAzMan CodeDom.
//     NetSqlAzMan - Andrea Ferendeles - http://netsqlazman.codeplex.com
//     NetSqlAzMan Version: 3.6.0.7
//     CLR Version: v2.0.50727
//     <NetSqlAzMan-info>
//        Store: ZZEntDataSvcs
//        Application: SAC_Reference
//        Last update: 15/06/2009 14.44.04
//     </NetSqlAzMan-info>
//  </auto-generated>
// ------------------------------------------------------------------------------
// 
namespace SAC_Reference.Security
{

    /// <summary>
    /// NetSqlAzMan ROLE Helper Class for NetSqlAzMan 'SAC Reference' Application 
    /// </summary>
    public partial class ROLE
    {
        /// <summary>
        /// ROLE 'Editor'
        /// </summary>
        public const string EDITOR = "Editor";
        /// <summary>
        /// ROLE 'Editor - Broker Commission Overrides'
        /// </summary>
        public const string EDITOR___BROKER_COMMISSION_OVERRIDES = "Editor - Broker Commission Overrides";
        /// <summary>
        /// ROLE 'Editor - Broker Loss Ratios'
        /// </summary>
        public const string EDITOR___BROKER_LOSS_RATIOS = "Editor - Broker Loss Ratios";
        /// <summary>
        /// ROLE 'Editor - BrokerList'
        /// </summary>
        public const string EDITOR___BROKERLIST = "Editor - BrokerList";
        /// <summary>
        /// ROLE 'Editor - CohenGeography'
        /// </summary>
        public const string EDITOR___COHENGEOGRAPHY = "Editor - CohenGeography";
        /// <summary>
        /// ROLE 'Editor - Delete Exchanges'
        /// </summary>
        public const string EDITOR___DELETE_EXCHANGES = "Editor - Delete Exchanges";
        /// <summary>
        /// ROLE 'Editor - Soft Dollar Accruals'
        /// </summary>
        public const string EDITOR___SOFT_DOLLAR_ACCRUALS = "Editor - Soft Dollar Accruals";
        /// <summary>
        /// ROLE 'Viewer'
        /// </summary>
        public const string VIEWER = "Viewer";
        /// <summary>
        /// ROLE 'Viewer - CohenGeography'
        /// </summary>
        public const string VIEWER___COHENGEOGRAPHY = "Viewer - CohenGeography";
    }
    /// <summary>
    /// NetSqlAzMan TASK Helper Class for NetSqlAzMan 'SAC Reference' Application 
    /// </summary>
    public partial class TASK
    {
        /// <summary>
        /// TASK 'Edit BrokerList'
        /// </summary>
        public const string EDIT_BROKERLIST = "Edit BrokerList";
        /// <summary>
        /// TASK 'Edit Continents'
        /// </summary>
        public const string EDIT_CONTINENTS = "Edit Continents";
        /// <summary>
        /// TASK 'Edit Countries'
        /// </summary>
        public const string EDIT_COUNTRIES = "Edit Countries";
        /// <summary>
        /// TASK 'Edit Currencies'
        /// </summary>
        public const string EDIT_CURRENCIES = "Edit Currencies";
        /// <summary>
        /// TASK 'Edit FuturesExchangeTimes'
        /// </summary>
        public const string EDIT_FUTURESEXCHANGETIMES = "Edit FuturesExchangeTimes";
        /// <summary>
        /// TASK 'Edit Regions'
        /// </summary>
        public const string EDIT_REGIONS = "Edit Regions";
        /// <summary>
        /// TASK 'Edit Regions - CohenGeography'
        /// </summary>
        public const string EDIT_REGIONS___COHENGEOGRAPHY = "Edit Regions - CohenGeography";
        /// <summary>
        /// TASK 'Save Changes'
        /// </summary>
        public const string SAVE_CHANGES = "Save Changes";
        /// <summary>
        /// TASK 'View BrokerList'
        /// </summary>
        public const string VIEW_BROKERLIST = "View BrokerList";
        /// <summary>
        /// TASK 'View Continents'
        /// </summary>
        public const string VIEW_CONTINENTS = "View Continents";
        /// <summary>
        /// TASK 'View Countries'
        /// </summary>
        public const string VIEW_COUNTRIES = "View Countries";
        /// <summary>
        /// TASK 'View Currencies'
        /// </summary>
        public const string VIEW_CURRENCIES = "View Currencies";
        /// <summary>
        /// TASK 'View FuturesExchangeTimes'
        /// </summary>
        public const string VIEW_FUTURESEXCHANGETIMES = "View FuturesExchangeTimes";
        /// <summary>
        /// TASK 'View Regions'
        /// </summary>
        public const string VIEW_REGIONS = "View Regions";
        /// <summary>
        /// TASK 'View Regions - CohenGeography'
        /// </summary>
        public const string VIEW_REGIONS___COHENGEOGRAPHY = "View Regions - CohenGeography";
    }
    /// <summary>
    /// NetSqlAzMan OPERATION Helper Class for NetSqlAzMan 'SAC Reference' Application 
    /// </summary>
    public partial class OPERATION
    {
        /// <summary>
        /// OPERATION 'Add Continent'
        /// </summary>
        public const string ADD_CONTINENT = "Add Continent";
        /// <summary>
        /// OPERATION 'Add Country'
        /// </summary>
        public const string ADD_COUNTRY = "Add Country";
        /// <summary>
        /// OPERATION 'Add Currency'
        /// </summary>
        public const string ADD_CURRENCY = "Add Currency";
        /// <summary>
        /// OPERATION 'Add Exchange'
        /// </summary>
        public const string ADD_EXCHANGE = "Add Exchange";
        /// <summary>
        /// OPERATION 'Add Exchange  Calendar'
        /// </summary>
        public const string ADD_EXCHANGE__CALENDAR = "Add Exchange  Calendar";
        /// <summary>
        /// OPERATION 'Add Exchange Mapping'
        /// </summary>
        public const string ADD_EXCHANGE_MAPPING = "Add Exchange Mapping";
        /// <summary>
        /// OPERATION 'Add Region'
        /// </summary>
        public const string ADD_REGION = "Add Region";
        /// <summary>
        /// OPERATION 'Delete Continent'
        /// </summary>
        public const string DELETE_CONTINENT = "Delete Continent";
        /// <summary>
        /// OPERATION 'Delete Country'
        /// </summary>
        public const string DELETE_COUNTRY = "Delete Country";
        /// <summary>
        /// OPERATION 'Delete Currency'
        /// </summary>
        public const string DELETE_CURRENCY = "Delete Currency";
        /// <summary>
        /// OPERATION 'Delete Exchange'
        /// </summary>
        public const string DELETE_EXCHANGE = "Delete Exchange";
        /// <summary>
        /// OPERATION 'Delete Exchange Calendar'
        /// </summary>
        public const string DELETE_EXCHANGE_CALENDAR = "Delete Exchange Calendar";
        /// <summary>
        /// OPERATION 'Delete Exchange Mapping'
        /// </summary>
        public const string DELETE_EXCHANGE_MAPPING = "Delete Exchange Mapping";
        /// <summary>
        /// OPERATION 'Delete Region'
        /// </summary>
        public const string DELETE_REGION = "Delete Region";
        /// <summary>
        /// OPERATION 'Edit Exchange'
        /// </summary>
        public const string EDIT_EXCHANGE = "Edit Exchange";
        /// <summary>
        /// OPERATION 'Edit Exchange Calendar'
        /// </summary>
        public const string EDIT_EXCHANGE_CALENDAR = "Edit Exchange Calendar";
        /// <summary>
        /// OPERATION 'Edit Exchange Mapping'
        /// </summary>
        public const string EDIT_EXCHANGE_MAPPING = "Edit Exchange Mapping";
        /// <summary>
        /// OPERATION 'Get Exchange Calendars'
        /// </summary>
        public const string GET_EXCHANGE_CALENDARS = "Get Exchange Calendars";
        /// <summary>
        /// OPERATION 'Get Exchange Mapping'
        /// </summary>
        public const string GET_EXCHANGE_MAPPING = "Get Exchange Mapping";
        /// <summary>
        /// OPERATION 'Search Calendar Holidays'
        /// </summary>
        public const string SEARCH_CALENDAR_HOLIDAYS = "Search Calendar Holidays";
        /// <summary>
        /// OPERATION 'Search Calendar Weekends'
        /// </summary>
        public const string SEARCH_CALENDAR_WEEKENDS = "Search Calendar Weekends";
        /// <summary>
        /// OPERATION 'Search Exchange'
        /// </summary>
        public const string SEARCH_EXCHANGE = "Search Exchange";
        /// <summary>
        /// OPERATION 'Search Exchange Mapping'
        /// </summary>
        public const string SEARCH_EXCHANGE_MAPPING = "Search Exchange Mapping";
        /// <summary>
        /// OPERATION 'Update Continent'
        /// </summary>
        public const string UPDATE_CONTINENT = "Update Continent";
        /// <summary>
        /// OPERATION 'Update Country'
        /// </summary>
        public const string UPDATE_COUNTRY = "Update Country";
        /// <summary>
        /// OPERATION 'Update Currency'
        /// </summary>
        public const string UPDATE_CURRENCY = "Update Currency";
        /// <summary>
        /// OPERATION 'Update Exchange'
        /// </summary>
        public const string UPDATE_EXCHANGE = "Update Exchange";
        /// <summary>
        /// OPERATION 'Update Exchange Calendar'
        /// </summary>
        public const string UPDATE_EXCHANGE_CALENDAR = "Update Exchange Calendar";
        /// <summary>
        /// OPERATION 'Update Exchange Mapping'
        /// </summary>
        public const string UPDATE_EXCHANGE_MAPPING = "Update Exchange Mapping";
        /// <summary>
        /// OPERATION 'Update Region'
        /// </summary>
        public const string UPDATE_REGION = "Update Region";
    }
}